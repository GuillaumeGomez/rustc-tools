searchState.loadedDescShard("rustc_session", 0, "Capture a backtrace at the point the error is created and …\nThe behavior of the CTFE engine when an error occurs with …\nRaw content of Fluent resource for this crate, generated …\nA default value, i.e. not specified by the user. In this …\nDo nothing special, return the error as usual without a …\nA wrapper around an <code>DiagCtxt</code> that is used for early error …\nRequirements for a <code>StableHashingContext</code> to be used in this …\nCapture a backtrace at the point the error is created and …\nNew-type wrapper around <code>usize</code> for representing limits. …\nRepresents the data associated with a compilation session …\nA <code>StableCrateId</code> is a 64-bit hash of a crate name, together …\nSpecified by the user. In this case we try fairly hard to …\nArchitecture to use for interpreting asm!.\nThe version of the rustc process, possibly including a …\nData about code being compiled, gathered during …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nContains infrastructure for configuring the compiler, …\nthe rustc crate store interface. This also includes types …\nTracks the current behavior of the CTFE engine when an …\nDeclares a static item of type <code>&amp;&#39;static Lint</code>.\nDeclares a type named <code>$name</code> which implements <code>LintPass</code>. To …\nCap lint level specified by a driver specifically.\nAll commandline args used to invoke the compiler, with …\nA module for searching for libraries\nReturns a possibly remapped filename based on the passed …\nReturns the argument unchanged.\nImplements <code>LintPass for $ty</code> with the given list of <code>Lint</code> …\nCalls <code>U::from(self)</code>.\nInput, input file path and output file path to this …\nLoaded up early on in the initialization of this <code>Session</code> …\nThis only ever stores a <code>LintStore</code> but we don’t want a …\nThis tracks where <code>-Zunleash-the-miri-inside-of-you</code> was …\nThe size at which the <code>large_assignments</code> lint starts being …\nComputes the stable ID for a crate with the given name and …\nTracks fuel info if <code>-zfuel=crate=n</code> is specified.\nRelated to out filenames of compilation (e.g. binaries).\nContains <code>ParseSess</code> which holds state living beyond what …\nAlways set to zero and incremented so that we can print …\nUsed by <code>-Z self-profile</code>.\nThe maximum recursion limit for potentially infinitely …\nShould be set if any lints are registered in <code>lint_store</code>.\nSet of enabled features for the current target.\nThe maximum length of types during monomorphization.\nSet of enabled features for the current target, including …\nThe inner atomic value is set to true when a feature …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nNumber of entries in a vtable with the current algorithm …\nNumber of entries in a vtable needed solely for upcasting …\nNumber of entries in a vtable, as-if we did not have trait …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of the type of this field. Present only if the …\nCost of having upcasting in % relative to the number of …\nAbort the process immediately.\nResolve doc links on all items.\n<code>-Zunpretty=ast-tree</code>\n<code>-Zunpretty=ast-tree,expanded</code>\nInstrument for coverage at the MIR block level.\nEmit control-flow protection for branches (enables …\nAlso instrument branch points (includes block coverage).\nThe different settings that the <code>-C control-flow-guard</code> flag …\nThe different settings that the <code>-Z cf-protection</code> flag can …\nThe parsed <code>--cfg</code> options that define the compilation …\nThe parsed <code>--check-cfg</code> options.\nEmit Control Flow Guard metadata and checks.\nHow to perform collapse macros debug info if-ext - if …\nSame as branch coverage, but also adds branch …\nControls whether branch coverage or MC/DC coverage is …\nIndividual flag values controlled by <code>-Z coverage-options</code>.\nRun the proc-macro code on a different thread.\nApply remappings to debug information\nApply remappings to printed compiler diagnostics\nStrip debuginfo.\nDo not emit Control Flow Guard metadata or checks.\nWhich format to use for <code>-Z dump-mono-stats</code>\nThe type of diagnostics output to generate.\nThe locations where this extern entry must be found.\n<code>-Zunpretty=expanded</code>\n<code>-Zunpretty=expanded,hygiene</code>\n<code>-Zunpretty=expanded,identified</code>\nResolve doc links on exported items.\nResolve doc links on exported items only for crate types …\nCollapse debuginfo if the macro comes from a different …\nUse tree-based collections to cheaply get a deterministic …\nDo a full-crate-graph (inter-crate) LTO with “fat” LTO.\n<code>-C lto=fat</code>\nLoad source code from a file.\nValues for the <code>-Z fmt-debug</code> flag.\nIndicates to look for the library in the search paths.\nEmit control-flow protection for both branches and returns.\nDerive fully-featured implementation\nThe different settings that the <code>-Zfunction-return</code> flag can …\nOptions that print the HIR, i.e. <code>-Zunpretty=hir</code>\n<code>-Zunpretty=hir-tree</code>\nOutput meant for the consumption of humans.\n<code>-Zunpretty=identified</code>\n<code>-Zunpretty=hir,identified</code>\nUsed with <code>-Z assert-incr-state</code>.\nThe different settings that the <code>-C instrument-coverage</code> …\nSettings for <code>-Z instrument-xray</code> flag.\nOutput that’s consumed by other tools such as <code>rustfix</code> or …\nEmit structured JSON\nPossible json config files\nReport unused externs in event stream\nKeep the function return unmodified.\nLegacy version, using datalog and the <code>polonius-engine</code> …\nThe different values <code>-C link-self-contained</code> can take: a …\nThe different values that <code>-Z linker-features</code> can take on …\nFound and loaded an existing session directory.\nThe different settings that can be enabled via the …\nReport, and also exit with failure status for deny/forbid\nThis is what the <code>LtoCli</code> values get mapped to after …\nThe different settings that the <code>-C lto</code> flag can have.\nApply remappings to the expansion of std::file!() macro\nPretty-print a markdown table\nInstrument for MC/DC. Mostly a superset of condition …\n<code>-Zunpretty=mir</code>\n<code>-Zunpretty=mir-cfg</code>\nWhether extra span comments are included when dumping MIR, …\nIn-tree prototype, extending the NLL infrastructure.\nDefault: include extra comments in NLL MIR dumps only. Can …\nDon’t do any LTO whatsoever.\n<code>-C lto=no</code>\n<code>-C instrument-coverage=no</code> (or <code>off</code>, <code>false</code> etc.)\nDo not\nDon’t collapse debuginfo for the macro\nEmit Control Flow Guard metadata but no checks.\n<code>-C lto</code>\nDo not strip at all.\nDo not enable control-flow protection\n<code>#[derive(Debug)]</code> and <code>{:?}</code> are no-ops\nDo not resolve doc links.\n<code>-Zunpretty=normal</code>\n<code>-Zunpretty=hir</code>\nDid not load an existing session directory.\nAn alias for <code>macro</code> and <code>debuginfo</code>. This ensures all paths …\nThe default value: disabled.\nDefault behavior to use in out-of-memory situations.\nThe top-level command-line options struct.\nUse tree-based collections to cheaply get a deterministic …\nGenerate a panic that can be caught by <code>catch_unwind</code>.\n<code>-Z patchable-function-entry</code> representation - how many nops …\n<code>-Zpolonius</code> values, enabling the borrow checker polonius …\nPretty print mode\nHow to run proc-macro code when building this crate\nScopes used to determined if it need to apply to –…\nEmit control-flow protection for returns.\nRun the proc-macro code on the same thread as the server.\nPrint only type name, without fields\nReport, but do not exit with failure status for deny/forbid\nSections which do not require relocation are written into …\nOptions that print the source code, i.e. <code>-Zunpretty=normal</code> …\nSections which do not require relocation are written into …\nSplit debug-information is enabled by <code>-C split-debuginfo</code>, …\n<code>-Zunpretty=stable-mir</code>\nLoad source code from a string.\nThe different settings that the <code>-C strip</code> flag can have.\nStrip all symbols.\nDo a full-crate-graph (inter-crate) LTO with ThinLTO.\n<code>-C lto=thin</code>\nDo a local ThinLTO (intra-crate, over the CodeGen Units of …\n<code>-Zunpretty=thir-flat</code>\n<code>-Zunpretty=thir-tree</code>\nReplace returns with jumps to thunk, without emitting the …\n<code>-Zunpretty=hir,typed</code>\nNo <code>-C lto</code> flag passed\nUnspecified value\n<code>-C lto=yes</code>\n<code>-C instrument-coverage</code> or <code>-C instrument-coverage=yes</code>\nCollapse debuginfo for the macro\nIndicates whether this run of the compiler is actually …\nAdd the extern entry to the extern prelude.\nGet a flags value with all known bits set.\n<code>-Z instrument-xray=always</code>, force instrumentation\nTo help checking CLI usage while some of the values are …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns <code>true</code> if there is a reason to build the dep graph.\ncfg and check-cfg configuration\nReturns CLI inconsistencies to emit errors: individual …\nSpecifications of codegen units / ThinLTO which are forced …\nWhether the new trait solver should be enabled in …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns <code>true</code> if user specified a name and not just …\nCrate name. Never contains ‘-’.\nThe crate config requested for the session, which may be …\nInclude the <code>debug_assertions</code> flag in dependency tracking, …\nCommand-line arguments passed to the compiler have to be …\nThe intersection of a source flags value with the …\nThe linker features that are disabled on the CLI, using …\nThe components that are disabled on the CLI, using the …\nGet a flags value with all bits unset.\nThe linker features that are enabled on the CLI, using the …\nThe components that are enabled on the CLI, using the …\nNops after the entry\nIs well known names activated\nIs well known values activated\nAll the expected values for a config name\nWhether the user explicitly set <code>-C link-self-contained</code> on …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFor a given output filename, return the actual name of the …\nTypically based on <code>.rs</code> input file name. Any ‘-’ is …\nIf the extern entry is not referenced in the crate, force …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nWhether the new trait solver should be enabled everywhere. …\nIncorporates an enabled or disabled component as specified …\nAccumulates an enabled or disabled feature as specified on …\n<code>-Z instrument-xray=ignore-loops</code>, ignore presence of loops, …\nIf <code>Some</code>, enable incremental compilation, using the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>-Z instrument-xray=instruction-threshold=N</code>, explicitly set …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nUnless opting into extra comments for all passes, they can …\nReturns whether the legacy version of polonius is enabled\nReturns whether the self-contained linker component was …\nReturns whether the self-contained linker component was …\nReturns whether the “next” version of polonius is …\nIndicates this is a “private” dependency for the …\nYield a set of contained flags values.\nYield a set of contained named flags values.\n<code>true</code> if we’re emitting JSON blobs about each artifact …\n<code>true</code> if we’re emitting a JSON job containing a …\n<code>true</code> if we’re emitting a JSON blob containing the unused …\nEffective logical environment used by <code>env!</code>/<code>option_env!</code> …\n<code>-Z instrument-xray=never</code>, disable instrumentation\nUsed for testing.\n<code>-Z coverage-options=no-mir-spans</code>: Don’t extract block …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe extern entry shouldn’t be considered for unused …\nHelper creating a fully enabled <code>LinkSelfContained</code> …\nGets the output path where a compilation artifact of the …\nParses the <code>--color</code> flag.\nParses the <code>--error-format</code> flag.\nParse the <code>--json</code> flag.\nNops before the entry\nBase directory containing the <code>src/</code> for the Rust standard …\nRemap source path prefixes in all output (messages, object …\nThe intersection of a source flags value with the …\nWhether name resolver should resolve documentation links.\nReturns all rustc command line options, including metadata …\nReturns the “short” subset of the rustc command line …\nkeep this in sync with the event filter names in …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nTurns all components on or off and records that this was …\nReturns <code>true</code> if any of the output types require codegen or …\nReturns <code>true</code> if any of the output types require linking.\nNOTE: Keep these constants in sync with …\n<code>-Z instrument-xray=skip-entry</code>, do not instrument function …\n<code>-Z instrument-xray=skip-exit</code>, do not instrument function …\no/w tests have closure@path\nReturns the path for the Split DWARF file - this can …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGets the path where a compilation artifact of the given …\nLike <code>temp_path</code>, but specifically for dwarf objects.\nLike <code>temp_path</code>, but also supports things where there is no …\nWe default to 1 here since we want to behave like a …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nControl path trimming.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nIndicates how the compiler should treat unstable features.\nThis name is kind of confusing: Most unstable options …\nSet by the <code>Config::hash_untracked_state</code> callback for custom\nWell known names (only used for diagnostics purposes)\nReturns <code>true</code> if there will be an output file generated.\nThe (potentially remapped) working directory\nSpecifies what to do with <code>SIGPIPE</code> before calling <code>fn main()</code>.\nThe JSON output includes a <code>rendered</code> field that includes …\nRender the JSON in a human readable way (with indents and …\nAn anonymous string containing the source code.\nA string that is shown in place of a filename.\nThe parsed <code>--cfg</code> options that define the compilation …\nThe parsed <code>--check-cfg</code> options.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nGenerate the default configs for a given session\nDisallow builtin cfgs from the CLI.\nIs well known names activated\nIs well known values activated\nAll the expected values for a config name\nFill the current <code>CheckCfg</code> with all the well known cfgs\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWell known names (only used for diagnostics purposes)\nThe default value if <code>-Zon-broken-pipe=...</code> is not …\nDo not touch <code>SIGPIPE</code>. Use whatever the parent process uses.\nChange <code>SIGPIPE</code> to <code>SIG_DFL</code> so that the process is killed …\nChange <code>SIGPIPE</code> to <code>SIG_IGN</code> so that failed writes results in …\nWhere a crate came from on the local filesystem. One of …\nA store of Rust crates, through which their metadata can …\nSame as IMPORT_NAME Name is decorated with all prefixes …\nCalling convention for a function defined in an external …\nA dependency that is required by an rlib version of this …\nCrate is loaded by <code>extern crate</code>.\nA dependency that is always injected into the dependency …\nA dependency that is only used for its macros.\nSame as IMPORT_NAME_NOPREFIX Prefix (e.g., the leading <code>_</code> …\nIMPORT_ORDINAL Uses the ordinal (i.e., a number) rather …\nCrate is implicitly loaded by a path resolving through …\nDifferent ways that the PE Format can decorate a symbol …\nSame as IMPORT_NAME_UNDECORATE Prefix (e.g., the leading <code>_</code> …\nCalling convention for the function.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCrate that depends on this crate\nIf packed_bundled_libs enabled, actual filename of library …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, then this crate is the crate named by the extern …\nIs this for a function (rather than a static variable).\nNumber of links to reach the extern; used to select the …\nReference span for definitions.\nSpan of import’s “extern” declaration; used for …\nspan of the extern crate that caused this to be loaded\nThe interned StableCrateIds.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nThis function checks if sysroot is found using …\nCalls <code>U::from(self)</code>.\nReturns a path to the target’s <code>bin</code> folder within its …\nReturns the provided sysroot or calls …\nThe top-level command-line options struct.\nIndicates whether this run of the compiler is actually …\nSpecifications of codegen units / ThinLTO which are forced …\nThe crate config requested for the session, which may be …\nInclude the <code>debug_assertions</code> flag in dependency tracking, …\nIf <code>Some</code>, enable incremental compilation, using the given …\n<code>true</code> if we’re emitting JSON blobs about each artifact …\n<code>true</code> if we’re emitting a JSON job containing a …\n<code>true</code> if we’re emitting a JSON blob containing the unused …\nEffective logical environment used by <code>env!</code>/<code>option_env!</code> …\nDefines all <code>CodegenOptions</code>/<code>DebuggingOptions</code> fields and …\nBase directory containing the <code>src/</code> for the Rust standard …\nRemap source path prefixes in all output (messages, object …\nWhether name resolver should resolve documentation links.\nkeep this in sync with the event filter names in …\no/w tests have closure@path\nWe default to 1 here since we want to behave like a …\nControl path trimming.\nIndicates how the compiler should treat unstable features.\nThis name is kind of confusing: Most unstable options …\nSet by the <code>Config::hash_untracked_state</code> callback for custom\nThe (potentially remapped) working directory\nUse this for any boolean option that has a static default.\nParse a comma-separated list of enabled and disabled …\nThis is for boolean options that don’t take a value and …\nUse this for any numeric option that has a static default.\nUse this for any boolean option that lacks a static …\nParse an optional language identifier, e.g. <code>en-US</code> or <code>zh-CN</code>.\nUse this for any numeric option that lacks a static …\nUse this for any string option that lacks a static default.\nParses whether polonius is enabled, and if so, which …\nUse this for any string option that has a static default.\nMake sure files are writeable. Mac, FreeBSD, and Windows …\nReturns default crate type for target\nChecks if target supports crate_type as output\nCollected spans during parsing for places where a certain …\nInfo about a parsing session.\nAdds the diagnostics for a feature to an existing error.\nAdds the diagnostics for a feature to an existing error.\nContains the spans of block expressions that could have …\nWhether cfg(version) should treat the current release as …\nUsed to generate new <code>AttrId</code>s. Every <code>AttrId</code> is unique.\nPlaces where identifiers that contain invalid Unicode …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEnvironment variables accessed during the build and their …\nConstruct a diagnostic for a language feature error due to …\nConstruct a diagnostic for a feature gate error.\nConstruct a future incompatibility diagnostic for a …\nConstruct a future incompatibility diagnostic for a …\nFile paths accessed during the build.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFeature gate the given <code>span</code> under the given <code>feature</code> which …\nInsert a symbol and its span into symbol gallery. If the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepend the given set of <code>spans</code> onto the set in <code>self</code>.\nUsed for testing.\nSpans passed to <code>proc_macro::quote_span</code>. Each span has a …\nPlaces where raw identifiers were used. This is used to …\nAll symbols occurred and their first occurrence span.\nUngate the last span under the given <code>feature</code>. Panics if …\nThe obvious implementation of <code>SearchPath::files</code> is a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is the state during which the session directory is …\nCapture a backtrace at the point the error is created and …\nThe behavior of the CTFE engine when an error occurs with …\nA default value, i.e. not specified by the user. In this …\nDo nothing special, return the error as usual without a …\nA wrapper around an <code>DiagCtxt</code> that is used for early error …\nThis is the state after the session directory has been …\nCapture a backtrace at the point the error is created and …\nHolds data on the current incremental compilation session, …\nThis is an error state that is reached when some …\nNew-type wrapper around <code>usize</code> for representing limits. …\nThis is the state the session will be in until the incr. …\nRepresents the data associated with a compilation session …\nA <code>StableCrateId</code> is a 64-bit hash of a crate name, together …\nSpecified by the user. In this case we try fairly hard to …\nSwap out the underlying dcx once we acquire the user’s …\nArchitecture to use for interpreting asm!.\nAre we allowed to use features from the Rust 2018 edition?\nAre we allowed to use features from the Rust 2021 edition?\nAre we allowed to use features from the Rust 2024 edition?\nThe version of the rustc process, possibly including a …\nData about code being compiled, gathered during …\nReturns the number of codegen units that should be used …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nWe want to know if we’re allowed to do an optimization …\nTrue if <code>-Zcoverage-options=no-mir-spans</code> was passed.\nCheck whether this compile session and crate type use …\nTracks the current behavior of the CTFE engine when an …\nReturns the default symbol visibility.\nCap lint level specified by a driver specifically.\nChecks if LLVM lifetime markers should be emitted.\nReturns <code>true</code> if internal lints should be added to the lint …\nAll commandline args used to invoke the compiler, with …\nInvoked all the way at the end to finish off diagnostics …\nReturns a possibly remapped filename based on the passed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a list of directories where target-specific tool …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInput, input file path and output file path to this …\nIs this edition 2015?\nReturns true if the crate is a testing one.\nLoaded up early on in the initialization of this <code>Session</code> …\nThis only ever stores a <code>LintStore</code> but we don’t want a …\nCalculates the flavor of LTO to use for this compilation.\nThis tracks where <code>-Zunleash-the-miri-inside-of-you</code> was …\nThe size at which the <code>large_assignments</code> lint starts being …\nReturns <code>true</code> if we should use the PLT for shared library …\nCreate a new limit from a <code>usize</code>.\nTracks fuel info if <code>-zfuel=crate=n</code> is specified.\nWe’re rejecting all further optimizations.\nReturns the panic strategy for this compile session. If …\nAlways set to zero and incremented so that we can print …\nUsed by <code>-Z self-profile</code>.\nRecord the fact that we called <code>trimmed_def_paths</code>, and do …\nThe maximum recursion limit for potentially infinitely …\nShould be set if any lints are registered in <code>lint_store</code>.\nIf <code>-zfuel=crate=n</code> is specified, initially set to <code>n</code>, …\nReturns <code>true</code> if the target can use the current split …\nSet of enabled features for the current target.\nReturns the number of query threads that should be used …\nUsed by <code>-Z self-profile</code>.\nThe maximum length of types during monomorphization.\nSet of enabled features for the current target, including …\nThe inner atomic value is set to true when a feature …\nValidate command line arguments with a <code>Session</code>.\nCheck that <code>value</code> is within the limit. Ensures that the …\nA path that has been canonicalized along with its …\nDynamic library (e.g. <code>libfoo.so</code> on Linux) or an import …\nA macOS-specific kind of dynamic libraries.\nArgument which is passed to linker, relative order with …\nDynamic library (e.g. <code>foo.dll</code> on Windows) without a …\nStatic library (e.g. <code>libfoo.a</code> on Linux or <code>foo.lib</code> on …\nThe library kind wasn’t specified, <code>Dylib</code> is currently …\nModule imported from WebAssembly\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nGets a list of extra command-line flags provided by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whenever rustc was launched by Cargo as opposed to …\nWhether the dynamic library will be linked only if it …\nWhether the framework will be linked only if it satisfies …\nWhether to bundle objects from static library into …\nWhether to link static library without throwing any object …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")