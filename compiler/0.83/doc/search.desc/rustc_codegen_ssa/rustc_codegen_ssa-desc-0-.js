searchState.loadedDescShard("rustc_codegen_ssa", 0, "This crate contains codegen code that is used by all …\nMisc info we load from metadata to persist beyond the tcx.\nRaw content of Fluent resource for this crate, generated …\nGet a flags value with all known bits set.\nThis pass is only used for UNIT TESTS related to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nErrors emitted by codegen_ssa\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCall <code>emit</code> function with every artifact type currently …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nChecks if the given filename ends with the <code>.rcgu.o</code> …\nThe name of the module. When the crate may be saved between\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nComputing the size and alignment of a value.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nInterface of a Rust codegen backend\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nScan for a <code>cfg=&quot;foo&quot;</code> attribute and check whether we have a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA thin wrapper around <code>Command</code> in the standard library …\nReading of the rustc metadata for rlibs and dylibs\nDefault implementation of ObjectReader that uses the <code>object</code>…\nHelper struct to query object file information from …\nAdds an arbitrary file to this archive\nCombine the provided files, rlibs, and native libraries …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCreates a DLL Import Library …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIterates over the symbols in the object file.\nReturns the member alignment of an XCoff object file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the object file is 64-bit. Note that this …\nReturns true if the object file is an EC (that is, an …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>true</code> if we’re pretty sure that this’ll blow …\nWe need to communicate five things to the linker on …\nAdd arbitrary “late link” args defined by the target …\nAdd sysroot and other globally set directories to the …\nAdd a link script embedded in the target, if applicable.\nAdd a synthetic object file that contains reference to all …\nWhen using the linker flavors opting in to <code>lld</code>, add the …\nAdd object files for allocator code linked once for the …\nAdd object files containing metadata for the current crate.\nAdd object files containing code from the current crate.\nAdd arbitrary “post-link” args defined by the target …\nAdd post-link object files defined by the target spec.\nAdd arbitrary “pre-link” args defined by the target …\nAdd pre-link object files defined by the target spec.\nAdd options making relocation sections in the produced ELF …\nAdd library search paths used at runtime by dynamic …\nAdd arbitrary “user defined” args defined from command …\nExtract all symbols defined in raw-dylib libraries, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns a boolean indicating whether the specified crate …\nCalls <code>U::from(self)</code>.\nPerforms the linkage portion of the compilation phase. …\nUse <code>thorin</code> (rust implementation of a dwarf packaging …\nCreate a dynamic library or executable.\nCreate an ‘rlib’.\nCreate a static archive.\nThis functions tries to determine the appropriate linker …\nProduce the linker command line containing linker path and …\nReturns a pair of boolean indicating whether we should …\nVarious toolchain components used during linking are used …\nLinker for AIX.\nLinker shepherd script for L4Re (Fiasco)\nLinker abstraction used by <code>back::link</code> to build up the …\nThe <code>self-contained</code> LLVM bitcode linker\nMuch simplified and explicit CLI for the NVPTX linker. The …\nArguments for the cc wrapper specifically. Check that it’…\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDisables non-English messages from localized linkers. Such …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe third parameter is for env vars, used on windows to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArguments for the underlying linker. Add options to pass …\nArguments supported by both underlying linker and cc …\nJust pass the arguments to the linker as is. It is assumed …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nA “gauge” of how costly it is to optimize this module, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptimize this module within the given codegen context.\nThe default metadata loader. This is used by cg_llvm and …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nXcoff - On AIX, custom sections are merged into predefined …\nCreates a simple WebAssembly object file, which is itself …\nFor rlibs we “pack” rustc metadata into a dummy object …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs Apple’s CPU subtype <code>arm64e</code>s\nMach-O files contain information about:\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is the symbol name of the given instance as seen by …\nThis is the symbol name of the given instance instantiated …\nSimilar to <code>CodegenDone</code>, but for reusing a pre-LTO artifact …\nWhat kind of llvm bitcode section to embed in an object …\nA message sent from the coordinator thread to the main …\nSome normal-ish compiler error occurred, and codegen …\nThe frontend has finished generating everything for all …\nAdditional resources used by optimize_and_codegen (not …\nThe frontend has finished generating something (backend IR …\nDoing codegen, i.e. MIR-to-LLVM-IR conversion.\nActual LTO type we end up choosing based on multiple …\nCopy the post-LTO artifacts from the incremental cache to …\nWhat kind of object file to emit.\nThe backend has finished compiling a CGU, nothing more …\nDoing nothing.\nPerforms (Thin)LTO on the given module.\nIdle, but lending the compiler process’s Token to an …\nMessages sent to the coordinator.\nModule-specific configuration for <code>optimize_and_codegen</code>.\nThe backend has finished compiling a CGU, which now needs …\nThe backend has finished compiling a CGU, which now needs …\nThe backend has finished compiling a CGU, which now needs …\nOptimize a newly codegened, totally unoptimized module.\nConfiguration passed to the function returned by the …\nA jobserver token has become available. Sent from the …\nThe backend has finished processing a work item for a …\nA result produced by the backend.\n<code>FatalError</code> is explicitly not <code>Send</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nChannel back to the main control thread to send messages to\nEmitter to use for diagnostics produced during codegen.\nAll commandline args used to invoke the compiler, with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe incremental compilation session directory, or None if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSome(level) to optimize at a certain level, or None to run …\nSome(level) to optimize binary size, or None to not affect …\nThe name of the output object file. Used for setting …\n<code>true</code> if the codegen should be run in parallel.\nNames of additional optimization passes to run.\nLLVM optimizations for which we want to print remarks.\nDirectory into which should the LLVM optimization remarks …\nGenerate a short description of this work item suitable …\nSplit DWARF is enabled in LLVM by checking that …\nDecide allocator kind to codegen. If <code>Some(_)</code> this will be …\nReturns <code>rhs</code> sufficiently masked, truncated, and/or …\nCoerces <code>src</code> to <code>dst_ty</code> which is guaranteed to be a <code>dyn*</code> …\nCoerces <code>src</code>, which is a reference to a value of type <code>src_ty</code>…\nThis function returns all of the debugger visualizers …\nObtain the <code>argc</code> and <code>argv</code> values to pass to the rust start …\nReturns whether a call from the current crate to the …\nCreates the <code>main</code> function which will initialize the rust …\nCoerces <code>src</code> to <code>dst_ty</code>. <code>src_ty</code> must be a pointer.\nRetrieves the information we are losing (making dynamic) …\nCodegen takes advantage of the additional assumption, …\nReturns <code>true</code> if this session’s target will use SEH-based …\nReturns <code>true</code> if this session’s target requires the new …\nGiven a map from target_features to whether they are …\nChecks if the provided DefId is a method in a trait impl …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the type with which we want to describe the tag of …\nType Names for Debug Info.\nReturns true if we want to generate a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompute the name of the type as it should be stored in …\nComputes a name for the global variable storing a vtable …\nCheck if we should generate C++ like names and debug …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThis takes a valid <code>self</code> receiver type and extracts the …\nReturns the argument unchanged.\nCreates a dynamic vtable for the given type and vtable …\nCalls <code>U::from(self)</code>.\nCall this function whenever you need to load a vtable.\nMaster context for codegenning from MIR.\nNothing created yet.\nThe backend <code>OperandValue</code> has already been generated.\nWill be a <code>Self::Operand</code> once we get to its definition.\nNothing created yet, and nothing should be.\nHas been created.\n<code>UnsizedPlace(p)</code>: <code>p</code> itself is a thin pointer (indirect …\nAn analysis to determine which locals require allocas and …\nProduces, for each argument, a <code>Value</code> pointing at the …\nA backend <code>BasicBlock</code> for each MIR <code>BasicBlock</code>, created …\nCaller location propagated if this function has …\nCast one of the immediates from an <code>OperandValue::Immediate</code> …\nThe funclet status of each basic block\nIn the <code>Err</code> case, returns the instance that should be …\nReturns <code>Some</code> if this is indeed a panic intrinsic and …\nCodegen an <code>Rvalue::RawPtr</code> or <code>Rvalue::Ref</code>\nGenerates code for a <code>Resume</code> terminator.\nAttempts to transmute an <code>OperandValue</code> to another …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPartition all <code>VarDebugInfo</code> in <code>self.mir</code>, by their base <code>Local</code>…\nApply debuginfo and/or name, after creating the <code>alloca</code> for …\nThis is a convenience helper for <code>immediate_const_vector</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhen targeting MSVC, this stores the cleanup info for each …\nprocess constant containing SIMD shuffle indices &amp; …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the landing/cleanup pad wrapper around the given …\nThis stores the cached landing/cleanup pad block for a …\nGet the backend <code>BasicBlock</code> for a MIR <code>BasicBlock</code>, either …\nLocals are in a private module as updating …\nThe location where each MIR arg/var/tmp/ret is stored. …\nAll <code>VarDebugInfo</code> from the MIR body, partitioned by <code>Local</code>. …\nWhen unwinding is initiated, we have to store this …\nCached terminate upon unwinding block and its reason\nTransmutes one of the immediates from an …\nLike <code>llbb</code>, but may fail if the basic block should be …\nCached unreachable block\nGets which variant of <code>OperandValue</code> is expected for a …\nA local that requires an alloca.\nA scalar or a scalar pair local with a single definition …\nA scalar or a scalar pair local that is neither defined …\nMSVC requires unwinding code to be split to a tree of …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStore a direct return value to an operand local place.\nStore an indirect return value to an operand local place.\nDo nothing; the return value is indirect or ignored.\nStore the return value to the pointer.\nUsed by <code>FunctionCx::codegen_terminator</code> for emitting common …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCall <code>fn_ptr</code> of <code>fn_abi</code> with the arguments <code>llargs</code>, the …\nGenerates inline assembly with optional <code>destination</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the appropriate <code>Funclet</code> for the current funclet, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a basic block (creating it if necessary), possibly …\nInformation needed to emit a constant.\nLike <code>mir::VarDebugInfo</code>, but within a <code>mir::Local</code>.\nDILocations inherit source file name from the parent …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\n<code>DIVariable</code> returned by <code>create_dbg_var</code>.\nOffset from the <code>base</code> used to calculate the debuginfo …\nByte range in the <code>dbg_var</code> covered by this fragment, if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEach offset in this vector indicates one level of …\nCall site location, if this scope was inlined from another …\nMaps from an inlined function to its debug info …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>.place.projection</code> from <code>mir::VarDebugInfo</code>.\nThe final location debuginfo should point to.\nMaps from source code to the corresponding debug info …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA single LLVM immediate value.\nAn <code>OperandRef</code> is an “SSA” reference to a Rust value, …\nThe representation of a Rust value. The enum variant is in …\nA pair of immediate LLVM values. Used by wide pointers too.\nA reference to the actual operand. The data is guaranteed …\nA value taking no bytes, and which therefore needs no LLVM …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nTreat this value as a pointer and return the place to …\nAsserts that this operand is a pointer (or reference) and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf the type is a pair, we return a <code>Pair</code>, otherwise, an …\nGiven an array of 0/1/2 immediate values, return …\nAsserts that this operand refers to a scalar and returns a …\nIf this operand is a <code>Pair</code>, we return an aggregate with the …\nIf this is ZeroSized/Immediate/Pair, return an array of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe layout of value, based on its Rust type.\nTreat this value as a pointer and return the data pointer …\nReturns an <code>OperandValue</code> that’s generally UB to use in …\nThe value.\nThe location and extra runtime properties of the place.\nGets the pointer to this place as an …\nThe alignment we know for this place.\nAllocates a stack slot in the function for a value of the …\nReturns a place for an indirect reference to an unsized …\nObtain the actual discriminant of a value.\nSets the discriminant for a new value of the given case of …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe monomorphized type of this place, including variant …\nThis place’s extra data if it is unsized, or <code>None</code> if …\nA pointer to the contents of the place.\nConstructor for the ordinary case of <code>Sized</code> types.\nAccess a field, at a point when the value’s case is …\nThe location and extra runtime properties of the place.\nCreates a <code>PlaceRef</code> to this location with the given type.\nThe variants of this match <code>OperandValue</code>, giving details …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the set of target features used in a function for …\nChecks the function annotated with <code>#[target_feature]</code> is …\nSame as add_used_global(), but only prevent the compiler …\nHandle the MIR coverage info in a backend-specific way.\nMark the given global value as “used”, to prevent the …\nGenerate an arithmetic right-shift. Both operands must …\nThe backend type used for a rust type when it’s in …\nTake an inline assembly expression and splat it out via …\nRemember to add all intrinsics here, in …\nThis generates the codegen unit and returns it along with …\nGenerate a fake value. Poison always affects the entire …\nGenerate an uninitialized value (matching uninitialized …\nCreates the function-specific debug context.\nDeclares the extern “C” main function for the entry …\nThe backend type used for a rust type when it’s in an …\nRetrieves the bit width of the integer type <code>self</code>.\nThis is called on the returned <code>Box&lt;dyn Any&gt;</code> from …\nCalled for <code>StorageDead</code>\nCalled for <code>StorageLive</code>\nThis is called on the returned <code>CodegenResults</code> from …\nLocale resources for diagnostic messages - a string the …\nGenerate a logical right-shift. Both operands must have …\nPerforms fat LTO by merging all modules into a single one …\nMerge all modules into main_module and returning it\nPerforms thin LTO by performing necessary global analysis …\nGenerate a left-shift. Both operands must have the same …\nTrait method used to load a function while testing if it …\nTrait method used to test whether a given pointer is …\nTrait method used to inject <code>va_end</code> on the “spoofed” …\nTrait method used to inject <code>va_start</code> on the “spoofed” …\nReturns the number of elements in <code>self</code> if it is an LLVM …\nCalled for Rvalue::Repeat when the elem is neither a ZST …\nTake an inline assembly expression and splat it out via …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis generates the codegen unit and returns it along with …\nThis is called on the returned <code>Box&lt;dyn Any&gt;</code> from …\nThis is called on the returned <code>CodegenResults</code> from …\nLocale resources for diagnostic messages - a string the …\nThe metadata loader used to load rlib and dylib metadata.\nThe metadata loader used to load rlib and dylib metadata.\nReturns <code>true</code> if this backend can be safely called from …\nReturns <code>true</code> if this backend can be safely called from …\nGenerate an arithmetic right-shift. Both operands must …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalled for <code>StorageDead</code>\nCalled for <code>StorageLive</code>\nGenerate a logical right-shift. Both operands must have …\nGenerate a left-shift. Both operands must have the same …\n<em>Typed</em> copy for non-overlapping places.\n<em>Typed</em> copy for non-overlapping places.\n<em>Typed</em> swap for non-overlapping places.\n<em>Typed</em> swap for non-overlapping places.\nCalled for Rvalue::Repeat when the elem is neither a ZST …\nGenerate a fake value. Poison always affects the entire …\nGenerate an uninitialized value (matching uninitialized …\nHandle the MIR coverage info in a backend-specific way.\nPerforms any start-of-function codegen needed for coverage …\nPerforms any start-of-function codegen needed for coverage …\nCreates the function-specific debug context.\nRemember to add all intrinsics here, in …\nTrait method used to load a function while testing if it …\nTrait method used to test whether a given pointer is …\nTrait method used to inject <code>va_end</code> on the “spoofed” …\nTrait method used to inject <code>va_start</code> on the “spoofed” …\nDeclares the extern “C” main function for the entry …\nSame as add_used_global(), but only prevent the compiler …\nMark the given global value as “used”, to prevent the …\nThe backend type used for a rust type when it’s in …\nThe backend type used for a rust type when it’s in an …\nRetrieves the bit width of the integer type <code>self</code>.\nA type that produces an <code>OperandValue::Ref</code> when loaded.\nA type that produces an <code>OperandValue::Ref</code> when loaded.\nReturns the number of elements in <code>self</code> if it is an LLVM …\nPerforms fat LTO by merging all modules into a single one …\nMerge all modules into main_module and returning it\nPerforms thin LTO by performing necessary global analysis …")