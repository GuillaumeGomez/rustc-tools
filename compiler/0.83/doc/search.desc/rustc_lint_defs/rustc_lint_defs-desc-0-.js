searchState.loadedDescShard("rustc_lint_defs", 0, "The <code>allow</code> level will not issue any message.\nIndicates the confidence in the correctness of a …\nLints that are buffered up early on in the <code>Session</code> before …\nA custom reason.\nThe <code>deny</code> level will produce an error and stop further …\nThe edition of the compiler. (See RFC 2052.)\nThe 2015 edition\nThe 2018 edition\nThe 2021 edition\nThe 2024 edition\nPreviously accepted code that will become an error in the …\nCode that changes meaning in some way in the provided …\nThe <code>expect</code> level will suppress the lint message but in …\n<code>Forbid</code> is equivalent to the <code>deny</code> level but can’t be …\nThis lint level is a special case of <code>Warn</code>, that can’t be …\nThe reason for future incompatibility\nExtra information for a future incompatibility lint.\nThis will be an error in a future release for all editions\nThis will be an error in a future release, and Cargo …\nCode that changes meaning in some way in a future release.\nThe suggestion contains placeholders like <code>(...)</code> or …\nSetting for how to handle a lint.\nSpecification of a single lint.\nEach lint expectation has a <code>LintExpectationId</code> assigned by …\nIdentifies a lint known to the compiler.\nThe suggestion is definitely what the user intended, or …\nThe suggestion may be what the user intended, but it is …\n<code>&#39;r#</code> in edition &lt; 2021.\n<code>##</code> or <code>#&quot;</code> is edition &lt; 2024.\nThe <code>HirId</code> that the lint expectation is attached to. This …\nThe applicability of the suggestion is unknown.\nUsed for lints emitted during the <code>EarlyLintPass</code>. This id …\nThe <code>warn</code> level will produce a warning if the lint was …\nConverts a level to a lower-case string.\nAre we allowed to use features from the Rust 2018 edition?\nAre we allowed to use features from the Rust 2021 edition?\nAre we allowed to use features from the Rust 2024 edition?\nSome lints that are built in to the compiler.\nDeclares a static item of type <code>&amp;&#39;static Lint</code>.\nDeclares a type named <code>$name</code> which implements <code>LintPass</code>. To …\nDefault level for the lint.\nDescription of the lint or the issue it detects.\nCustomization of the <code>Diag&lt;&#39;_&gt;</code> for the lint.\nStarting at the given edition, default to the given lint …\nWhether to explain the reason to the user.\n<code>Some</code> if this lint is feature gated, otherwise <code>None</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>Attribute</code> to a level.\nConverts a lower-case string to a level. This will never …\nConverts a <code>Symbol</code> to a level.\nImplements <code>LintPass for $ty</code> with the given list of <code>Lint</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if this lint is being loaded by another tool (e.g. …\nIs this edition 2015?\nA lint Id that can be passed to …\nA string identifier for the lint.\nGets the lint’s name, with ASCII letters converted to …\nThe <code>NodeId</code> of the AST node that generated the lint.\nGets the <code>LintId</code> for a <code>Lint</code>.\nThe reason for the lint used by diagnostics to provide the …\ne.g., a URL for an issue/PR/RFC or error code\n<code>true</code> if this lint is reported even inside expansions of …\nThe span of code that we are linting on.\nGets the name of the lint.\nSpan of the code that should be removed when eliding this …\nSpan where the same name is also re-exported.\nSpan where the name is first re-exported.\nThe glob reexport that is shadowed by the local binding.\nIndicates if the named argument is used as a …\nThe name for which collision(s) have occurred.\nThe name of the local binding which shadows the glob …\nString containing the named arguments name\nSpan where the named argument’s name is (so we know …\nThe name space for which the collision(s) occurred in.\nThe namespace for which the shadowing occurred in.\nSpan of the parameter which declares this lifetime.\nSpan where the named argument is used by position and is …\nSpan where the named argument is used by position and will …\nThe local binding that shadows the glob reexport.\nThe span of the unnecessarily-qualified path to remove.\nSpan of the single use, or None if the lifetime is never …\nThe <code>absolute_paths_not_starting_with_crate</code> lint detects …\nThe <code>ambiguous_associated_items</code> lint detects ambiguity …\nThe <code>ambiguous_glob_imports</code> lint detects glob imports that …\nThe <code>ambiguous_glob_reexports</code> lint detects cases where …\nThe <code>arithmetic_overflow</code> lint detects that an arithmetic …\nThe <code>asm_sub_register</code> lint detects using only a subset of a …\nThe <code>bad_asm_style</code> lint detects the use of the <code>.intel_syntax</code>…\nThe <code>bare_trait_objects</code> lint suggests using <code>dyn Trait</code> for …\nThe <code>bindings_with_variant_name</code> lint detects pattern …\nThe <code>break_with_label_and_loop</code> lint detects labeled <code>break</code> …\nThe <code>cenum_impl_drop_cast</code> lint detects an <code>as</code> cast of a …\nThe <code>coherence_leak_check</code> lint detects conflicting …\nThe <code>conflicting_repr_hints</code> lint detects <code>repr</code> attributes …\nThe <code>const_evaluatable_unchecked</code> lint detects a generic …\nThe <code>const_item_mutation</code> lint detects attempts to mutate a …\nThe <code>dead_code</code> lint detects unused, unexported items.\nThe <code>dependency_on_unit_never_type_fallback</code> lint detects …\nThe <code>deprecated</code> lint detects use of deprecated items.\nThe <code>deprecated_in_future</code> lint is internal to rustc and …\nThe <code>deprecated_safe_2024</code> lint detects unsafe functions …\nThe <code>deprecated_where_clause_location</code> lint detects when a …\nThe <code>duplicate_macro_attributes</code> lint detects when a <code>#[test]</code>…\nThe <code>elided_lifetimes_in_associated_constant</code> lint detects …\nThe <code>elided_lifetimes_in_paths</code> lint detects the use of …\nThe <code>elided_named_lifetimes</code> lint detects when an elided …\nThe <code>explicit_builtin_cfgs_in_flags</code> lint detects builtin …\nThe <code>explicit_outlives_requirements</code> lint detects unnecessary\nThe <code>exported_private_dependencies</code> lint detects private …\nThe <code>ffi_unwind_calls</code> lint detects calls to foreign …\nThe <code>forbidden_lint_groups</code> lint detects violations of <code>forbid</code>…\nThe <code>function_item_references</code> lint detects function …\nThe <code>fuzzy_provenance_casts</code> lint detects an <code>as</code> cast between …\nThe <code>hidden_glob_reexports</code> lint detects cases where glob …\nDoes nothing as a lint pass, but registers some <code>Lint</code>s that …\nThe <code>ill_formed_attribute_input</code> lint detects ill-formed …\nThe <code>incomplete_include</code> lint detects the use of the <code>include!</code>\nThe <code>ineffective_unstable_trait_impl</code> lint detects …\nThe <code>inline_no_sanitize</code> lint detects incompatible use of …\nThe <code>invalid_doc_attributes</code> lint detects when the …\nThe <code>invalid_macro_export_arguments</code> lint detects cases …\nThe <code>invalid_type_param_default</code> lint detects type parameter …\nThe <code>irrefutable_let_patterns</code> lint detects irrefutable …\nThe <code>large_assignments</code> lint detects when objects of large …\nThe <code>late_bound_lifetime_arguments</code> lint detects generic …\nThe <code>legacy_derive_helpers</code> lint detects derive helper …\nThe <code>long_running_const_eval</code> lint is emitted when const …\nThe <code>lossy_provenance_casts</code> lint detects an <code>as</code> cast between …\nThe <code>macro_expanded_macro_exports_accessed_by_absolute_paths</code>…\nThe <code>macro_use_extern_crate</code> lint detects the use of the …\nThe <code>meta_variable_misuse</code> lint detects possible …\nThe <code>missing_abi</code> lint detects cases where the ABI is …\nThe <code>missing_fragment_specifier</code> lint is issued when an …\nThe <code>missing_unsafe_on_extern</code> lint detects missing unsafe …\nThe <code>must_not_suspend</code> lint guards against values that …\nThe <code>named_arguments_used_positionally</code> lint detects cases …\nThe <code>never_type_fallback_flowing_into_unsafe</code> lint detects …\nThe <code>non_contiguous_range_endpoints</code> lint detects likely …\nThe <code>non_exhaustive_omitted_patterns</code> lint aims to help …\nThe <code>order_dependent_trait_objects</code> lint detects a trait …\nThe <code>out_of_scope_macro_calls</code> lint detects <code>macro_rules</code> …\nThe <code>overlapping_range_endpoints</code> lint detects <code>match</code> arms …\nThe <code>patterns_in_fns_without_body</code> lint detects <code>mut</code> …\nThe <code>private_bounds</code> lint detects types in a secondary …\nThe <code>private_interfaces</code> lint detects types in a primary …\nThe <code>private_macro_use</code> lint detects private macros that are …\nThe <code>proc_macro_derive_resolution_fallback</code> lint detects …\nThe <code>ptr_cast_add_auto_to_object</code> lint detects casts of raw …\nThe <code>ptr_to_integer_transmute_in_consts</code> lint detects …\nThe <code>pub_use_of_private_extern_crate</code> lint detects a specific\nThe <code>redundant_imports</code> lint detects imports that are …\nThe <code>redundant_lifetimes</code> lint detects lifetime parameters …\nThe <code>refining_impl_trait_internal</code> lint detects <code>impl Trait</code> …\nThe <code>refining_impl_trait_reachable</code> lint detects <code>impl Trait</code> …\nThe <code>renamed_and_removed_lints</code> lint detects lints that have …\nThe <code>repr_transparent_external_private_fields</code> lint detects …\nThe <code>rust_2021_incompatible_closure_captures</code> lint detects …\nThe <code>rust_2021_incompatible_or_patterns</code> lint detects usage …\nThe <code>rust_2021_prefixes_incompatible_syntax</code> lint detects …\nThe <code>rust_2021_prelude_collisions</code> lint detects the usage of …\nThe <code>rust_2024_guarded_string_incompatible_syntax</code> lint …\nThe <code>rust_2024_incompatible_pat</code> lint detects patterns whose …\nThe <code>rust_2024_prelude_collisions</code> lint detects the usage of …\nThe <code>self_constructor_from_outer_item</code> lint detects cases …\nThe <code>semicolon_in_expressions_from_macros</code> lint detects …\nThe <code>single_use_lifetimes</code> lint detects lifetimes that are …\nThe <code>soft_unstable</code> lint detects unstable features that were …\nThe <code>stable_features</code> lint detects a <code>feature</code> attribute that …\nThe <code>test_unstable_lint</code> lint tests unstable lints and is …\nThe <code>text_direction_codepoint_in_comment</code> lint detects …\nThe <code>trivial_casts</code> lint detects trivial casts which could …\nThe <code>trivial_numeric_casts</code> lint detects trivial numeric …\nThe <code>tyvar_behind_raw_pointer</code> lint detects raw pointer to an\nThe <code>unconditional_panic</code> lint detects an operation that …\nThe <code>unconditional_recursion</code> lint detects functions that …\nThe <code>uncovered_param_in_projection</code> lint detects a violation …\nThe <code>undefined_naked_function_abi</code> lint detects naked …\nThe <code>unexpected_cfgs</code> lint detects unexpected conditional …\nThe <code>unfulfilled_lint_expectations</code> lint detects when a lint …\nThe <code>uninhabited_static</code> lint detects uninhabited statics.\nThe <code>unknown_crate_types</code> lint detects an unknown crate type …\nThe <code>unknown_lints</code> lint detects unrecognized lint …\nThe <code>unknown_or_malformed_diagnostic_attributes</code> lint …\nThe <code>unnameable_test_items</code> lint detects <code>#[test]</code> functions …\nThe <code>unnameable_types</code> lint detects types for which you can …\nThe <code>unreachable_code</code> lint detects unreachable code paths.\nThe <code>unreachable_patterns</code> lint detects unreachable patterns.\nThe <code>unsafe_attr_outside_unsafe</code> lint detects a missing …\nThe <code>unsafe_op_in_unsafe_fn</code> lint detects unsafe operations …\nThe <code>unstable_name_collisions</code> lint detects that you have …\nThe <code>unstable_syntax_pre_expansion</code> lint detects the use of …\nThe <code>unsupported_calling_conventions</code> lint is output …\nThe <code>unused_assignments</code> lint detects assignments that will …\nThe <code>unused_associated_type_bounds</code> lint is emitted when an …\nThe <code>unused_attributes</code> lint detects attributes that were …\nThe <code>unused_crate_dependencies</code> lint detects crate …\nThe <code>unused_doc_comments</code> lint detects doc comments that aren…\nThe <code>unused_extern_crates</code> lint guards against <code>extern crate</code> …\nThe <code>unused_features</code> lint detects unused or unknown …\nThe <code>unused_imports</code> lint detects imports that are never …\nThe <code>unused_labels</code> lint detects labels that are never used.\nThe <code>unused_lifetimes</code> lint detects lifetime parameters that …\nThe <code>unused_macros</code> lint detects macros that were not used.\nThe <code>unused_macro_rules</code> lint detects macro rules that were …\nThe <code>unused_mut</code> lint detects mut variables which don’t …\nThe <code>unused_qualifications</code> lint detects unnecessarily …\nThe <code>unused_unsafe</code> lint detects unnecessary use of an <code>unsafe</code>…\nThe <code>unused_variables</code> lint detects variables which are not …\nThe <code>useless_deprecated</code> lint detects deprecation attributes …\nThe <code>warnings</code> lint allows you to change the level of other …\nThe <code>wasm_c_abi</code> lint detects crate dependencies that are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")