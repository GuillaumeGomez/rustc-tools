searchState.loadedDescShard("rustc_middle", 3, "Returns an iterator over all associated items with the …\nReturns the associated item with the given name and …\nReturns the associated item with the given name and any of …\nReturns the associated item with the given name in the …\nWhether this is a method with an explicit self as its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a slice of associated items in the order they were …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs an <code>AssociatedItems</code> map from a series of …\n<code>Some</code> if the associated item (an associated type) comes …\nIf this is an item in an impl of a trait then this is the …\nCast Kind. See RFC 401 (or …\nFloating-point types.\nFunction pointers.\nVarious types that are represented as ints and handled …\nTypes that are represented as ints.\nRaw pointers.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>Some</code> for integral/pointer casts. Casts like …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>mir::CastKind</code> from the given parameters.\nUpvar is captured by reference.\nUpvar is captured by value. This is always true when the …\nCaptures are represented using fields inside a structure. …\nPart of <code>MinCaptureInformationMap</code>; describes the capture …\nA composite describing a <code>Place</code> that is captured by a …\nData must be immutable and is aliasable.\nGiven the closure DefId this map provides a map of root …\nPart of <code>MinCaptureInformationMap</code>; List of <code>CapturePlace</code>s.\nData is mutable and not aliasable.\nPart of <code>MinCaptureInformationMap</code>; Maps a root variable to …\nData must be immutable but not aliasable. This kind of …\nInformation describing the capture of an upvar. This is …\nUpvars do not get their own <code>NodeId</code>. Instead, we use the …\nCapture mode that was selected\nExpr Id pointing to use that resulted in selecting the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn span pointing to use that resulted in selecting the …\nReturns the <code>LocalDefId</code> of the closure that captured this …\nReturn span pointing to use that resulted in selecting the …\nReturns the hir-id of the root variable for the captured …\n<code>CaptureKind</code> and expression(s) that resulted in such …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the <code>proj_possible_ancestor</code> represents an …\nRepresents if <code>place</code> can be mutated or not.\nExpr Id pointing to use that resulted the corresponding …\nThe <code>Place</code> that is captured.\nReturns a mutability <code>m</code> such that an <code>&amp;m T</code> pointer could be …\nReturns a symbol of the captured upvar, which looks like …\nName and span where the binding happens.\nTrait for decoding to a reference.\nThe shorthand encoding uses an enum’s variant index <code>usize</code>\nEncode the given value or a previously cached shorthand.\nBound const variable, used only when preparing a trait …\nA placeholder for a const which could not be computed; …\nUnevaluated non-const-item, used by …\nIn some cases, <code>hir::ConstArg</code>s that are being used in the …\nInfer the value of the const.\nDon’t feed the type.\nA const generic parameter.\nFeed the type.\nA placeholder const - universally quantified higher-ranked …\nAn unnormalized const item such as an anon const or assoc …\nUsed to hold computed value.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the evaluated constant\nPanics if the value cannot be evaluated or doesn’t …\nPanics if the value cannot be evaluated or doesn’t …\nReturns the evaluated constant as a valtree; if that fails …\nReturns the argument unchanged.\nReturns the argument unchanged.\nLiterals and const generic parameters are eagerly …\nCreates a constant with the given integer value and …\nCreates an interned bool constant.\nConvert a <code>hir::ConstArg</code> to a <code>ty::Const</code>.\nLower a const param to a <code>Const</code>.\nCreates an interned usize constant.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLike Ty::new_error_with_message but for constants.\nLike Ty::new_error but for constants.\nNormalizes the constant to a value or an error if possible.\nFIXME(RalfJung): I cannot explain what this does or why it …\nPanics if self.kind != ty::ConstKind::Value\nAttempts to evaluate the given constant to bits. Can fail …\nAttempts to evaluate the given constant to bits. Can fail …\nAttempts to convert to a <code>ValTree</code>\nIterator that walks <code>self</code> and any types reachable from <code>self</code>…\nCreates an interned zst constant.\nError returned when a conversion from ScalarInt to char …\nA type for representing any integer. Only used for …\nThe raw bytes of a simple value.\nMake sure the <code>data</code> fits in <code>size</code>. This is guaranteed by all …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe first <code>size</code> bytes of <code>data</code> are the value. Do not try to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe “untyped” variant of <code>ConstInt</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the value is a <code>usize</code> or <code>isize</code> type.\nWhether the value is of a signed integer type.\nExtracts the bits from the scalar without checking the …\nConverts the <code>ScalarInt</code> to i128. Panics if the size of the …\nConverts the <code>ScalarInt</code> to i16. Panics if the size of the …\nConverts the <code>ScalarInt</code> to i32. Panics if the size of the …\nConverts the <code>ScalarInt</code> to i64. Panics if the size of the …\nConverts the <code>ScalarInt</code> to i8. Panics if the size of the …\nConverts the <code>ScalarInt</code> to a signed integer of the given …\nConverts the <code>ScalarInt</code> to <code>u128</code>. Panics if the <code>size</code> of the …\nConverts the <code>ScalarInt</code> to <code>u16</code>. Panics if the size of the …\nConverts the <code>ScalarInt</code> to <code>u32</code>. Panics if the <code>size</code> of the …\nConverts the <code>ScalarInt</code> to <code>u64</code>. Panics if the <code>size</code> of the …\nConverts the <code>ScalarInt</code> to <code>u8</code>. Panics if the <code>size</code> of the …\nConverts the <code>ScalarInt</code> to an unsigned integer of the given …\nReturns the truncated result, and whether truncation …\nReturns the truncated result, and whether truncation …\nTry to convert this ScalarInt to the raw underlying bits. …\nConverts the <code>ScalarInt</code> to <code>bool</code>. Panics if the <code>size</code> of the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFIXME(RalfJung): I cannot explain what this does or why it …\nThe fields of any kind of aggregate. Structs, tuples and …\nintegers, <code>bool</code>, <code>char</code> are represented as scalars. See the …\nThis datastructure is used to represent the value of …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the values inside the ValTree as a slice of bytes. …\nThis is used to get a reference to a <code>GlobalCtxt</code> if one is …\nParameter attributes that can only be determined by …\nThe same as <code>TyCtxtFeed</code>, but does not contain a <code>TyCtxt</code>. Use …\nThis struct contains information regarding a free …\nSee TyCtxt for details about this type.\nA trait implemented for all <code>X&lt;&#39;a&gt;</code> types that can be safely …\nThe central data structure of the compiler. It stores …\nThis struct should only be created by <code>create_def</code>.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nA list of types where the ADT requires drop if and only if …\n[query description - consider adding a doc-comment!] …\nA list of types where the ADT requires drop if and only if …\n[query description - consider adding a doc-comment!] …\nReturns all diagnostic items defined in all crates.\nReturns <code>true</code> if <code>callback</code> returns true for every region …\nReturns an iterator containing all impls for <code>trait_def_id</code>.\nReturn all <code>impl</code> blocks in the current crate.\n[query description - consider adding a doc-comment!] alloc …\nStores memory for globals (statics/consts).\nAllocates a read-only byte or string literal for …\n[query description - consider adding a doc-comment!] …\nThe root query triggering all analysis passes like typeck …\nAnonymize all bound variables in <code>value</code>, this is mostly …\nReturns <code>true</code> if <code>callback</code> returns true for some region …\nThe arena that types, regions, etc. are allocated from.\nReturns a displayable description and article for the …\n[query description - consider adding a doc-comment!] …\nMaps from a trait/impl item to the trait/impl item “…\nMaps from a trait/impl item to the trait/impl item “…\nMaps from an impl/trait or struct/variant <code>DefId</code> to a list …\nCollects the associated items defined on a trait or impl.\n[query description - consider adding a doc-comment!] …\nGiven an impl trait in trait <code>opaque_ty_def_id</code>, create and …\nGiven <code>fn_def_id</code> of a trait or of an impl that implements a …\nReturns the types assumed to be well formed while “inside…\nWe need to store the assumed_wf_types for an RPITIT so …\nReturns async drop glue morphology for a definition. To …\nGiven a <code>DefId</code> of one of the <code>AsyncFn</code>, <code>AsyncFnMut</code> or …\n[query description - consider adding a doc-comment!] …\nReturns a transparent wrapper for <code>TyCtxt</code> which uses <code>span</code> …\n[query description - consider adding a doc-comment!] …\nExpects a body and returns its codegen attributes.\nReturn the set of types that should be taken into account …\nthe bound region corresponding to free region.\nCreate the MIR for a given <code>DefId</code> - this includes …\nCalculate the async destructor of a given type.\nCalculate the destructor of a given type.\nReturns <code>&amp;&#39;static core::panic::Location&lt;&#39;static&gt;</code>.\n[query description - consider adding a doc-comment!] …\nThis query checks the fulfillment of collected lint …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nChecks the attributes in the module.\nChecks the const bodies in the module for illegal …\n[query description - consider adding a doc-comment!] …\nChecks the loops in the module.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nChecks for uses of unstable APIs in the module.\nLike <code>check_stability</code>, except that we permit items to have …\n[query description - consider adding a doc-comment!] …\nChecks if an item is stable or error out.\nChecks if an item is stable or error out.\nUnsafety-check this <code>LocalDefId</code>.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nLint against <code>extern fn</code> declarations having incompatible …\nGiven the <code>DefId</code> and args a closure, creates the type of …\nReturns names of captured upvars for closures and …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nCaches <code>CoerceUnsized</code> kinds for impls on custom types.\n[query description - consider adding a doc-comment!] …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\n[query description - consider adding a doc-comment!] …\nReturns a set of all late-bound regions that are …\nReturns a set of all late-bound regions that appear in …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGetting a &amp;core::panic::Location referring to a span.\nEvaluate a constant to a <code>ConstValue</code>.\nEvaluate a constant to a type-level constant.\nEvaluates a constant without providing any generic …\nEvaluates a constant without providing any generic …\nResolves and evaluates a constant.\nGiven the def_id of a const-generic parameter, computes …\nReturns <code>true</code> if this is a const fn, use the <code>is_const_fn</code> to …\nReturns <code>true</code> if this is a const fn, use the <code>is_const_fn</code> to …\nCommon consts, pre-interned for your convenience.\nThe body of the coroutine, modified to take its upvars by …\n[query description - consider adding a doc-comment!] Given …\nReturn the set of types that should be taken into account …\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a …\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a …\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a …\nReturns <code>Some(coroutine_kind)</code> if the node pointed to by …\nReturns <code>Some(coroutine_kind)</code> if the node pointed to by …\nReturns layout of a coroutine. Layout might be unavailable …\nReturns the movability of the coroutine of <code>def_id</code>, or …\nChecks for the nearest <code>#[coverage(off)]</code> or <code>#[coverage(on)]</code> …\nSummarizes coverage IDs inserted by the <code>InstrumentCoverage</code> …\nGets the paths where the crate came from in the file …\n[query description - consider adding a doc-comment!] the …\n[query description - consider adding a doc-comment!] the …\n[query description - consider adding a doc-comment!] …\nGets the hash for the host proc macro. Used to support -Z …\nCollects all incoherent impls for the given crate and type.\nGets a complete map from all types to their inherent impls.\nChecks all types in the crate for overlap in their …\nChecks all types in the crate for overlap in their …\nFind the crate root and the appropriate span where <code>use</code> and …\nGets the name of the crate.\nGets the name of the crate.\nGets a map with the variance of every item; use …\n[query description - consider adding a doc-comment!] …\n<code>tcx</code>-dependent operations performed for every created …\nCreates a type context. To use the context call <code>fn enter</code> …\nOnly used in the resolver to register the <code>CRATE_DEF_ID</code> …\n[query description - consider adding a doc-comment!] …\nNote that this is <em>untracked</em> and should only be used within …\nData layout specification for the current target.\nWith <code>cfg(debug_assertions)</code>, assert that args are …\nReturns the debugger visualizers defined for this crate. …\n[query description - consider adding a doc-comment!] …\nQuery and get an English description for the item’s kind.\nGets an English article for the <code>TyCtxt::def_descr</code>.\n<code>LocalDefId</code> of the free region.\nGets the span for the identifier of the definition.\nGets the span for the identifier of the definition.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGet an English description for the item’s kind.\nGets an English article for the <code>TyCtxt::def_kind_descr</code>.\nConverts a <code>DefId</code> into its fully expanded <code>DefPath</code> (every …\nConverts a <code>DefPathHash</code> to its corresponding <code>DefId</code> in the …\nConverts a <code>DefPathHash</code> to its corresponding <code>DefId</code> in the …\nReturns a string identifying this <code>DefId</code>. This string is …\nGets the span for the definition.\nGets the span for the definition.\nReturns whether the impl or associated function has the …\nReturns whether the impl or associated function has the …\nReturns the lang items defined in another crate by loading …\nNote that this is <em>untracked</em> and should only be used within …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturns the set of types that are required to be alive in …\nDestructures array, ADT or tuple constants into the …\nPerforms an HIR-based well-formed check on the item with …\nReturns the diagnostic items defined in a crate.\n[query description - consider adding a doc-comment!] …\nWhether this is a trait implementation that has …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nDo not call this query directly: invoke …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nPerforms part of the privacy check and computes effective …\nEmit a lint from a lint struct (some type that implements …\nEmit a lint at <code>span</code> from a lint struct (some type that …\nReturns a transparent wrapper for <code>TyCtxt</code>, which ensures …\nReturns a transparent wrapper for <code>TyCtxt</code>, which ensures …\nInstalls <code>self</code> in a <code>TyCtxt</code> and <code>ImplicitCtxt</code> for the …\nIdentifies the entry-point (e.g., the <code>main</code> function) for a …\nReturns an equivalent value with all free regions removed …\nErases regions from <code>ty</code> to yield a new type. Normally you …\nEvaluates the default-impl stability of an item.\nEvaluates the stability of an item.\nEvaluates the stability of an item.\nEvaluate a static’s initializer, returning the …\nEvaluate a static’s initializer, returning the …\nEvaluates a constant and returns the computed allocation.\nEvaluates const items or anonymous constants (such as enum …\nEvaluate a constant and convert it to a type level …\nDo not call this query directly: invoke …\nCaches the results of trait evaluation. This cache is used …\nExpand any weak alias types contained within the given …\nReturns <code>ty::VariantDef</code> if <code>res</code> refers to a struct, or …\nThe predicates of the trait that are implied during …\nReturns the list of bounds that are required to be …\nReturns the list of bounds that are required to be …\nThe set of item bounds (see <code>TyCtxt::explicit_item_bounds</code>) …\nThe set of item bounds (see <code>TyCtxt::explicit_item_bounds</code>) …\nReturns the predicates written explicitly by the user.\nReturns the predicates written explicitly by the user.\nMaps from the <code>DefId</code> of a trait to the list of …\nThe Ident is the name of an associated type.The query …\n[query description - consider adding a doc-comment!] …\nThe list of symbols exported from the given crate.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGets the extra data to put in each output filename for a …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nIn order to break cycles involving <code>AnonConst</code>, we need to …\nCan only be fed before queries are run, and is thus exempt …\n[query description - consider adding a doc-comment!] …\nCompute a <code>FnAbi</code> suitable for indirect calls, i.e. to <code>fn</code> …\nCompute a <code>FnAbi</code> suitable for declaring/defining an <code>fn</code> …\n[query description - consider adding a doc-comment!] …\nComputes the signature of the function.\nGiven a <code>DefId</code> of one of the <code>Fn</code>, <code>FnMut</code> or <code>FnOnce</code> traits, …\nGiven a <code>ty::ClosureKind</code>, get the <code>DefId</code> of its …\nFolds the escaping and free regions in <code>value</code> using <code>f</code>.\nInvoke <code>callback</code> on every region appearing free in <code>value</code>.\n<code>trait_def_id</code> MUST BE the <code>DefId</code> of a trait.\nIterate over every impl that could possibly match the self …\nReturns a list of all <code>extern</code> blocks of a crate.\nPre-interned <code>Infer(ty::FreshFloatTy(n))</code> for small values …\nPre-interned <code>Infer(ty::FreshIntTy(n))</code> for small values of <code>n</code>…\nPre-interned <code>Infer(ty::FreshTy(n))</code> for small values of <code>n</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMaps from the <code>DefId</code> of an item (trait/struct/enum/fn) to …\nMaps from the <code>DefId</code> of an item (trait/struct/enum/fn) to …\n[query description - consider adding a doc-comment!] check …\nGets all attributes with the given name.\nGet an attribute from the diagnostic attribute namespace\nObtain the given diagnostic item’s <code>DefId</code>. Use …\nObtain the diagnostic item’s name\nReturns the lang items defined in another crate by loading …\nPanics in case the <code>AllocId</code> is dangling. Since that is …\nThe list of backend features computed from CLI flags (…\n[query description - consider adding a doc-comment!] …\nDetermines whether an item is annotated with an attribute.\nDetermines whether an item is annotated with a …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nWhether the item has a host effect param. This is …\n[query description - consider adding a doc-comment!] …\nQuery backing <code>Ty::has_significant_drop_raw</code>.\nDetermines whether identifiers in the assembly have strict …\nQuery backing <code>Ty::is_structural_eq_shallow</code>.\nGives access to the HIR attributes inside the HIR owner <code>key</code>…\nGives access to the HIR attributes inside the HIR owner <code>key</code>…\nRepresents crate as a whole (as distinct from the …\nAll items in the crate.\nThe items in a module.\nRetrieves the <code>hir::Node</code> corresponding to <code>id</code>.\nRetrieves the <code>hir::Node</code> corresponding to <code>id</code>.\nGives access to the HIR node’s parent for the HIR owner …\nHooks to be able to register functions in other crates …\nHygienically compares a use-site name (<code>use_name</code>) for a …\nMaps from associated items on a trait to the corresponding …\nIf the given <code>DefId</code> describes a method belonging to an …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGiven an <code>impl_id</code>, return the trait it implements along …\nGiven an <code>impl_id</code>, return the trait it implements. Return …\nGiven a crate and a trait, look up all impls of that trait …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturns <code>true</code> if the impls are the same polarity and the …\nImports all <code>SourceFile</code>s from the given crate into the …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nMaps from thee <code>DefId</code> of a type to its (inferred) outlives.\nReturns the inferred outlives predicates (e.g., for …\nReturns the inferred outlives predicates (e.g., for …\n[query description - consider adding a doc-comment!] …\nDo not call this query directly: invoke …\nMaps a <code>DefId</code> of a type to a list of its inherent impls. …\n[query description - consider adding a doc-comment!] …\nReturns the possibly-auto-generated MIR of a …\n[query description - consider adding a doc-comment!] …\nMonomorphizes a type from the AST by first applying the …\nReplaces all regions bound by the given <code>Binder</code> with the …\nReplaces any late-bound regions bound in <code>value</code> with <code>&#39;erased</code>…\nInterns a const. (Use <code>mk_*</code> functions instead, where …\nInterns a predicate. (Use <code>mk_predicate</code> instead, where …\nInterns a type. (Use <code>mk_*</code> functions instead, where …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the function is an intrinsic\nCheck if the given <code>DefId</code> is <code>#\\[automatically_derived\\]</code>.\nChecks if the bound region is in Impl Item.\nCheck if the given <code>DefId</code> is <code>#\\[automatically_derived\\]</code>, <em>and</em>\nReturns <code>true</code> if <code>def_id</code> refers to a closure, coroutine, or …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nWhether the <code>def_id</code> counts as const fn in the current …\nWhether the trait impl is marked const. This does not …\nReturns <code>true</code> if this <code>DefId</code> refers to the implicit …\nTrait selection queries. These are best used by invoking …\n[query description - consider adding a doc-comment!] …\nCheck whether the diagnostic item with the given <code>name</code> has …\nDetermines whether an item is annotated with <code>doc(hidden)</code>.\nDetermines whether an item is annotated with …\n[query description - consider adding a doc-comment!] …\nWhether the <code>def_id</code> is an associated type that was …\nReturns <code>true</code> if this def is a function-like thing that is …\nReturns <code>true</code> if <code>id</code> is a <code>DefId</code> of <code>Fn</code>, <code>FnMut</code> or <code>FnOnce</code> …\nReturns <code>true</code> if this is a foreign item (i.e., linked via …\nQuery backing <code>Ty::is_freeze</code>.\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a general …\nchecks if bound region is in Impl Item\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a mutable …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturns whether or not the crate with CrateNum ‘cnum’ …\n[query description - consider adding a doc-comment!] …\nReturns <code>true</code> if calls to the function may be promoted.\n[query description - consider adding a doc-comment!] …\nQuery backing <code>Ty::is_sized</code>.\nReturns <code>true</code> if the node pointed to by <code>def_id</code> is a <code>static</code> …\nReturns the <code>DefId</code> and the <code>BoundRegionKind</code> corresponding to …\nReturns <code>true</code> if this is a <code>static</code> item with the …\nReturns <code>true</code> if <code>def_id</code> refers to a trait (i.e., …\nReturns <code>true</code> if <code>def_id</code> refers to a trait alias (i.e., …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturns <code>true</code> if <code>def_id</code> refers to a definition that does …\nQuery backing <code>Ty::is_unpin</code>.\n[query description - consider adding a doc-comment!] …\nReturn <code>true</code> if the supplied <code>CrateNum</code> is “user-visible,”…\nReturns the attributes on the item at <code>def_id</code>.\nElaborated version of the predicates from …\nLook up the name of a definition across crates. This does …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nObtain all lang items of this crate and all dependencies …\n[query description - consider adding a doc-comment!] …\nComputes the layout of a type. Note that this implicitly …\nReturns a range of the start/end indices specified with the\n[query description - consider adding a doc-comment!] …\nReplaces any late-bound regions bound in <code>value</code> with free …\nCommon lifetimes, pre-interned for your convenience.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nFetch and return the user-visible lint level for the given …\nPerforms lint checking for the module.\n[query description - consider adding a doc-comment!] …\nReturn the live symbols in the crate for dead code check.\nReturns HIR ID for the given <code>LocalDefId</code>.\nReturns HIR ID for the given <code>LocalDefId</code>.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGiven the def-id of an early-bound lifetime on an opaque …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nBorrow-checks the function body. If this is a closure, …\nBuild the MIR for a given <code>DefId</code> and prepare it for const …\nBuild the MIR for a given <code>DefId</code> and prepare it for const …\nCheck whether the function has any recursion that could …\nMaps DefId’s that have an associated <code>mir::Body</code> to the …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nObtain all the calls into other local functions\nSet of all the <code>DefId</code>s in this crate that have MIR …\n[query description - consider adding a doc-comment!] …\nGenerates a MIR body for the shim.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nThis method copies <code>Place</code>’s projection, add an element …\n[query description - consider adding a doc-comment!] …\nNamed module children from all kinds of items, including …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nLook up all native libraries this crate depends on. These …\nGet the corresponding native library from the …\nQuery backing <code>Ty::needs_async_drop</code>.\nQuery backing <code>Ty::needs_drop</code>.\nReturns <code>true</code> if the item pointed to by <code>def_id</code> is a thread …\nCaches the results of goal evaluation in the new solver.\nEmit a lint at the appropriate level for a hir node.\nEmit a lint at the appropriate level for a hir node, with …\n<code>trait_def_id</code> MUST BE the <code>DefId</code> of a trait.\nDo not call this query directly: Invoke <code>normalize</code> instead.\nDo not call this query directly: Invoke <code>normalize</code> instead.\nDo not call this query directly: Invoke <code>normalize</code> instead.\nIf you have a <code>Binder&lt;&#39;tcx, T&gt;</code>, you can do this to strip …\nErase the regions in <code>value</code> and then fully normalize all the\nFor a given item’s generic parameter, gets the default …\nReturns the origin of the opaque type <code>def_id</code>.\n[query description - consider adding a doc-comment!] …\nGives access to the HIR nodes and bodies inside <code>key</code> if it…\nGives access to the HIR nodes and bodies inside <code>key</code> if it…\nLook up the name and span of a definition.\nLook up the name of a definition across crates. This does …\nIf the <code>def_id</code> is an associated type that was desugared …\nMIR after our optimization passes have run. This is MIR …\nChecks whether all impls in the crate pass the overlap …\nReturn the filenames where output artefacts shall be …\nReturn the filenames where output artefacts shall be …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGets the ParameterEnvironment for a given item; this …\nGets the ParameterEnvironment for a given item; this …\nLike <code>param_env</code>, but returns the <code>ParamEnv</code> in <code>Reveal::All</code> …\nSet of param indexes for type params that are in the type…\nReturns <code>HirId</code> of the parent HIR node of node with this …\nReturns parent HIR node of node with this <code>hir_id</code>. Returns …\nPeel off all [weak alias types] in this type until there …\n[query description - consider adding a doc-comment!] …\nMaps from the <code>DefId</code> of an item (trait/struct/enum/fn) to …\nMaps from the <code>DefId</code> of an item (trait/struct/enum/fn) to …\nFinds the <code>rustc_proc_macro_decls</code> item of a crate.\nThe <code>DefId</code> is the <code>DefId</code> of the containing MIR body. …\nErased region, used outside of type inference.\nPre-interned values of the form: …\n<code>ReStatic</code>\nPre-interned <code>ReVar(ty::RegionVar(n))</code> for small values of <code>n</code>.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nThe parameter is marked immutable in the function and …\nPer-body <code>region::ScopeTree</code>. The <code>DefId</code> should be the owner …\nCollects the list of all tools registered using …\nGets the rendered value of the specified constant or …\nGets the rendered precise capturing args for an opaque for …\nReplaces all types or regions bound by the given <code>Binder</code>. …\nReplaces all escaping bound vars. The <code>fld_r</code> closure …\nChecks whether a type is representable or infinitely sized\nAn implementation detail for the <code>representability</code> query\nReturns the <code>DefId</code> for a given <code>LangItem</code>. If not found, …\n[query description - consider adding a doc-comment!] …\nObtains a new allocation ID that can be referenced but …\nReserves a new ID <em>if</em> this allocation has not been …\nGenerates an <code>AllocId</code> for a function. Will get deduplicated.\nInterns the <code>Allocation</code> and return a new <code>AllocId</code>, even if …\nGenerates an <code>AllocId</code> for a memory allocation. If the exact …\nGenerates an <code>AllocId</code> for a static or return a cached one …\nGenerates an <code>AllocId</code> for a (symbolic, not-reified) vtable. …\n[query description - consider adding a doc-comment!] …\nDoes lifetime resolution on items. Importantly, we can’t …\nAttempt to resolve the given <code>DefId</code> to an <code>Instance</code>, for the …\n[query description - consider adding a doc-comment!] …\nGiven a <code>DefId</code> for an <code>fn</code>, return all the <code>dyn</code> and <code>impl</code> …\nGiven a <code>DefId</code> for an <code>fn</code>, return all the <code>dyn</code> and <code>impl</code> …\n[query description - consider adding a doc-comment!] …\nGiven a <code>fn</code> type, returns an equivalent <code>unsafe fn</code> type; …\nCaches the results of trait selection. This cache is used …\n[query description - consider adding a doc-comment!] …\nFreezes an <code>AllocId</code> created with <code>reserve</code> by pointing it at …\nFreezes an <code>AllocId</code> created with <code>reserve</code> by pointing it at …\n[query description - consider adding a doc-comment!] …\nReturns <code>true</code> if we should codegen an instance in the local …\n[query description - consider adding a doc-comment!] …\nGiven a closure signature, returns an equivalent fn …\nReturn the span for a definition. Contrary to <code>def_span</code> …\nNote that this is <em>untracked</em> and should only be used within …\nLooks up the span of <code>impl_did</code> if the impl is local; …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nThe <code>stable_crate_id</code> is constructed out of the crate name …\nMaps a StableCrateId to the corresponding CrateNum. This …\nGet the type of the pointer to the static that we use in …\nGet all item paths that were stripped by a <code>#[cfg]</code> in a …\nSame as applying <code>struct_tail</code> on <code>source</code> and <code>target</code>, but only\nSame as applying <code>struct_tail</code> on <code>source</code> and <code>target</code>, but only\nReturns the deeply last field of nested structures, or the …\nReturns the deeply last field of nested structures, or the …\nComputes the def-ids of the transitive supertraits of …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nThe <code>symbol_name</code> query provides the symbol name for calling …\nComputes the tag (if any) for a given type and variant.\nTry to build an abstract representation of the given …\nFetch the THIR for a given body. If typeck for that body …\nCreate a list-like THIR representation for debugging.\nCreate a THIR tree for debugging.\nReturns the type a reference to the thread local takes in …\n[query description - consider adding a doc-comment!] …\nReturns everything that looks like a predicate written …\nGiven the <code>DefId</code> of an impl, returns the <code>DefId</code> of the trait …\n[query description - consider adding a doc-comment!] …\nGiven a trait <code>trait_id</code>, return all known <code>impl</code> blocks.\nReturns <code>true</code> if this is a trait alias.\nReturns <code>true</code> if this is an <code>auto trait</code>.\nReturns <code>true</code> if this is coinductive, either because it is …\nGiven the def_id of a Trait <code>trait_def_id</code> and the name of …\nDummy type used for the <code>Self</code> of a <code>TraitRef</code> created for …\nIf the given <code>DefId</code> describes an item belonging to a trait, …\nA list of all traits in a crate, used by rustdoc and error …\nThis exists purely for testing the interactions between …\nCollects the “trimmed”, shortest accessible paths to …\nTries to destructure an <code>mir::Const</code> ADT or array into its …\nExpands the given impl trait type, stopping if the type is …\nReturns <code>None</code> in case the <code>AllocId</code> is dangling. An …\nMonomorphizes a type from the AST by first applying the …\nTries to erase the regions in <code>value</code> and then fully …\nDo not call this query directly: invoke …\nGiven a <code>ty</code>, return whether it’s an <code>impl Future&lt;...&gt;</code>.\nGets a <code>Ty</code> representing the <code>LangItem::OrderingEnum</code>\nPre-interned <code>Infer(ty::TyVar(n))</code> for small values of <code>n</code>.\n[query description - consider adding a doc-comment!] …\nCreates a hash of the type <code>Ty</code> which will be the same no …\nReturns the <code>Ty</code> of the given <code>DefId</code>. If the <code>DefId</code> points to …\nReturns the <code>Ty</code> of the given <code>DefId</code>. If the <code>DefId</code> points to …\nSpecialized instance of <code>type_of</code> that detects cycles that …\nDo not call this query directly: part of the <code>Eq</code> type-op\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>ProvePredicate</code>…\nTo avoid cycles within the predicates of a single item we …\n[query description - consider adding a doc-comment!] …\nGiven the <code>DefId</code>, returns the <code>DefId</code> of the innermost item …\nCommon types, pre-interned for your convenience.\n[query description - consider adding a doc-comment!] …\nGive out access to the untracked data without any sanity …\n[query description - consider adding a doc-comment!] …\nReturns the upstream crate that exports async-drop-glue for\nReturns the upstream crate that exports drop-glue for the …\nThe entire set of monomorphizations the local crate can …\nReturns the set of upstream monomorphizations available …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nChecks whether each generic argument is simply a unique …\nConverts a type level constant value into <code>ConstValue</code>\nThis stores a pointer to a <code>GlobalCtxt</code>. This is set to <code>Some</code> …\nMaps from the <code>DefId</code> of a type or region parameter to its …\nComputes the visibility of the provided <code>def_id</code>.\nComputes the visibility of the provided <code>def_id</code>.\nThe visible parent map is a map from every item to a …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nConstructs generic args for an item, optionally appending …\nThis is the implicit state of rustc. It contains the …\nWhere to store diagnostics for the current query job, if …\nSets <code>context</code> as the new current <code>ImplicitCtxt</code> for the …\nThe current query job, if any. This is updated by …\nUsed to prevent queries from calling too deeply.\nThe current dep graph task. This is used to add …\nThe current <code>TyCtxt</code>.\nAllows access to the <code>TyCtxt</code> in the current <code>ImplicitCtxt</code>. …\nAllows access to the current <code>ImplicitCtxt</code>. Panics if there …\nAllows access to the current <code>ImplicitCtxt</code> in a closure if …\nAllows access to the <code>TyCtxt</code> in the current <code>ImplicitCtxt</code>. …\nAllows access to the current <code>ImplicitCtxt</code> whose tcx field …\nA hashmap which only starts hashing after ignoring the …\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nSmall-storage-optimized implementation of a map.\nSmall-storage-optimized implementation of a set.\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nConverts to <code>Arc&lt;T&gt;</code>.\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nMakes a clone of the <code>Arc</code> pointer.\nComparison for two <code>Arc</code>s.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCreates an empty <code>[T]</code> inside an Arc\nCreates an empty CStr inside an Arc\nCreates an empty str inside an Arc\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nAttempts to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements in an iterator.\nDrops the <code>Arc</code>.\nGrows the stack on demand to prevent stack overflow. Call …\nGets the given key’s corresponding entry in the map for …\nEquality for two <code>Arc</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an atomically reference-counted string slice into …\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nReturns the argument unchanged.\nCreates an atomically reference-counted pointer from a …\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nMove a boxed object to a new, reference-counted allocation.\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nAllocates a reference-counted slice and fills it by …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGreater-than comparison for two <code>Arc</code>s.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nInserts a key-value pair into the map.\nAdds a value to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nLess-than comparison for two <code>Arc</code>s.\nMakes a mutable reference into the given <code>Arc</code>.\nInequality for two <code>Arc</code>s.\nCreates an empty <code>SsoHashMap</code>.\nCreates an empty <code>SsoHashSet</code>.\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the given allocator while …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nPartial comparison for two <code>Arc</code>s.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nGets the number of strong (<code>Arc</code>) pointers to this …\nRemoves and returns the value in the set, if any, that is …\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nIf we have the only reference to <code>T</code> then unwrap it. …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nGets the number of <code>Weak</code> pointers to this allocation.\nCreates an empty <code>SsoHashMap</code> with the specified capacity.\nCreates an empty <code>SsoHashSet</code> with the specified capacity.\nCollect al types that have an implicit <code>&#39;static</code> obligation …\nCollect al types that have an implicit <code>&#39;static</code> obligation …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this makes sense to suggest in a diagnostic.\nSuggest restricting a type param with a new bound.\nSuggest restricting a type param with a new bound.\nDescribes how to elaborate an obligation into a …\n“Elaboration” is the process of identifying all the …\nA filter around an iterator of predicates that makes it …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFilter to only the supertraits of trait predicates, i.e. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the def-ids of the transitive supertraits of …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiating a type variable with the given type would …\nSafe <code>#[target_feature]</code> functions are not assignable to …\nExplains the source of a type err in a short, human …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTreat parameters as placeholders in the given environment. …\nTreat parameters as infer vars. This is the correct mode …\nA trait object, all of whose components are markers (e.g., …\nGeneric parameters are pretty much just bound variables, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to simplify a type by only returning the outermost …\nindicates that <code>self</code> refers to something at binding level …\nindicates that <code>self</code> refers to something <em>inside</em> binding …\nAdds the flags/depth from a set of types that appear …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nsee <code>Ty::outer_exclusive_binder</code> for details\nReplaces the escaping bound vars (late bound regions or …\nA delegate used when instantiating bound vars.\nThis trait is implemented for every folding traversal. …\nA simple delegate taking 3 mutable functions. The used …\nFolds over the substructure of a type, visiting its …\nThis trait is implemented for every type that can be …\nThis trait is implemented for every infallible folding …\nThis cache only tracks the <code>DebruijnIndex</code> and assumes that …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nStores the index of a binder <em>just outside</em> the stuff we have\nAs with <code>RegionFolder</code>, represents the index of a binder …\nCallback invokes for each free region. The <code>DebruijnIndex</code> …\nA convenient alternative to <code>try_fold_with</code> for use with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA convenient alternative to <code>try_super_fold_with</code> for use …\nThe entry point for folding. To fold a value <code>t</code> with a …\nProvides a default fold for a recursive type of interest. …\nAn entity in the Rust type system, which can be one of …\nList of generic arguments that are gonna be used to …\nStores the user-given args to reach some fully qualified …\nSpecifies the user-given self type. In the case of a path …\nThe args for the item as given by the user.\nInterpret these generic args as the args of a closure type.\nInterpret these generic args as the args of a coroutine …\nInterpret these generic args as the args of a …\nInterpret these generic args as the args of an inline …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nUnpack the <code>GenericArg</code> as a const when it is known …\nUnpack the <code>GenericArg</code> as a region when it is known …\nUnpack the <code>GenericArg</code> as a type when it is known certainly …\nCreates an <code>GenericArgs</code> for generic parameter definitions, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>GenericArgs</code> that maps each generic parameter to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts generic args to a type list.\nReturns generic arguments that are not lifetimes or host …\nTransform from generic args for a child of <code>source_ancestor</code> …\nThe self type, in the case of a <code>&lt;T&gt;::Item</code> path (when …\nIterator that walks <code>self</code> and any types reachable from <code>self</code>…\nBounds on generics.\nInformation about the formal type/lifetime parameters …\nReturns true if a concrete type is specified after a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the <code>GenericParamDef</code> associated with this <code>ParamConst</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if <code>params</code> has <code>impl Trait</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the args corresponding to the generic parameters …\nReturns the args corresponding to the generic parameters …\nReturns the <code>GenericParamDef</code> with the given index.\nLooks through the generics and all parents to find the …\nReverse map to the <code>index</code> field of each <code>GenericParamDef</code>.\n<code>pure_wrt_drop</code>, set by the (unsafe) <code>#[may_dangle]</code> attribute …\nReturns the <code>GenericParamDef</code> associated with this …\nReturns the <code>GenericParamDef</code> associated with this <code>ParamTy</code>.\nReturns an <code>InhabitedPredicate</code> that is generic over type …\nN.B. this query should only be called through …\nA AND B\nUninhabited when a const value is non-zero. This occurs …\nUninhabited\nInhabited if some generic type is inhabited. These are …\nRepresents whether some type is inhabited in a given …\nUninhabited if within a certain module. This occurs when …\nInhabited if either we don’t know the hidden type or we …\nA OR B\nInhabited\nReturns true if the corresponding type is inhabited in the …\nSame as <code>apply</code>, but returns <code>None</code> if self contains a module …\nSame as <code>apply</code>, but <code>NotInModule(_)</code> predicates yield <code>false</code>. …\nReturns true if the corresponding type is inhabited in the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReplaces generic types with its corresponding predicate\nCalls <code>U::from(self)</code>.\nCommon capabilities of placeholder kinds\nPerforms a instantiation suitable for going from a …\nReturns <code>true</code> when the outermost type cannot be further …\nWhether this ABI is <code>extern &quot;Rust&quot;</code>.\nReturns the type of the struct tail.\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\nThe <code>ReifyShim</code> was created to produce a function pointer. …\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\nAn <code>InstanceKind</code> along with the args that are needed to …\nAn intrinsic <code>fn</code> item (with <code>&quot;rust-intrinsic&quot;</code> or …\nA user-defined callable item.\nDescribes why a <code>ReifyShim</code> was created. This is needed to …\n<code>fn()</code> pointer where the function itself cannot be turned …\nCompiler-generated accessor for thread locals which …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nThis <code>ReifyShim</code> was created to populate a vtable. …\nDepending on the kind of <code>InstanceKind</code>, the MIR body …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the <code>DefId</code> of instances which might not require …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if the machine code for this instance is …\nReturns <code>true</code> when the MIR body associated with this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>Instance</code> where generic parameters in …\nReturns <code>true</code> if the LLVM version of this instance is …\nResolves a <code>(def_id, args)</code> pair to an (optional) instance …\nReturns the <code>Ty</code> corresponding to this <code>Instance</code>, with …\nFinds a crate that contains a monomorphization of this …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether the intrinsic has no meaningful body and all …\nLang items used by the new trait solver. This can be …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError produced by attempting to adjust a <code>FnAbi</code>, for a “…\nError produced by attempting to compute or adjust a <code>FnAbi</code>.\nBlanket extension trait for contexts that can compute <code>FnAbi</code>…\nTrait for contexts that want to be able to compute <code>FnAbi</code>s. …\nThe <code>&amp;FnAbi</code>-wrapping type (or <code>&amp;FnAbi</code> itself), which will be …\nThis is a generic const expression (i.e. N * 2), which may …\nAny statically computable Layout. Alignment can be <code>None</code> if …\nError produced by a <code>layout_of</code> call, while computing <code>FnAbi</code> …\nBlanket extension trait for contexts that can compute …\nTrait for contexts that want to be able to compute layouts …\nThe <code>TyAndLayout</code>-wrapping type (or <code>TyAndLayout</code> itself), …\nThe maximum supported number of lanes in a SIMD vector.\nA potentially-wide pointer.\nType size “skeleton”, i.e., the only information …\nTrue uninitialized memory.\nThe return value of mem::uninitialized, 0x01 (unless …\nUsed in <code>check_validity_requirement</code> to indicate the kind of …\nThe first half of a wide pointer.\nThe second half of a wide pointer.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompute a <code>FnAbi</code> suitable for indirect calls, i.e. to <code>fn</code> …\nCompute a <code>FnAbi</code> suitable for declaring/defining an <code>fn</code> …\nCalculates whether a function’s ABI can unwind or not.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper used for <code>fn_abi_of_*</code>, to adapt <code>tcx.fn_abi_of_*(...)</code> …\nHelper used for <code>layout_of</code>, to adapt <code>tcx.layout_of(...)</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the layout of a type. Note that this implicitly …\n<code>Span</code> to use for <code>tcx.at(span)</code>, from <code>layout_of</code>.\nFinds the appropriate Integer type and signedness for the …\nComputes the layout of a type, at <code>span</code>. Note that this …\nReturn an <em>integer</em> type matching this primitive. Useful in …\nIf true, this pointer is never null.\nThe type which determines the unsized metadata, if any, of …\nA trait implemented for all <code>X&lt;&#39;a&gt;</code> types that can be safely …\n<code>List&lt;T&gt;</code> is a bit like <code>&amp;[T]</code>, but with some critical …\nA <code>RawList</code> without the unsized tail. This type is used for …\nA <code>List</code> that additionally stores type information inline to …\nA dummy type used to force <code>List</code> to be unsized while not …\nA generic type that can be used to prepend a <code>List</code> with …\nThe additional info that is stored in …\nInterpret these generic args as the args of a closure type.\nInterpret these generic args as the args of a coroutine …\nInterpret these generic args as the args of a …\nInterpret these generic args as the args of an inline …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAlthough this claims to be a zero-length array, in …\nReturns a reference to the (per header unique, static) …\nReturns a reference to the (per header unique, static) …\nCreates an <code>GenericArgs</code> for generic parameter definitions, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllocates a list from <code>arena</code> and copies the contents of …\nCreates an <code>GenericArgs</code> that maps each generic parameter to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts generic args to a type list.\nReturns generic arguments that are not lifetimes or host …\nReturns the “principal <code>DefId</code>” of this set of …\nReturns the “principal <code>DefId</code>” of this set of …\nTransform from generic args for a child of <code>source_ancestor</code> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts generic params of a TypeFoldable from one item’…\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nsee call sites to fold_kind_no_missing_regions_error for …\nReturns the argument unchanged.\nWe do not want to emit any errors in typeck because the …\nCalls <code>U::from(self)</code>.\nSpan of function being checked.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCollect Components for <em>all</em> the args of <code>parent</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPush onto <code>out</code> all the things that must outlive <code>&#39;a</code> for the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSeparate from <code>ClauseKind::Projection</code> which is used for …\nA marker predicate that is always ambiguous. Used for …\nE.g., <code>Send</code>.\nA subset of predicates which can be assumed by the trait …\nProve a clause\n<code>T1</code> coerced to <code>T2</code>\nEnsures that a const generic argument to a parameter …\nConstants must be equal. The first component is the const …\nConstant initializer must evaluate successfully.\nTrait must be dyn-compatible.\nThis should only be used inside of the new solver for …\nA statement that can be proven by a trait solver. This …\nE.g., <code>Iterator::Item = T</code>.\n<code>where &lt;T as TraitRef&gt;::Name == X</code>, approximately. See the …\n<code>where &#39;a: &#39;r</code>\n<code>T1 &lt;: T2</code>\nE.g., <code>Iterator</code>.\nCorresponds to <code>where Foo: Bar&lt;A, B, C&gt;</code>. <code>Foo</code> here would be …\n<code>where T: &#39;r</code>\nNo syntax: <code>T</code> well-formed.\nWhether this projection can be soundly normalized.\nThe parameters of the associated or opaque item.\nMatches a <code>PredicateKind::Clause</code> and turns it into a <code>Clause</code>…\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nAssert that the predicate is a clause.\nFlips the polarity of a Predicate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPerforms a instantiation suitable for going from a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the inner <code>ty::Binder&lt;&#39;tcx, PredicateKind&lt;&#39;tcx&gt;&gt;</code>.\nIf polarity is Positive: we are proving that the trait is …\nCompares via an ordering that will not change if modules …\nCompares via an ordering that will not change if modules …\nTrait for printers that pretty-print using <code>fmt::Write</code> to …\nInterface for outputting user-facing “type-system …\nThe “region highlights” are used to control region …\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nAs a heuristic, when we see an impl, if we see that the ‘…\nPrints <code>&lt;...&gt;</code> around what <code>f</code> prints.\nIf enabled, when printing a “free region” that …\nIf enabled, when we see the selected region, use “<code>&#39;N</code>” …\nReturns <code>true</code> if the region should be printed in optional …\nFormat instance name that is already known to be too long …\nThe purpose of this function is to collect public symbols …\nAdds the <code>crate::</code> prefix to paths where appropriate.\nForce us to name impls with just the filename/line number. …\nAvoids running any queries during prints.\nPrevent path trimming if it is turned on. Path trimming …\nPrevent selection of visible paths. <code>Display</code> impl of DefId …\nAvoids running select queries during any prints that occur …\nTrait for printers that pretty-print using <code>fmt::Write</code> to …\nFolds through bound vars and placeholders, naming them\nThe “region highlights” are used to control region …\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nWrapper type for <code>ty::TraitRef</code> which opts-in to pretty …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPrints comma-separated elements.\nPrints comma-separated elements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrints <code>&lt;...&gt;</code> around what <code>f</code> prints.\nIf enabled, when printing a “free region” that …\nIf enabled, when we see the selected region, use “<code>&#39;N</code>” …\nHighlight the given bound region. We can only highlight …\nHighlights the region inference variable <code>vid</code> as <code>&#39;N</code>.\nConvenience wrapper for <code>highlighting_region</code>.\nInsert the trait ref and optionally a projection type …\nInsert the trait ref and optionally a projection type …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>region</code> and <code>number</code> are both <code>Some</code>, invokes …\nPrints <code>(...)</code> around what <code>f</code> prints if <code>parenthesized</code> is …\nPrints <code>(...)</code> around what <code>f</code> prints if <code>parenthesized</code> is …\nPrints <code>(...)</code> around what <code>f</code> prints.\nPrints <code>(...)</code> around what <code>f</code> prints.\nThis is overridden for MIR printing because we only want …\nThis is overridden for MIR printing because we only want …\nLike <code>print_def_path</code> but for value paths.\nLike <code>print_def_path</code> but for value paths.\nReturns <code>Some(n)</code> with the number to use for the given …\nReturns <code>true</code> if the region should be printed in optional …\nThe purpose of this function is to collect public symbols …\nTry to see if this path can be trimmed to a unique symbol …\nTry to see if this path can be trimmed to a unique symbol …\nIf possible, this returns a global path resolving to <code>def_id</code>…\nIf possible, this returns a global path resolving to <code>def_id</code>…\nDoes the work of <code>try_print_visible_def_path</code>, building the …\nDoes the work of <code>try_print_visible_def_path</code>, building the …\nPrints <code>{f: t}</code> or <code>{f as t}</code> depending on the <code>cast</code> argument\nPrints <code>{f: t}</code> or <code>{f as t}</code> depending on the <code>cast</code> argument\nAdds the <code>crate::</code> prefix to paths where appropriate.\nForce us to name impls with just the filename/line number. …\nAvoids running any queries during prints.\nPrevent path trimming if it is turned on. Path trimming …\nPrevent selection of visible paths. <code>Display</code> impl of DefId …\nAvoids running select queries during any prints that occur …\nAn anonymous region parameter for a given fn (&amp;T)\nAnonymous region for the implicit env pointer parameter to …\nNamed region parameters for functions (a in &amp;’a T)\nThe parameter representation of late-bound function …\nA higher-ranked region. These represent either late-bound …\nA region parameter; for example <code>&#39;a</code> in …\nErased region, used by trait selection, in MIR and during …\nA region that resulted from some other error. Used …\nLate-bound function parameters are represented using a …\nA placeholder region – the higher-ranked version of …\nStatic data that has an “infinite” lifetime. Top in …\nA region variable. Should not exist outside of type …\nUse this rather than <code>RegionKind</code>, whenever possible.\nA <strong>region</strong> <strong>v</strong>ariable <strong>ID</strong>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIs this region named by the user?\nDoes this early bound region have a name? Early bound …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue for free region in the current context.\nTrue for free regions other than <code>&#39;static</code>.\nConstructs a <code>RegionKind::ReError</code> region.\nConstructs a <code>RegionKind::ReError</code> region and registers a …\nConstructs a <code>RegionKind::ReError</code> region and registers a …\nAvoid this in favour of more specific <code>new_*</code> methods, where …\nGiven some item <code>binding_item</code>, check if this region is a …\nContains the error value\nWe switched our variance because a generic argument occurs …\nNo additional information - this is the default. We will …\nContains the success value\nWhether aliases should be related structurally or not. Used\nExtra information about why we ended up with a particular …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneric relation routine suitable for most anything.\nRelate the two args for the given item. The default is to …\nSwitch variance for the purpose of relating <code>a</code> and <code>b</code>.\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\nRegister <code>AliasRelate</code> obligation(s) that both types must be …\nRegister obligations that must hold in order for this …\nRegister predicates that must hold in order for this …\nWhether aliases should be related structurally. This is …\nContains the error value\nWe switched our variance because a generic argument occurs …\nNo additional information - this is the default. We will …\nContains the success value\nEnforce that <code>a</code> is equal to or a subtype of <code>b</code>.\nWhether aliases should be related structurally or not. Used\nExtra information about why we ended up with a particular …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneric relation routine suitable for most anything.\nRelate the two args for the given item. The default is to …\nSwitch variance for the purpose of relating <code>a</code> and <code>b</code>.\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\n<code>RvalueScopes</code> is a mapping from sub-expressions to <em>extended</em> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake an association between a sub-expression and an …\nReturns the scope when the temp created by <code>expr_id</code> will be …\nThe search graph does not simply use <code>Interner</code> directly to …\nWhether to use the provisional cache. Set to <code>false</code> by a …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nIn the initial iteration of a cycle, we do not yet have a …\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe number of goals currently in the search graph. This …\nReturning <code>Some</code> disables the global cache for the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProbably the most involved method of the whole solver.\nIf the self type is an alias type, e.g. an opaque type or …\nAt codegen time, all monomorphic projections will succeed. …\nWe failed due to ambiguity. This ambiguity can either be a …\nA builtin impl generated by the compiler. When adding a …\nPossible ways the given goal can be proven.\nTrait solving during coherence. There are a few notable …\nA candidate that is registered only during coherence to …\nContains the error value\nAdditional constraints returned on success.\nA goal is a statement, i.e. <code>predicate</code>, we want to prove …\nWhy a specific goal has to be proven.\nA user written impl.\nWe’re proving a where-bound of an impl.\nInstantiating a higher-ranked goal and re-proving it.\nWhy we failed to evaluate a goal.\nSome built-in impl we don’t need to differentiate. This …\nOrdinary trait solving, using everywhere except for …\nA built-in impl for trait objects. The index is only used …\nContains the success value\nWe gave up due to an overflow, most often by hitting the …\nAn assumption from the environment.\nOpaques that are defined in the inference context before a …\nThe result of evaluating a canonical query.\nDepending on the stage of compilation, we want projection …\nA built-in implementation of <code>Upcast</code> for trait objects to …\nUnsizing a tuple like <code>(A, B, ..., X)</code> to <code>(A, B, ..., Y)</code> if <code>X</code>…\nAt type-checking time, we refuse to project any associated …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAdditional constraints returned by this query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nData structure used to inspect trait solver behavior.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse this function to merge the certainty of multiple …\nUpdates the goal to one with a different <code>predicate</code> but the …\nWe added a goal to the <code>EvalCtxt</code> which will get proven the …\nWhen evaluating a goal we also store the original values …\nA call to …\nA call to <code>probe</code> while proving the current goal. This is …\nProbe entered when normalizing the self ty during …\nTry to unify an opaque type with an existing key in the …\nA self-contained computation during trait solving. This …\nWhat kind of probe we’re in. In case the probe …\nA trait goal was satisfied by an impl candidate.\nThe root inference context while proving a goal.\nLooking for param-env candidates that satisfy the trait …\nSome <code>data</code> together with information about how they relate …\nA candidate for proving a trait or alias-relate goal.\nTrying to normalize an alias by at least one step in …\nUsed in the probe that wraps normalizing the non-self type …\nDuring upcasting from some source object to target object …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe actual evaluation of the goal, always <code>ProbeKind::Root</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat happened inside of this probe in chronological order.\nAlgebraic data types (ADT). For example: structures, …\nA projection, opaque type, weak type alias, or inherent …\nAn array with the given length. Written as <code>[T; N]</code>.\nThe primitive boolean type. Written as <code>bool</code>.\nBound type variable, used to represent the <code>&#39;a</code> in …\nThe primitive character type; holds a Unicode scalar value …\nThe anonymous type of a closure. Used to represent the …\nThe anonymous type of a coroutine. Used to represent the …\nThe anonymous type of a closure. Used to represent the …\nA type representing the types stored inside a coroutine. …\nA trait object. Written as …\nA placeholder for a type which could not be computed; this …\nA primitive floating-point type. For example, <code>f64</code>.\nThe anonymous type of a function declaration/definition. …\nA pointer to a function. Written as <code>fn() -&gt; i32</code>.\nAn unsized FFI type that is opaque to Rust. Written as …\nA type variable used during type checking.\nAn inline const is modeled like\nStruct returned by <code>split()</code>.\nA primitive signed integer type. For example, <code>i32</code>.\nThe never type <code>!</code>.\nCoroutine has been poisoned.\nA type parameter; for example, <code>T</code> in <code>fn f&lt;T&gt;(x: T) {}</code>.\nA pattern newtype. Takes any type and restricts its valid …\nA placeholder type, used during higher ranked subtyping to …\nNumber of variants to reserve in coroutine state. …\nCoroutine has returned or is completed.\nA raw pointer. Written as <code>*mut T</code> or <code>*const T</code>\nA reference; a pointer with an associated lifetime. …\nThe pointee of an array slice. Written as <code>[T]</code>.\nThe pointee of a string slice. Written as <code>str</code>.\nA tuple type. For example, <code>(i32, bool)</code>.\nCoroutine has not been resumed yet.\nA primitive unsigned integer type. For example, <code>u32</code>.\nThe parameters of the associated or opaque type.\nGeneric parameters from the enclosing item, concatenated …\nGet the article (“a” or “an”) to use with this …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nThe type of the state discriminant used in the coroutine …\nThe discriminant for the given variant. Panics if the …\nThe set of all discriminants for the coroutine, enumerated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct <code>InlineConstArgs</code> from <code>InlineConstArgsParts</code>.\nReturns the generic parameters of the inline const’s …\nThis is the types of the fields of a coroutine which are …\nDivides the inline const args into their respective …\nThis returns the types of the MIR locals which had to be …\nReturns the type of this inline const.\nReturns an iterator over the list of types of captured …\nCalls <code>f</code> with a reference to the name of the enumerator for …\nThe valid variant indices of this coroutine.\nThis is the implicit state of rustc. It contains the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nWhere to store diagnostics for the current query job, if …\nSets <code>context</code> as the new current <code>ImplicitCtxt</code> for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe current query job, if any. This is updated by …\nUsed to prevent queries from calling too deeply.\nThe current dep graph task. This is used to add …\nThe current <code>TyCtxt</code>.\nAllows access to the <code>TyCtxt</code> in the current <code>ImplicitCtxt</code>. …\nAllows access to the current <code>ImplicitCtxt</code>. Panics if there …\nAllows access to the current <code>ImplicitCtxt</code> in a closure if …\nAllows access to the <code>TyCtxt</code> in the current <code>ImplicitCtxt</code>. …\nAllows access to the current <code>ImplicitCtxt</code> whose tcx field …\nSpecializing on this trait is allowed because all of the …\nSpecializing on this trait is allowed because it doesn’t …\nThe default. Specializing on this trait is not allowed.\nA trait’s definition with type information.\nWhether this trait is treated specially by the standard …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nWhether this trait has been annotated with <code>#[const_trait]</code>.\nWhether a trait is fully built-in, and any implementation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to add a builtin <code>dyn Trait: Trait</code> implementation. …\nQuery provider for <code>incoherent_impls</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>true</code>, then this trait has the <code>#[rustc_coinductive]</code> …\nIf <code>true</code>, then this trait has the <code>#[fundamental]</code> attribute. …\nIf <code>true</code>, then this trait has the <code>#[marker]</code> attribute, …\nList of functions from <code>#[rustc_must_implement_one_of]</code> …\nImpls indexed by their simplified self type, for fast …\nIf <code>true</code>, then this trait had the <code>#[rustc_paren_sugar]</code> …\nIf <code>true</code>, then this trait has the …\nIf <code>true</code>, then this trait has the …\nUsed to determine whether the standard library is allowed …\nQuery provider for <code>trait_impls_of</code>.\nCanonical user type annotation.\nMapping of type annotation indices to canonical user type …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nThe canonical type is the result of <code>type_of(def_id)</code> with …\nA user-given type annotation attached to a constant. These …\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nTracks the fake reads required for a closure and the …\nRecords the reasons that we picked the kind of each …\nTracks the minimum captures required for a closure; see …\nFor a given closure, returns the iterator of …\nContains the data for evaluating the effect of feature …\nFor every coercion cast we add the HIR node ID of the cast …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAll the opaque types that have hidden types set by this …\nStores the predicates that apply on coroutine witness …\nReturns the type of an expression as a monotype.\nReturns the type of <code>expr</code>, considering any <code>Adjustment</code> entry …\nResolved field indices for field accesses in expressions (…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nFor each FRU expression, record the normalized types of …\nThe <code>HirId::owner</code> all <code>ItemLocalId</code>s in this table are …\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this represents the generic parameters of …\nFor each fn, records the “liberated” types of its …\nResolved types and indices for the nested fields’ …\nStores the type parameters which were instantiated to …\nStores the types for various nodes in the AST. Note that …\nContainer types and field indices of <code>offset_of!</code> expressions\nStores the types which were implicitly dereferenced in …\nStores the actual binding mode for all instances of …\nDoes the pattern recursively contain a <code>ref mut</code> binding in …\nReturns the type of a pattern as a monotype. Like <code>expr_ty</code>, …\nReturns the final resolution of a <code>QPath</code> in an <code>Expr</code> or <code>Pat</code> …\nTop-level patterns whose match ergonomics need to be …\nTracks the rvalue scoping rules which defines finer …\nSet of reference patterns that match against a …\nIf any errors occurred while type-checking this body, this …\nWe sometimes treat byte string literals (which are of type …\nResolved definitions for <code>&lt;T&gt;::X</code> associated paths and …\nSet of trait imports actually used in the method …\nStores the canonicalized types provided by the user. See …\nThis will either store the canonicalized types provided by …\nValidate that the given HirId (respectively its <code>local_id</code> …\nIndicates the form of <code>AsyncDestruct::Destructor</code>. Used to …\nUsed as an input to <code>TyCtxt::uses_unique_generic_params</code>.\nAsync destructor has custom logic\nAsync destructor simply runs <code>drop_in_place</code>\nCheck region parameters from a function definition. Allows …\nAsync destructor simply does nothing\nOnly permit parameter regions. This should be used for …\nWhether or not to check for recursive opaque types. This …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCategorizes an explicit self declaration like …\nDoes the equivalent of\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether an item is an intrinsic (which may be …\nDetermines whether an item is directly annotated with …\nDetermines whether an item is annotated with …\nReturns a list of types such that the given type needs …\nReturns a list of types such that the given type needs …\nReveals all opaque types in the given value, replacing them\nBit representation of the discriminant (e.g., <code>-128i8</code> is …\nAdds <code>1</code> to the value and wraps around if the maximum for …\nCollects all the late-bound regions at the innermost …\nFinds the max universe present\nThis trait is implemented for every type that can be …\nThis trait is implemented for every visiting traversal. …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrue if there are any late-bound regions\nTrue if there are any bound variables\nTrue if there are any un-erased free regions.\nReturn <code>true</code> if this type has regions that are not a part …\n“Free” regions in this context means that it has any …\nTrue if there are any late-bound non-region variables\nReturns <code>true</code> if this type has any regions that escape …\nReturns <code>true</code> if <code>self</code> has any late-bound regions that are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether this value references only ‘global’ …\n<code>true</code> if we only want regions that are known to be “…\nIndicates whether this value still has …\nProvides a default visit for a recursive type of interest. …\nThe entry point for visiting. To visit a value <code>t</code> with a …\nlayout align of this type (used in vtable header)\ndestructor of this type (used in vtable header)\nlayout size of this type (used in vtable header)\ndispatchable associated function\npointer to a separate supertrait vtable, can be used by …\nnon-dispatchable associated function that is excluded from …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRetrieves an allocation that represents the contents of a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWe push <code>GenericArg</code>s on the stack in reverse order so as to …\nSkips the subtree corresponding to the last type returned …\nCommon logic for borrowck use-after-move errors when moved …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA query to trigger a delayed bug. Clearly, if one has a <code>tcx</code>…\n<code>.await</code> calls <code>IntoFuture::into_future</code>\nA call to <code>Fn(..)::call(..)</code>, desugared from …\nfor _ in x {} calls x.into_iter()\nA normal method call of the form <code>receiver.foo(a, b, c)</code>\nA call to an operator trait, desugared from operator …\nx? calls x.branch()\nx? calls type_of(x)::from_residual()\ntry { ..; x } calls type_of(x)::from_output(x)\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>Span</code> of the <code>Target</code> associated type in the <code>Deref</code> impl …\nThe type <code>T::Deref</code> we are dereferencing to\nChecks if the specified <code>local</code> is used as the <code>self</code> …")