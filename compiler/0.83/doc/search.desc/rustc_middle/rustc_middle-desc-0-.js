searchState.loadedDescShard("rustc_middle", 0, "The “main crate” of the Rust compiler. This crate …\nRaw content of Fluent resource for this crate, generated …\nUsed for types that are <code>Copy</code> and which <strong>do not care about </strong>…\nThis higher-order macro declares a list of types which can …\nA macro for triggering an ICE. Calling <code>bug</code> instead of …\nHIR datatypes. See the rustc dev guide for more info.\n“Hooks” provide a way for <code>tcx</code> functionality to be …\nMIR datatypes and passes. See the rustc dev guide for more …\nDefines the various compiler queries.\nA macro for triggering an ICE with a span. Calling …\nTHIR datatypes and definitions. See the rustc dev guide …\nTrait Resolution. See the rustc dev guide for more …\nDefines how the compiler represents types internally.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNew dependencies can be added to the <code>TaskDeps</code>. This is …\nThis is the highest value a <code>DepKind</code> can have. It’s used …\nWe use this for most things when incr. comp. is turned off.\nWe use this to create a forever-red node.\nThis serves as an index into arrays built by …\nA dep-node filter goes from a user-defined string to a …\nA filter like <code>F -&gt; G</code> where <code>F</code> and <code>G</code> are valid dep-node …\nThis is used when executing an <code>eval_always</code> query. We don’…\nAny attempt to add new dependencies will cause a panic. …\nNew dependencies are ignored. This is also used for …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nData for use when recompiling the <strong>current crate</strong>.\nA “work product” is an intermediate result that we …\nA “work product” corresponds to a <code>.o</code> (or other) file …\nZero value of the index.\nZero value of the index.\nReturns <code>true</code> if all nodes always pass the filter.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAccess the DepGraph.\nNodes in the dependency graph.\nExtracts the DefId corresponding to this DepNode. This …\nExtracts the DefId corresponding to this DepNode. This …\nWhether the query key can be recovered from the hashed …\nThe red/green evaluation system will try to mark a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a DepNode from the given DepKind and …\nUsed in testing\nUsed in testing\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nUsed in testing\nUsed in testing\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAnonymous queries cannot be replayed from one compiler …\nReturn whether this kind always require evaluation.\nEval-always queries do not track their dependencies, and …\nContains variant =&gt; str representations for constructing …\nThe name of this dep kind.\nCreates a new, parameterless DepNode. This method will …\nAccess the profiler.\nAccess dependencies from current implicit context.\nSaved files associated with this CGU. In each key/value …\nAccess the compiler session.\nTests whether <code>node</code> meets the filter, returning true if so.\nAll nodes that can reach <code>node</code>.\nTry to force a dep node to execute and see if it’s green.\nLoad data from the on-disk cache.\nInvoke a query to put the on-disk cached value in memory.\nExecute the operation with provided dependencies.\nCreate a hashing context for hashing new results.\nThis serves as an index into arrays built by …\nThis enum serves as an index into arrays built by …\nWe use this for most things when incr. comp. is turned off.\nWe use this to create a forever-red node.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nA list of types where the ADT requires drop if and only if …\n[query description - consider adding a doc-comment!] …\nA list of types where the ADT requires drop if and only if …\n[query description - consider adding a doc-comment!] …\nReturns all diagnostic items defined in all crates.\nReturn all <code>impl</code> blocks in the current crate.\n[query description - consider adding a doc-comment!] alloc …\n[query description - consider adding a doc-comment!] …\nThe root query triggering all analysis passes like typeck …\n[query description - consider adding a doc-comment!] …\nMaps from a trait/impl item to the trait/impl item “…\nMaps from an impl/trait or struct/variant <code>DefId</code> to a list …\nCollects the associated items defined on a trait or impl.\n[query description - consider adding a doc-comment!] …\nGiven an impl trait in trait <code>opaque_ty_def_id</code>, create and …\nGiven <code>fn_def_id</code> of a trait or of an impl that implements a …\nReturns the types assumed to be well formed while “inside…\nWe need to store the assumed_wf_types for an RPITIT so …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nThis query checks the fulfillment of collected lint …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nChecks the attributes in the module.\nChecks the const bodies in the module for illegal …\n[query description - consider adding a doc-comment!] …\nChecks the loops in the module.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nChecks for uses of unstable APIs in the module.\n[query description - consider adding a doc-comment!] …\nUnsafety-check this <code>LocalDefId</code>.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nLint against <code>extern fn</code> declarations having incompatible …\nReturns names of captured upvars for closures and …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nCaches <code>CoerceUnsized</code> kinds for impls on custom types.\n[query description - consider adding a doc-comment!] …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGiven the def_id of a const-generic parameter, computes …\nReturns <code>true</code> if this is a const fn, use the <code>is_const_fn</code> to …\nThe body of the coroutine, modified to take its upvars by …\n[query description - consider adding a doc-comment!] Given …\nReturns <code>Some(coroutine_kind)</code> if the node pointed to by …\nChecks for the nearest <code>#[coverage(off)]</code> or <code>#[coverage(on)]</code> …\nSummarizes coverage IDs inserted by the <code>InstrumentCoverage</code> …\nGets the paths where the crate came from in the file …\n[query description - consider adding a doc-comment!] the …\n[query description - consider adding a doc-comment!] …\nGets the hash for the host proc macro. Used to support -Z …\nCollects all incoherent impls for the given crate and type.\nGets a complete map from all types to their inherent impls.\nChecks all types in the crate for overlap in their …\nChecks all types in the crate for overlap in their …\nGets the name of the crate.\nGets a map with the variance of every item; use …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturns the debugger visualizers defined for this crate. …\n[query description - consider adding a doc-comment!] …\nGets the span for the identifier of the definition.\n[query description - consider adding a doc-comment!] …\nGets the span for the definition.\nReturns whether the impl or associated function has the …\nReturns the lang items defined in another crate by loading …\nAccess the DepGraph.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nDestructures array, ADT or tuple constants into the …\nPerforms an HIR-based well-formed check on the item with …\nReturns the diagnostic items defined in a crate.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nDo not call this query directly: invoke …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nPerforms part of the privacy check and computes effective …\nIdentifies the entry-point (e.g., the <code>main</code> function) for a …\nErases regions from <code>ty</code> to yield a new type. Normally you …\nEvaluate a static’s initializer, returning the …\nEvaluates a constant and returns the computed allocation.\nEvaluates const items or anonymous constants (such as enum …\nEvaluate a constant and convert it to a type level …\nDo not call this query directly: invoke …\nThe predicates of the trait that are implied during …\nReturns the list of bounds that are required to be …\nThe set of item bounds (see <code>TyCtxt::explicit_item_bounds</code>) …\nReturns the predicates written explicitly by the user.\nMaps from the <code>DefId</code> of a trait to the list of …\nThe Ident is the name of an associated type.The query …\n[query description - consider adding a doc-comment!] …\nThe list of symbols exported from the given crate.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGets the extra data to put in each output filename for a …\nExtracts the DefId corresponding to this DepNode. This …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nCompute a <code>FnAbi</code> suitable for indirect calls, i.e. to <code>fn</code> …\nCompute a <code>FnAbi</code> suitable for declaring/defining an <code>fn</code> …\n[query description - consider adding a doc-comment!] …\nComputes the signature of the function.\nReturns a list of all <code>extern</code> blocks of a crate.\nReturns the argument unchanged.\nUsed in testing\nMaps from the <code>DefId</code> of an item (trait/struct/enum/fn) to …\n[query description - consider adding a doc-comment!] check …\nReturns the lang items defined in another crate by loading …\nThe list of backend features computed from CLI flags (…\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nUsed in testing\n[query description - consider adding a doc-comment!] …\nQuery backing <code>Ty::has_significant_drop_raw</code>.\nQuery backing <code>Ty::is_structural_eq_shallow</code>.\nGives access to the HIR attributes inside the HIR owner <code>key</code>…\nRepresents crate as a whole (as distinct from the …\nAll items in the crate.\nThe items in a module.\nGives access to the HIR node’s parent for the HIR owner …\nMaps from associated items on a trait to the corresponding …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGiven an <code>impl_id</code>, return the trait it implements along …\nGiven a crate and a trait, look up all impls of that trait …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nMaps from thee <code>DefId</code> of a type to its (inferred) outlives.\nReturns the inferred outlives predicates (e.g., for …\n[query description - consider adding a doc-comment!] …\nDo not call this query directly: invoke …\nMaps a <code>DefId</code> of a type to a list of its inherent impls. …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nCalls <code>U::from(self)</code>.\nWhether the function is an intrinsic\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nTrait selection queries. These are best used by invoking …\n[query description - consider adding a doc-comment!] …\nDetermines whether an item is annotated with <code>doc(hidden)</code>.\nDetermines whether an item is annotated with …\n[query description - consider adding a doc-comment!] …\nReturn whether this kind always require evaluation.\nQuery backing <code>Ty::is_freeze</code>.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturns whether or not the crate with CrateNum ‘cnum’ …\n[query description - consider adding a doc-comment!] …\nReturns <code>true</code> if calls to the function may be promoted.\n[query description - consider adding a doc-comment!] …\nQuery backing <code>Ty::is_sized</code>.\n[query description - consider adding a doc-comment!] …\nQuery backing <code>Ty::is_unpin</code>.\n[query description - consider adding a doc-comment!] …\nReturns the attributes on the item at <code>def_id</code>.\nElaborated version of the predicates from …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nContains variant =&gt; str representations for constructing …\n[query description - consider adding a doc-comment!] …\nComputes the layout of a type. Note that this implicitly …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nPerforms lint checking for the module.\n[query description - consider adding a doc-comment!] …\nReturn the live symbols in the crate for dead code check.\nReturns HIR ID for the given <code>LocalDefId</code>.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nBorrow-checks the function body. If this is a closure, …\nBuild the MIR for a given <code>DefId</code> and prepare it for const …\nCheck whether the function has any recursion that could …\nMaps DefId’s that have an associated <code>mir::Body</code> to the …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nObtain all the calls into other local functions\nSet of all the <code>DefId</code>s in this crate that have MIR …\n[query description - consider adding a doc-comment!] …\nGenerates a MIR body for the shim.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nLook up all native libraries this crate depends on. These …\nGet the corresponding native library from the …\nQuery backing <code>Ty::needs_async_drop</code>.\nQuery backing <code>Ty::needs_drop</code>.\nDo not call this query directly: Invoke <code>normalize</code> instead.\nDo not call this query directly: Invoke <code>normalize</code> instead.\nDo not call this query directly: Invoke <code>normalize</code> instead.\nFor a given item’s generic parameter, gets the default …\n[query description - consider adding a doc-comment!] …\nGives access to the HIR nodes and bodies inside <code>key</code> if it…\nMIR after our optimization passes have run. This is MIR …\nChecks whether all impls in the crate pass the overlap …\nReturn the filenames where output artefacts shall be …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGets the ParameterEnvironment for a given item; this …\nLike <code>param_env</code>, but returns the <code>ParamEnv</code> in <code>Reveal::All</code> …\nSet of param indexes for type params that are in the type…\n[query description - consider adding a doc-comment!] …\nMaps from the <code>DefId</code> of an item (trait/struct/enum/fn) to …\nFinds the <code>rustc_proc_macro_decls</code> item of a crate.\nAccess the profiler.\nThe <code>DefId</code> is the <code>DefId</code> of the containing MIR body. …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nThis method tries to recover the query key from the given …\nPer-body <code>region::ScopeTree</code>. The <code>DefId</code> should be the owner …\nCollects the list of all tools registered using …\nGets the rendered value of the specified constant or …\nGets the rendered precise capturing args for an opaque for …\nChecks whether a type is representable or infinitely sized\nAn implementation detail for the <code>representability</code> query\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nDoes lifetime resolution on items. Importantly, we can’t …\nAttempt to resolve the given <code>DefId</code> to an <code>Instance</code>, for the …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nAccess the compiler session.\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturn the span for a definition. Contrary to <code>def_span</code> …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nGet all item paths that were stripped by a <code>#[cfg]</code> in a …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nThe <code>symbol_name</code> query provides the symbol name for calling …\nComputes the tag (if any) for a given type and variant.\nTry to build an abstract representation of the given …\nFetch the THIR for a given body. If typeck for that body …\nThis method turns the parameters of a DepNodeConstructor …\n[query description - consider adding a doc-comment!] …\nReturns everything that looks like a predicate written …\n[query description - consider adding a doc-comment!] …\nGiven a trait <code>trait_id</code>, return all known <code>impl</code> blocks.\nA list of all traits in a crate, used by rustdoc and error …\nThis exists purely for testing the interactions between …\nCollects the “trimmed”, shortest accessible paths to …\nTry to force a dep node to execute and see if it’s green.\nLoad data from the on-disk cache.\nDo not call this query directly: invoke …\n[query description - consider adding a doc-comment!] …\nReturns the <code>Ty</code> of the given <code>DefId</code>. If the <code>DefId</code> points to …\nSpecialized instance of <code>type_of</code> that detects cycles that …\nDo not call this query directly: part of the <code>Eq</code> type-op\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>Normalize</code> …\nDo not call this query directly: part of the <code>ProvePredicate</code>…\nTo avoid cycles within the predicates of a single item we …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nReturns the upstream crate that exports async-drop-glue for\nReturns the upstream crate that exports drop-glue for the …\nThe entire set of monomorphizations the local crate can …\nReturns the set of upstream monomorphizations available …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nConverts a type level constant value into <code>ConstValue</code>\nMaps from the <code>DefId</code> of a type or region parameter to its …\nComputes the visibility of the provided <code>def_id</code>.\nThe visible parent map is a map from every item to a …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\n[query description - consider adding a doc-comment!] …\nCreate a hashing context for hashing new results.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed by <code>rustc_const_eval</code> Constant referring to Fluent …\nGather the LocalDefId for each item-like within a module, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns all non-associated locally defined items in all …\nReturns the argument unchanged.\nReturns all items that are associated with some <code>impl</code> block …\nCalls <code>U::from(self)</code>.\nAn iterator that walks up the ancestor tree of a given …\nAn iterator that walks up the ancestor tree of a given …\nGiven a node ID, gets a list of attributes associated with …\nReturns the <code>ConstContext</code> of the body associated with this …\nGiven a body owner’s id, returns the <code>BodyId</code> associated …\nReturns the <code>HirId</code> that corresponds to the definition of …\nReturns the <code>BodyOwnerKind</code> of this <code>LocalDefId</code>.\nReturns an iterator of the <code>DefId</code>s for all body-owners in …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the defining scope for an opaque type definition.\nReturns the nearest enclosing scope. A scope is roughly an …\nRetrieves the <code>HirId</code> for <code>id</code>’s enclosing function <em>if</em> the <code>id</code>…\nWhen on an if expression, a match arm tail expression or a …\nRetrieves the <code>OwnerId</code> for <code>id</code>’s parent item, or <code>id</code> itself …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the expression pointed at by <code>hir_id</code> belongs to a …\nChecks if the node is left-hand side of an assignment.\nGets the attributes on the crate. This is preferable to …\nGiven a <code>LocalDefId</code>, returns the <code>BodyId</code> associated with it, …\nGet a representation of this <code>id</code> for debugging purposes. …\nReturns the HirId of <code>N</code> in …\nReturns an iterator for the nodes in the ancestor tree of …\nReturns an iterator for the nodes in the ancestor tree of …\nReturns an iterator for the nodes in the ancestor tree of …\nGets the span of the definition of the specified HIR node. …\nLike <code>hir.span()</code>, but includes the body of items (instead …\nVisits all item-likes in the crate in some deterministic …\nThis method is the equivalent of …\nWalks the attributes in a crate.\nWalks the contents of the local crate. See also …\nVisits all nested things, including item-likes.\nDo not visit nested item-like things, but visit nested …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA dereference of a pointer, reference or <code>Box&lt;T&gt;</code> of the …\n<code>B.F</code> where <code>B</code> is the base expression and <code>F</code> is the field. The …\nSome index like <code>B[x]</code>, where <code>B</code> is the base expression. We …\nA named local variable.\nA conversion from an opaque type to its hidden type so we …\nA <code>Place</code> represents how a value is located in memory.\nA <code>PlaceWithHirId</code> represents how a value is located in …\nA temporary variable.\nA named <code>static</code> item.\nA subslice covering a range of values like <code>B[x..y]</code>.\nAn upvar referenced by closure env.\nThe “outermost” place that holds this value.\nThe type of the <code>PlaceBase</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns an iterator of the types that have to be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>HirId</code> of the expression or pattern producing this value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the kind of access made by the projection.\nInformation about the <code>Place</code>.\nHow this place is derived from the base place.\nReturns the type of this <code>Place</code> after all projections have …\nType after the projection is applied.\nReturns the type of this <code>Place</code> immediately before …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRequires that <code>region</code> must be equal to one of the regions …\n<strong>Canonicalization</strong> is the key to constructing a query in the …\nThe options <code>O1..On</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe span where the hidden type was instantiated.\nReturns the argument unchanged.\nThe hidden type in which <code>member_region</code> appears: used for …\nCalls <code>U::from(self)</code>.\nThe <code>DefId</code> and args of the opaque type causing this …\nThe region <code>R0</code>.\nThe query is not known to be true, but also not known to be\nRust actually has more than one category of type variables;\nDescribes the “kind” of the canonical variable. This …\nIndicates whether or not we were able to prove the query …\nSome kind of const inference variable.\nEffect variable <code>&#39;?E</code>.\nFloating-point type variable <code>?F</code> (that can only be unified …\nGeneral type variable <code>?T</code> that can be unified with …\nIntegral type variable <code>?I</code> (that can only be unified with …\nWhen we canonicalize a value to form a query, we wind up …\nA “placeholder” that represents “any const”.\nA “placeholder” that represents “any region”. …\nA “placeholder” that represents “any type”.\nThe query is known to be true, presuming that you apply the\nAfter we execute a query with a canonicalized key, we get …\nRegion variable <code>&#39;?R</code>.\nSome kind of type inference variable.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the cached canonical form of <code>key</code> or executes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents an empty (trivially true) set of region …\nMap from the universes that appear in the query to the …\nThis is equivalent to <code>CanonicalVarValues</code>, but using a …\nvalues for the effect inference variable\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this value is known, returns the const it is known to …\n<code>DefId</code> of the const parameter this was instantiated for, if …\nLint level was set by a command-line flag. The provided …\nLint is at the default level as declared in rustc.\nA tuple of a lint level and its source.\nThis struct represents a lint expectation and holds all …\nHow a lint level was set.\nLint level was set by an attribute.\nReturn type for the <code>shallow_lint_levels_on</code> query.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe <code>Span</code> of the attribute that this expectation originated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns whether <code>span</code> originates in a foreign crate’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether <code>span</code> is generated by <code>async</code> or <code>await</code>.\nLint messages for the <code>unfulfilled_lint_expectations</code> lint …\nThe innermost function for emitting lints.\nFetch and return the user-visible lint level for the given …\nThis will hold the name of the tool that this lint belongs …\nPerform a deep probe in the HIR tree looking for the …\nThe reason for this expectation that can optionally be …\nFrom an initial level and source, verify the effect of …\nRFC 2383 reason\nThis structure is supposed to keep enough data to …\nA simplified version of <code>ImportKind</code> from resolve. <code>DefId</code>s …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nName of the item.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReexport chain linking this module child to its original …\nResolution result corresponding to the item. Local …\nVisibility of the item.\nType definitions for learning about the dependency formats …\nDetecting lang items.\nRegistering limits:\nA pass that checks to make sure private fields and methods …\nThis file declares the <code>ScopeTree</code> type, which describes the …\nName resolution for lifetimes and late-bound type and …\nA pass that annotates every item and method with its …\n<code>#[rustc_allocator]</code>: a hint to LLVM that the pointer …\n<code>#[rustc_allocator_zeroed]</code>: a hint to LLVM that the …\n<code>#[cold]</code>: a hint to LLVM that this function, when called, …\n<code>#[rustc_deallocator]</code>: a hint to LLVM that the function …\n#[ffi_const]: applies clang’s <code>const</code> attribute to a …\n#[ffi_pure]: applies clang’s <code>pure</code> attribute to a foreign …\n<code>#[naked]</code>: an indicator to LLVM that no function …\nAn indicator that function will never unwind. Will become …\n<code>#[no_builtins]</code>: indicates that disable implicit builtin …\n<code>#[no_mangle]</code>: an indicator that the function’s name …\n<code>#[rustc_reallocator]</code>: a hint to LLVM that the function …\n<code>#[rustc_std_internal_symbol]</code>: an indicator that this …\n<code>#[thread_local]</code>: indicates a static is actually a thread …\n<code>#[track_caller]</code>: allow access to the caller location\n<code>#[used]</code>: indicates that LLVM can’t eliminate this …\n<code>#[used(linker)]</code>: indicates that neither LLVM nor the …\nThe <code>#[repr(align(...))]</code> attribute. Indicates the value of …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns <code>true</code> if it looks like this symbol needs to be …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nNops after entry, but before body\nThe <code>#[export_name = &quot;...&quot;]</code> attribute, indicating a custom …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe feature is implied by another feature, rather than …\nThe <code>#[linkage = &quot;...&quot;]</code> attribute on foreign items and the …\nParsed representation of the <code>#[inline]</code> attribute\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe <code>#[instruction_set(set)]</code> attribute. Indicates if the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe <code>#[link_name = &quot;...&quot;]</code> attribute, indicating a custom …\nThe <code>#[link_ordinal = &quot;...&quot;]</code> attribute, indicating an …\nThe <code>#[link_section = &quot;...&quot;]</code> attribute, or what executable …\nThe <code>#[linkage = &quot;...&quot;]</code> attribute on Rust-defined items and …\nThe name of the target feature (e.g. “avx”)\nThe <code>#[no_sanitize(...)]</code> attribute. Indicates sanitizers …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParsed representation of the <code>#[optimize]</code> attribute\nThe <code>#[patchable_function_entry(...)]</code> attribute. Indicates …\nNops to prepend to the function\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe <code>#[target_feature(enable = &quot;...&quot;)]</code> attribute and the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA single debugger visualizer file.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe file path to the visualizer file. This is used for …\nThe complete debugger visualizer source.\nIndicates which visualizer type this targets.\nA mapping of all required dependencies for a particular …\nA list of dependencies for a certain crate type.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>SymbolExportInfo</code> of a symbols specifies symbol-related …\nKind of exported symbols.\nThe SymbolExportLevel of a symbols specifies from which …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is the symbol name of an instance if it is …\nReturns <code>true</code> if the specified <code>lang_item</code> must be present …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nItem is directly accessible, without help of reexports.\nHolds a map of effective visibilities for reachable HIR …\nRepresents the levels of effective visibility an item can …\nItem is either reexported, or leaked through any kind of …\nSuperset of <code>Reachable</code> including items leaked through …\nItem is accessible either directly, or with help of <code>use</code> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>Level::Direct</code>.\nSee <code>Level::Reexported</code>.\nSee <code>Level::Reachable</code>.\nScope of arguments passed to a function or closure (they …\nScope of the call-site for a function or closure (outlives …\nScope of destructors for temporaries of node-id.\nRepresents a subscope of <code>block</code> for a binding that is …\nScope of the condition and then block of an if expression …\nScope of the condition and then block of an if expression …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nScope following a <code>let id = expr;</code> binding in a block.\nIdentifies the reason that a given expression is an rvalue …\nRepresents a statically-describable scope that can be used …\nThe region scope tree encodes information about region …\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe number of expressions and patterns appearing before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>subscope</code> is equal to or is lexically …\nReturns an item-local ID associated with this scope.\nReturns the narrowest scope that encloses <code>id</code>, if any.\nMaps from a scope ID to the enclosing scope id; this is …\nIf not empty, this body is the root of this region …\nIdentifies expressions which, if captured into a …\nReturns the span of this <code>Scope</code>. Note that in general the …\nThe <code>Span</code> of the yield.\nMaps from a variable or binding ID to the block in which …\nReturns the lifetime of the local variable <code>var_id</code>, if any.\nChecks whether the given scope contains a <code>yield</code>. If so, …\nIf there are any <code>yield</code> nested within a scope, this map …\nMaps the id of each lifetime reference to the lifetime decl\nA set containing, at most, one known element. If two …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nMaps from every use of a named (not anonymous) lifetime to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe can use the item because it is stable or we provided the\nAn override option for eval_stability.\nWe cannot use the item because it is unstable and we did …\nAn entry in the <code>depr_map</code>.\nResult of <code>TyCtxt::eval_stability</code>.\nA stability index, giving the stability level for items …\nHandle the item normally\nThe item does not have the <code>#[stable]</code> or <code>#[unstable]</code> marker …\nDon’t emit an unstable error for the item\nThe metadata of the attribute associated with this entry.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMapping from feature name to feature name based on the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>DefId</code> where the attr was originally attached. <code>None</code> for …\nThis is mostly a cache, except the stabilities of local …\nUnwinding is just not possible given the ABI of this …\nThe <code>+</code> operator (addition)\nLike <code>Add</code>, but with UB on overflow.  (Integers only.)\nLike <code>Add</code>, but returns <code>(T, bool)</code> of both the wrapped result …\nThe second field is the variant index. It’s equal to 0 …\nCreates an aggregate value, like a tuple or struct.\nA temporary created during the creation of an aggregate …\nReturns the minimum alignment of a type\nThe MIR used for most analysis.\nSee <code>MirPhase::Analysis</code>.\nFunction argument.\nThe type is of the element\nThe coercion was manually written by the user with an <code>as</code> …\nEncodes a user’s type ascription. These need to be …\nThe <code>asm!</code> macro\nEvaluates the operand, which must have type <code>bool</code>. If it is …\nInformation about an assertion failure.\nType for MIR <code>Assert</code> terminator error messages.\nAssign statements roughly correspond to an assignment in …\nSpecial action for <code>Yield</code>, <code>Call</code> and <code>InlineAsm</code> terminators.\nDenotes a call to the intrinsic function <code>assume</code>.\nA node in the MIR control-flow graph.\nData for a basic block, including a list of its statements.\n<code>Offset</code> has the same semantics as <code>offset</code>, except that the …\nThe <code>&amp;</code> operator (bitwise and)\nThe <code>|</code> operator (bitwise or)\nThe <code>^</code> operator (bitwise xor)\n<code>BlockTailInfo</code> is attached to the <code>LocalDecl</code> for temporaries …\nA temporary created for evaluation of some subexpression …\nThe lowered representation of a single function.\nA “boring” constraint (caused by the given location) …\nA local without anything interesting about it.\nThe MIR that is generated by MIR building.\nRoughly speaking, evaluates the <code>func</code> operand and the …\nContains the function type if available.\nList of places that are written to after a successful …\nRepresents how a <code>TerminatorKind::Call</code> was constructed. …\nPerforms essentially all of the casts that can be …\nCleanups to be done.\nA closure that is coerced to a function pointer.\nA constraint that came from checking the body of a closure.\nData must be immutable but not aliasable. This kind of …\nIndicates an outlives-constraint between a type or between …\nThe subject of a <code>ClosureOutlivesRequirement</code> – that is, …\nRepresents a <code>ty::Ty</code> for use in <code>ClosureOutlivesSubject</code>.\nAfter we borrow check a closure, we are left with various …\nThe <code>&lt;=&gt;</code> operator (three-way comparison, like <code>Ord::cmp</code>)\nRepresents how a <code>CastKind::PointerCoercion</code> was constructed.\nConstants\nEvaluated Constants Represents the result of const …\nInstructs the const eval interpreter to increment a …\nThe result of the <code>mir_const_qualif</code> query.\nA temporary created that references the const with the …\nRepresents a constant value in Rust. <code>Scalar</code> and <code>Slice</code> are …\nConstants are already semantically values, and remain …\nThese indices are generated by slice patterns. Easiest to …\nThese indices are generated by slice patterns. Easiest to …\nThese indices are generated by slice patterns. Easiest to …\nOutlives-constraints can be categorized to determine …\nNo action is to be taken. Continue unwinding.\nCreates a value by loading the given place.\nA CopyForDeref is equivalent to a read from a place at the …\nDenotes a call to the intrinsic function …\nIndicates the end of dropping a coroutine.\nAdditional information carried by a MIR body when it is …\nThe layout of coroutine state.\nCarries control-flow-sensitive information injected by …\nSummarizes coverage IDs inserted by the <code>InstrumentCoverage</code> …\nA shared (deep) borrow. Data must be immutable and is …\n<code>DefLocation</code> represents the location of a definition - …\nA “normal” retag.\nDeinitializes the place.\nA temporary created during the pass <code>Derefer</code> to avoid it’…\nThe constituent parts of a mir constant of kind ADT or …\nComputes the discriminant of the place, returning it as an …\nThe <code>/</code> operator (division)\nFor terminators that two successors, <code>assert</code> with cleanup …\n“Downcast” to a variant of an enum or a coroutine.\n“Downcast” to a variant of an enum or a coroutine.\n“Downcast” to a variant of an enum or a coroutine.\nThe behavior of this statement differs significantly …\nA type that has its drop shim called.\nThe <code>==</code> operator (equality)\nAn immutable, aliasable borrow that is discarded after …\nA temporary created for borrow checking.\nThis represents all the reading that a pattern match may …\nThe <code>FakeReadCause</code> describes the type of pattern why a …\nA block where control flow only ever takes one real path, …\nA terminator for blocks that only take one path in …\nA field (e.g., <code>f</code> in <code>_1.f</code>) is one variant of <code>ProjectionElem</code>…\nA field (e.g., <code>f</code> in <code>_1.f</code>) is one variant of <code>ProjectionElem</code>…\nA field (e.g., <code>f</code> in <code>_1.f</code>) is one variant of <code>ProjectionElem</code>…\nA function that gets called. We don’t necessarily know …\nThe initial retag of arguments when entering a function.\nA fake read of the RefWithinGuard version of a …\nIf we have an index expression like\nOfficially, the semantics of\nInject a fake read of the borrowed input at the end of …\n<code>let x: !; match x {}</code> doesn’t generate any read of x so …\nThe <code>&gt;=</code> operator (greater than or equal to)\nBlock has one successor; we continue execution there.\nThe <code>&gt;</code> operator (greater than)\nA temporary created during evaluating <code>if</code> predicate, …\nAn internal constraint derived from an illegal universe …\nThe coercion was automatically inserted by the compiler.\nBinding for a <code>self</code>/<code>&amp;self</code>/<code>&amp;mut self</code> binding where the type …\nWe were already cleaning up for an ongoing unwind, and a …\nIndex into a slice/array.\nIndex into a slice/array.\nIndex into a slice/array.\nA value not representable by the other variants; needs to …\nIn addition to the semantic changes, beginning with this …\nBlock ends with an inline assembly block. This is a …\nThe macro that an inline assembly block was created by\nA constraint that doesn’t correspond to anything the …\nDenotes a call to an intrinsic that does not require an …\nThe <code>&lt;=</code> operator (less than or equal to)\nYields the length of the place, as a <code>usize</code>.\nA MIR local.\nTypes for locals\nExtra information about a some locals that’s used for …\nClassifies locals into categories. See <code>Body::local_kind</code>.\n<code>Location</code> represents the position of the start of the …\nThe <code>&lt;</code> operator (less than)\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nThis was from comparison generated by a match, used by …\nSome item that needs to monomorphize successfully for a …\nRepresents the “flavors” of MIR.\nWhere a specific <code>mir::Body</code> comes from.\nOther types of desugaring that did not come from the HIR, …\nCreates a value by performing loading the place, just like …\nThe <code>*</code> operator (multiplication)\nLike <code>Mul</code>, but with UB on overflow.  (Integers only.)\nLike <code>Mul</code>, but returns <code>(T, bool)</code> of both the wrapped result …\nData is mutable and not aliasable.\nThe <code>naked_asm!</code> macro\nThe <code>!=</code> operator (not equal to)\nThe <code>-</code> operator for negation\nFor terminators that have no successor, like <code>return</code>.\nNo-op. Useful for deleting instructions without affecting …\nNormal function call, no special source\nThe <code>!</code> operator for logical inversion\nComputes a value as described by the operation.\nThe <code>ptr.offset</code> operator\nReturns the offset of a field\nLike an explicit cast from an opaque type to a concrete …\nLike an explicit cast from an opaque type to a concrete …\nLike an explicit cast from an opaque type to a concrete …\nAn operand in MIR represents a “value” in Rust, the …\nThis came from something such as <code>a &gt; b</code> or <code>a + b</code>. In THIR, …\nPlaces roughly correspond to a “location in memory.” …\nThis <code>Place</code> only contains projection which satisfy …\nAlias for projections as they appear in places, where the …\nThis statement exists to preserve a trace of a scrutinee …\nPointer related casts that are done by coercions. Note …\nAn exposing pointer to address cast. A cast between a …\nAn address-to-pointer cast that picks up an exposed …\nBeginning in this phase, the following variants are …\nBeginning with this phase, the following variant is …\nA constraint from a user-written predicate with the …\nAlias for projections as they appear in <code>UserTypeProjection</code>…\nGets the metadata <code>M</code> from a <code>*const</code>/<code>*mut</code>/<code>&amp;</code>/<code>&amp;mut</code> to …\nRetagging raw pointers.\nCreates a raw pointer with the indicated mutability to the …\nConstruct a raw pointer from the data pointer and metadata.\nCreates a reference of the indicated kind to the place.\nReference used in a guard expression to ensure …\nSubject is a free region from the closure. Indicates a …\nThe <code>%</code> operator (modulus)\nCreates an array where each element is the value of the …\nRetag references in the given place, ensuring they got …\nDescribes what kind of retag is to be performed.\nReturns from the function.\nLocation of function’s return value.\nThe MIR used for CTFE, optimizations, and codegen.\nSee <code>MirPhase::Runtime</code>.\nThe various kinds of rvalues that can appear in MIR.\nUsed for types with <code>layout::abi::Scalar</code> ABI.\nWrite the discriminant for a variant to the enum Place.\nA shared shallow borrow. The immediately borrowed place …\nTransmutes a <code>*mut u8</code> into shallow-initialized <code>Box&lt;T&gt;</code>.\nData must be immutable and is aliasable.\nThe <code>&lt;&lt;</code> operator (shift left)\nLike <code>Shl</code>, but is UB if the RHS &gt;= LHS::BITS or RHS &lt; 0\nThe <code>&gt;&gt;</code> operator (shift right)\nLike <code>Shl</code>, but is UB if the RHS &gt;= LHS::BITS or RHS &lt; 0\nFor terminators that a single successor, like <code>goto</code>, and …\nReturns the size of a value of that type\nUsed for references to unsized types with slice tail.\nGrouped information about the source code origin of a MIR …\nA statement in a basic block, including information about …\nThe various kinds of statements that can appear in MIR.\nA temporary created that references the static with the …\nSee <code>StorageLive</code> above.\n<code>StorageLive</code> and <code>StorageDead</code> statements mark the live range …\nThe <code>-</code> operator (subtraction)\nLike <code>Sub</code>, but with UB on overflow.  (Integers only.)\nLike <code>Sub</code>, but returns <code>(T, bool)</code> of both the wrapped result …\nThese indices are generated by slice patterns.\nThese indices are generated by slice patterns.\nThese indices are generated by slice patterns.\nA <code>Subtype(T)</code> projection is applied to any …\nA <code>Subtype(T)</code> projection is applied to any …\nA <code>Subtype(T)</code> projection is applied to any …\nSwitches based on the computed value.\nSpecial edge for <code>SwitchInt</code>.\nTail call.\nUser-declared variable binding or compiler-introduced …\nTerminates the execution if unwind happens.\nThe various kinds of terminators, representing ways of …\nCreates a pointer/reference to the given thread local.\nReinterpret the bits of the input as a different type.\nRetag preparing for a two-phase borrow.\nThis borrow arose from method-call auto-ref. (i.e., …\nThis constant came from the type system.\nSubject is a type, typically a type parameter, but could …\nReturns whether we should perform some UB-checking at …\nExactly like <code>BinaryOp</code>, but less operands.\nAn unevaluated mir constant which is not part of the type …\nAn unevaluated (potentially generic) constant used in MIR.\nIndicates a terminator that can never be reached.\nTriggers undefined behavior if unwind happens.\nUnsizing casts might require vtables, so we have to record …\nAction to be taken when a stack unwind happens.\nIndicates that the landing pad is finished and that the …\nIndicates that the landing pad is finished and that the …\nThe reason we are terminating the process during unwinding.\nA constraint that came from a usage of a variable (e.g. in …\nYields the operand unchanged\nA user-defined local variable or function parameter\nEncodes the effect of a user-supplied type annotation on …\nA collection of projections into user types.\nThis constant cannot go back into the type system, as it …\nThis is a binding for a non-<code>self</code> binding, or a <code>self</code> that …\nDebug information pertaining to a user variable.\nMarks a suspend point.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nOnly for ZSTs.\nThe value lives here, at offset 0, and that allocation …\nThe number of arguments this function takes.\nReturns an iterator over all function arguments.\nWhen present, indicates what argument number this variable …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nA list of basic blocks. References to basic block use a …\nIs variable bound via <code>x</code>, <code>mut x</code>, <code>ref x</code>, <code>ref mut x</code>, <code>mut ref x</code>…\nThe block that the location is within.\nReturns the return type; it always return first element …\nFor a <code>Location</code> in this scope, determine what the “caller …\nReturns <code>true</code> only if local is a binding that can itself be …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe user variable’s data is split across several …\nAll the opaque types that are restricted to concrete types …\nAdditional information carried by a MIR body when it is …\nCoroutine drop glue. This field is populated after the …\nIf this is a coroutine then record the type of source …\nThe layout of a coroutine. This field is populated after …\nPrefer going through <code>TyCtxt::coroutine_layout</code> rather than …\nNumber of elements to copy from src to dest, not bytes.\nMetadata from source code coverage analysis and …\nCoverage information collected from THIR/MIR during MIR …\nThe name for debuginfo.\nThe type of every local stored inside the coroutine.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> is the local is from a compiler desugaring, …\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nPer-function coverage information added by the …\nWhether the local should be ignored for trait bound …\nConverts <code>self</code> into same <code>LocalDecl</code> except tagged as …\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nThe phase at which this MIR should be “injected” into …\nWhether this scope is the root of a scope tree of another …\nThe instance this source scope was inlined from, if any.\nNearest (transitive) parent scope (if any) which is …\nAn interpreter for MIR used in CTFE and by miri.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this block lies on an unwind path. This is used …\nReturns <code>true</code> if this is a DerefTemp\nDoes the block have no statements and an unreachable …\nReturns <code>true</code> if local is definitely not a <code>ref ident</code> or …\nDoes this body use generic parameters. This is used for …\nReturns <code>true</code> if <code>other</code> is earlier in the control flow graph …\nReturns <code>true</code> if this is a reference to a variable bound in …\nReturns <code>Some</code> if this is a reference to a static item that …\nReturns <code>Some</code> if this is a reference to a thread-local …\nReturns <code>true</code> if this variable is a named variable or …\nFinds the original HirId this MIR item came from. This is …\nAn <code>HirId</code> with lint levels equivalent to this scope’s …\nCrate-local information for this source scope, that can’…\nDeclarations of locals.\nCoverage codegen needs to know the highest counter ID that …\nFurther items that were mentioned in this function and …\nLike <code>Terminator::successors</code> but tries to use information …\nReturns an iterator over all user-declared mutable …\nReturns an iterator over all user-declared mutable locals.\nWhether this is a mutable binding (i.e., <code>let x</code> or <code>let mut x</code>…\nCreates a new <code>LocalDecl</code> for a temporary, mutable.\nReturns a partially initialized MIR body containing only a …\nThe number of external regions defined on the closure. In …\nPlace of the RHS of the =, or the subject of the <code>match</code> …\nIf an explicit type was provided for this variable binding,\nRequirements between the various free regions defined in …\nHow many passses we have executed since starting the …\nThe span of the pattern in which this variable was bound.\nRecords how far through the “desugaring and optimization…\nprojection out of a place (access a field, deref a …\nWhere in the composite user variable this fragment is, …\nIf <code>Some</code>, this is a promoted rvalue within the parent …\nValues computed by queries that use MIR.\nConstants that are required to evaluate successfully for …\nThe resume type of the function. This field is removed …\nReturns the return type; it always return first element …\nThe source scope, keeping track of which bindings can be …\nReturns the source info associated with <code>location</code>.\nSource info corresponding to the local in the original MIR …\nThe <em>syntactic</em> (i.e., not visibility) source scope the …\nSource info of the user variable, including the scope …\nA list of source scopes; these are referenced by statements\nA span representing this MIR, for error reporting.\nThe source span for the AST pertaining to this MIR entity.\n<code>Span</code> of the tail expression.\nMark an argument local (which must be a tuple) as getting …\nFunctionality for statements, operands, places, and things …\nList of statements in this block.\nWhich saved locals are storage-live at the same time. …\nReturns the location immediately after this one within the …\nThis defines the syntax of MIR, i.e., the set of available …\nIf <code>true</code>, then the value resulting from evaluating this tail\nPossible branch sites. The last element of this vector is …\nMethods for the various MIR types. These are intended for …\nFunctionality for terminators and helper types that appear …\nAccessor for terminator.\nTerminator for this block.\nGets the location of the terminator for the given block.\nIf this basic block ends with a <code>TerminatorKind::SwitchInt</code> …\nThe type of this local.\nType of the original user variable. This cannot contain a …\n<code>TypeFoldable</code> implementations for MIR types\nOptional user-given type: for something like …\nIf the user manually ascribed a type to this variable, …\nUser type annotations.\nWhere the data for this user variable is to be found.\nPossible values. The locations to branch to in each case …\nDebug information pertaining to user variables, including …\nWhich of the above fields are in each variant. Note that …\nThe source that led to each variant being created …\nReturns an iterator over all user-defined variables and …\nThe MIR Visitor\nLike <code>LocalDecl::new</code>, but takes a <code>SourceInfo</code> instead of a …\nThe yield type of the function. This field is removed …\nThe backing memory of the value. May contain more memory …\nThe allocation storing the slice contents. This always …\nThe metadata field of the reference. This is a “target …\nOffset into <code>alloc</code>\nWhether this cast is a coercion that was automatically …\nWhether this is an unsizing coercion and if yes, this …\nThis represents the index into the <code>targets</code> array in …\nCounting backwards from end? This is always false when …\nWhether <code>to</code> counts from the start or end of the array/slice.\nThe thing being indexed must be at least this long – …\nindex or -index (in Python terms), depending on from_end\nCounting backwards from end? This is always false when …\nWhether <code>to</code> counts from the start or end of the array/slice.\nThe thing being indexed must be at least this long – …\nindex or -index (in Python terms), depending on from_end\nCounting backwards from end? This is always false when …\nWhether <code>to</code> counts from the start or end of the array/slice.\nThe thing being indexed must be at least this long – …\nindex or -index (in Python terms), depending on from_end\nThe cleanup block, if it exists.\nArguments the function is called with. These are owned by …\nArguments the function is called with. These are owned by …\nMacro used to create this inline asm: one of <code>asm!</code> or …\nWhere this call came from in HIR/THIR.\nWhere the returned value will be written\nThe discriminant value being tested.\nCleanup to be done if the coroutine is dropped at this …\nThis <code>Span</code> is the span of the function, without the dot and …\nThis <code>Span</code> is the span of the function, without the dot and …\nThe function that’s being called.\nThe function that’s being called.\nA block control flow could conceptually jump to, but won’…\nSource spans for each line of the inline assembly code. …\nThe operands for the inline assembly, as <code>Operand</code>s or <code>Place</code>…\nMiscellaneous options for the inline assembly.\nThe target normal control flow will take.\nThe target normal control flow will take.\nWhere to resume to.\nThe place to store the resume argument in.\nWhere to go after this call returns. If none, the call …\nValid targets for the inline assembly. The first element …\nThe template for the inline assembly, with placeholders.\nAction to be taken if the call unwinds.\nThe imaginary cleanup block link. This particular path …\nAction to be taken if the inline assembly unwinds. This is …\nThe value to return.\nReturns mutable reference to basic blocks. Invalidates CFG …\nGet mutable access to basic blocks without invalidating …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates cached information about the CFG.\nReturns true if control-flow graph contains a cycle …\nReturns predecessors for each basic block.\nReturns basic blocks in a reverse postorder.\n<code>switch_sources()[&amp;(target, switch)]</code> returns a list of …\nConstants\nEvaluated Constants Represents the result of const …\nRepresents a constant value in Rust. <code>Scalar</code> and <code>Slice</code> are …\nA value not representable by the other variants; needs to …\nUsed for types with <code>layout::abi::Scalar</code> ABI.\nUsed for references to unsized types with slice tail.\nThis constant came from the type system.\nAn unevaluated mir constant which is not part of the type …\nAn unevaluated (potentially generic) constant used in MIR.\nThis constant cannot go back into the type system, as it …\nOnly for ZSTs.\nThe value lives here, at offset 0, and that allocation …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPanics if the value cannot be evaluated or doesn’t …\nPanics if the value cannot be evaluated or doesn’t …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an unevaluated const from a <code>DefId</code> for a const item.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if any evaluation of this constant always …\nDetermines whether we need to add this const to …\nCheck if a constant may contain provenance information. …\nMust only be called on constants of type <code>&amp;str</code> or <code>&amp;[u8]</code>!\nThe backing memory of the value. May contain more memory …\nThe allocation storing the slice contents. This always …\nThe metadata field of the reference. This is a “target …\nOffset into <code>alloc</code>\nMarks its enclosing basic block with an ID that can be …\nUsed by <code>CoverageKind::BlockMarker</code> to mark blocks during …\nAssociates a branch region with separate counters for true …\nAssociates a normal region of code with a …\nMarks the point in MIR control flow represented by a …\nID of a mcdc condition. Used by llvm to check mcdc …\nID of a coverage counter. Values ascend from 0.\nMarks the point in MIR control flow represented by a …\nEnum that can hold a constant zero value, the ID of an …\nCoverage information for a function, recorded during MIR …\nID of a coverage-counter expression. Values ascend from 0.\nMarks the point in MIR control-flow represented by a …\nStores per-function coverage information attached to a …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nAssociates a branch region with separate counters for true …\nAssociates a decision region with a bitmap and number of …\nMarks a span that might otherwise not be represented in …\nMarks the point in MIR control flow represented by a …\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a copy of this mapping kind, in which all coverage …\nBranch spans generated by mcdc. Because of some limits …\nThe depth of the deepest decision is used to know how many …\n1 more than the highest-numbered <code>CoverageKind::BlockMarker</code> …\nConvert an MIR function into a gsgdt Graph\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrite graphviz DOT edges with labels between the given …\nWrite the graphviz DOT label for the overall graph. This …\nWrite a graphviz DOT of the graph\nWrite a graphviz DOT node for the given node.\nWrite the graphviz DOT label for the overall graph. This …\nWrite a graphviz DOT graph of the MIR.\nWrite a graphviz DOT graph of a list of MIRs.\nABI-incompatible argument types.\nABI-incompatible return types.\nThe accessed pointer did not have proper alignment.\nThe address space (of the target) is full.\nUsed a pointer with bad alignment.\nFunctionality required for the bytes of an <code>Allocation</code>.\nWe have our own error type that does not know about the …\nThe information that makes up a memory access: offset and …\nThis type represents an Allocation in the Miri/CTFE core …\nAbort in case errors are already reported.\nOverflow in arithmetic that may not overflow.\nDetails of an access to uninitialized bytes / bad pointer …\nThe access occurred with a place that was based on a …\nA slice/array index projection went out-of-bounds.\nDetails of which pointer is not aligned.\nDetails of why a pointer had to be in-bounds.\nInterned types generally have an <code>Outer</code> type and an <code>Inner</code> …\nThe type of provenance in the compile-time interpreter. …\nA custom (free-form) fluent-translated error, created by …\nUsing an integer as a pointer in the wrong way.\nWorking with a local that is not currently live.\nTrying to access the data behind a function pointer.\nTrying to access the data behind a vtable pointer.\nSomething was divided by 0 (x / 0).\nSigned division overflowed (INT_MIN / -1).\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\n<code>Ok(Err(ty))</code> indicates the constant was fine, but the …\nAccessing an unsupported extern static.\nExtern type field with an indeterminate offset.\nAn error occurred during FnAbi computation: the passed –…\nThe alloc ID is used as a function pointer.\nAn allocation in the global (tcx-managed) memory can be …\nUniquely identifies one of the following:\nNone of the above – generic/unspecific inbounds test.\nA contiguous chunk of initialized or uninitialized memory.\nYields <code>InitChunk</code>s. See <code>InitMask::range_as_init_chunks</code>.\nThe raw bytes of a simple value.\nPackages the kind of error we got from the const code …\nThe compiler got an interrupt signal (a user ran out of …\nUsing a non-boolean <code>u8</code> as bool.\nUsing a non-character <code>u32</code> as character.\nUsing a pointer-not-to-a-function as function pointer.\nInvalid metadata in a wide pointer\nTrying to set discriminant to the niched variant, but the …\nThe program was invalid (ill-typed, bad MIR, not …\nError information for when the program we executed turned …\nUsing a string that is not valid UTF-8,\nThe tag of an enum does not encode an actual discriminant.\nUsing uninitialized data where it is not allowed.\nUsing uninitialized data where it is not allowed.\nUsing a pointer-not-to-a-vtable as vtable pointer.\nUsing a vtable for the wrong trait.\nAn error occurred during layout computation.\nError type for <code>tcx.lit_to_const</code>.\nInput argument for <code>tcx.lit_to_const</code>.\nStop execution for a machine-controlled reason. This is …\nA trait for machine-specific errors (or other “machine …\nThe alloc ID points to memory.\nWe are access memory.\nThere is not enough memory (on the host) to perform an …\nInformation about a misaligned pointer.\nSays whether the <code>offset</code> field of <code>Pointer</code>s with this …\nWe are doing pointer offset_from.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nOverwriting parts of a pointer; without knowing absolute …\nPartially overwriting a pointer.\nRepresents a pointer in the Miri engine.\nOverflowing inbounds pointer arithmetic.\nWe are doing pointer arithmetic.\nUsed a pointer outside the bounds it is valid for.\nUsing a pointer after it got freed.\nThis trait abstracts over the kind of provenance that is …\nA pointer.\nAttempting to read or copy parts of a pointer to somewhere …\nPartially copying a pointer.\nEncountered a pointer where we needed an integer.\nEncountered a pointer where we needed raw bytes.\nSomething was “remainded” by 0 (x % 0).\nSigned remainder overflowed (INT_MIN % -1).\nAlready reported an error for this evaluation, and the …\nThe program exhausted the interpreter’s resources …\nError information for when the program exhausted the …\nA <code>Scalar</code> represents an immediate, primitive value existing …\nInformation about a size mismatch.\nData size is not equal to target size.\nA scalar had the wrong size.\nShift by too much.\nSize of a <code>[T]</code> is too big\nThe stack grew too big.\nThe alloc ID points to a “lazy” static variable that …\nAccessing thread local statics\nSize of a DST is too big\nDon’t emit an error, the evaluation failed because the …\nResolution can fail if we are in a too generic context.\nThe literal’s inferred type did not match the expected <code>ty</code>…\nFree-form case. Only for errors that are never caught! …\nThe program caused undefined behavior.\nError information for when the program caused Undefined …\nAn uninhabited enum variant is projected.\nA discriminant of an uninhabited enum variant is written.\nUnreachable code was executed.\nUnsized local variables.\nFree-form case. Only for errors that are never caught! …\nThe program did something the interpreter does not support …\nError information for when the program did something that …\nReading a C string that does not end within its allocation.\nThis alloc ID points to a symbolic (not-reified) vtable. …\nValidation error.\nWriting to read-only memory.\nRange of the original memory access.\nAdd diagnostic arguments by passing name and value pairs …\nThe address space that this <code>GlobalAlloc</code> should be placed …\nThe alignment of the allocation to detect unaligned reads. …\nMaps <code>AllocId</code>s to their corresponding allocations.\nFree-starting constructor for less syntactic overhead.\nThe virtual memory representation of the MIR interpreter.\nGives direct access to the raw underlying storage.\nGives direct access to the raw underlying storage.\nRange of the bad memory that was encountered. (Might not …\nThe actual bytes of the allocation. Note that the bytes of …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDecodes an <code>AllocId</code> in a thread-safe way.\nUsed to deduplicate global allocations: functions, …\nThe diagnostic message for this error\nThe end byte index into <code>init_mask</code>.\nExtra state for the machine.\nDetermines how a pointer should be printed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>AllocBytes</code> from a slice of <code>u8</code>.\nIf <code>OFFSET_IS_ADDR == false</code>, provenance must always be able …\nDenotes which part of this allocation is initialized.\nFor a constant or static, the <code>Instance</code> of the item itself. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the next chunk we will return is initialized. If …\nDefines the ‘join’ of provenance: what happens when …\nThe absolute value of the resultant constant.\n<code>true</code> if the allocation is mutable. Also used by codegen to …\nIf the constant is negative.\nThe <code>AllocId</code> to assign to the next requested ID. Always …\nThe index for promoted globals within their function’s …\nMaps from byte addresses to extra provenance data for each …\nThe current byte index into <code>init_mask</code>.\nThe type of the constant.\nPanics if the <code>GlobalAlloc</code> is not <code>GlobalAlloc::Function</code>\nPanics if the <code>GlobalAlloc</code> does not refer to an …\nPanics if the <code>GlobalAlloc</code> is not <code>GlobalAlloc::VTable</code>\nCreate a zeroed <code>AllocBytes</code> of the specified size and …\nThe vtable that was expected at the point in MIR that it …\nThe size of the memory range that was expected to be …\nThe size of the memory range that was expected to be …\nThe vtable that was actually referenced by the wide …\nThe vtable that was expected at the point in MIR that it …\nThe vtable that was actually referenced by the wide …\nFunctionality required for the bytes of an <code>Allocation</code>.\nWe have our own error type that does not know about the …\nThe information that makes up a memory access: offset and …\nThis type represents an Allocation in the Miri/CTFE core …\nInterned types generally have an <code>Outer</code> type and an <code>Inner</code> …\nContains the error value\nUsing uninitialized data where it is not allowed.\nThis is the maximum size we will hash at a time, when …\nThis is the maximum size (in bytes) for which a buffer …\nContains the success value\nPartially overwriting a pointer.\nPartially copying a pointer.\nEncountered a pointer where we needed raw bytes.\nA scalar had the wrong size.\nAdjust allocation from the ones in <code>tcx</code> to a custom Machine …\nThe alignment of the allocation to detect unaligned reads. …\nFree-starting constructor for less syntactic overhead.\nGives direct access to the raw underlying storage.\nGives direct access to the raw underlying storage.\nThe actual bytes of the allocation. Note that the bytes of …\nRemove all provenance in the given memory range.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nExtra state for the machine.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>AllocBytes</code> from a slice of <code>u8</code>.\nCreates an allocation initialized by the given bytes\nChecks that these bytes are initialized, and then strip …\nThis is the entirely abstraction-violating way to just …\nThis is the entirely abstraction-violating way to just get …\nA raw pointer variant of <code>get_bytes_unchecked_for_overwrite</code> …\nThis gives direct immutable access to the entire buffer, …\nThis gives direct mutable access to the entire buffer, …\nReturns the mask indicating which bytes are initialized.\nDenotes which part of this allocation is initialized.\nApplies a previously prepared copy of the init mask.\nLooks at a slice which may contain uninitialized bytes or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the init bit for the given range.\n<code>true</code> if the allocation is mutable. Also used by codegen to …\nReturns the provenance map.\nMaps from byte addresses to extra provenance data for each …\nApplies a previously prepared provenance copy. The …\nStore the provenance for each byte in the range, with a …\nReads a <em>non-ZST</em> scalar.\nReturns the <code>subrange</code> within this range; panics if it is …\nTry to create an Allocation of <code>size</code> bytes, failing if …\nTry to create an Allocation of <code>size</code> bytes, panics if there …\nAdd the extra.\nWrites a <em>non-ZST</em> scalar.\nWrite “uninit” to the given memory range.\nCreate a zeroed <code>AllocBytes</code> of the specified size and …\nA contiguous chunk of initialized or uninitialized memory.\nYields <code>InitChunk</code>s. See <code>InitMask::range_as_init_chunks</code>.\nRun-length encoding of the uninit mask. Used to copy parts …\nA bitmask where each bit refers to the byte with the same …\nThe actual materialized blocks of the bitmask, when we can…\nApplies multiple instances of the run-length encoding to …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe end byte index into <code>init_mask</code>.\nReturns the index of the first bit in <code>start..end</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the initialization state at the specified …\nWhether the first range is initialized.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the next chunk we will return is initialized. If …\nChecks whether the <code>range</code> is entirely initialized.\nChecks whether the <code>range</code> is entirely initialized.\nMaterializes this mask’s blocks when the mask is lazy.\nCreates a run-length encoding of the initialization mask; …\nReturns an iterator, yielding a range of byte indexes for …\nThe lengths of ranges that are run-length encoded. The …\nSets a specified range to a value. If the range is …\nThe current byte index into <code>init_mask</code>.\nWhether the lazy init mask is fully initialized or …\nA partial, owned list of provenance to transfer into …\nStores the provenance information of pointers stored in …\nApplies a provenance copy. The affected range, as defined …\nProvenance in this map only applies to the given single …\nRemoves all provenance inside the given range. If there is …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe caller must guarantee that the given provenance list …\nGet the provenance of a single byte.\nCheck if here is ptr-sized provenance at the given index. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nYields all the provenances stored in this map.\nGive access to the ptr-sized provenances (which can also …\n<code>Provenance</code> in this map applies from the given offset for …\nReturns whether this allocation has provenance overlapping …\nReturns all byte-wise provenance in the given range.\nReturns all ptr-sized provenance in the given range. If …\nABI-incompatible argument types.\nABI-incompatible return types.\nThe accessed pointer did not have proper alignment.\nThe address space (of the target) is full.\nUsed a pointer with bad alignment.\nAbort in case errors are already reported.\nOverflow in arithmetic that may not overflow.\nDetails of an access to uninitialized bytes / bad pointer …\nThe access occurred with a place that was based on a …\nA slice/array index projection went out-of-bounds.\nDetails of which pointer is not aligned.\nDetails of why a pointer had to be in-bounds.\nA custom (free-form) fluent-translated error, created by …\nUsing an integer as a pointer in the wrong way.\nWorking with a local that is not currently live.\nTrying to access the data behind a function pointer.\nTrying to access the data behind a vtable pointer.\nSomething was divided by 0 (x / 0).\nSigned division overflowed (INT_MIN / -1).\nContains the error value\nContains the error value\nContains the error value\nContains the error value\n<code>Ok(Err(ty))</code> indicates the constant was fine, but the …\nAccessing an unsupported extern static.\nExtern type field with an indeterminate offset.\nAn error occurred during FnAbi computation: the passed –…\nGuard type that panics on drop.\nNone of the above – generic/unspecific inbounds test.\nPackages the kind of error we got from the const code …\nThe result type used by the interpreter. This is a newtype …\nThe compiler got an interrupt signal (a user ran out of …\nUsing a non-boolean <code>u8</code> as bool.\nUsing a non-character <code>u32</code> as character.\nUsing a pointer-not-to-a-function as function pointer.\nInvalid metadata in a wide pointer\nTrying to set discriminant to the niched variant, but the …\nThe program was invalid (ill-typed, bad MIR, not …\nError information for when the program we executed turned …\nUsing a string that is not valid UTF-8,\nThe tag of an enum does not encode an actual discriminant.\nUsing uninitialized data where it is not allowed.\nUsing a pointer-not-to-a-vtable as vtable pointer.\nUsing a vtable for the wrong trait.\nAn error occurred during layout computation.\nStop execution for a machine-controlled reason. This is …\nA trait for machine-specific errors (or other “machine …\nWe are access memory.\nThere is not enough memory (on the host) to perform an …\nInformation about a misaligned pointer.\nWe are doing pointer offset_from.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nOverwriting parts of a pointer; without knowing absolute …\nOverflowing inbounds pointer arithmetic.\nWe are doing pointer arithmetic.\nUsed a pointer outside the bounds it is valid for.\nUsing a pointer after it got freed.\nAttempting to read or copy parts of a pointer to somewhere …\nEncountered a pointer where we needed an integer.\nSomething was “remainded” by 0 (x % 0).\nSigned remainder overflowed (INT_MIN % -1).\nAlready reported an error for this evaluation, and the …\nThe program exhausted the interpreter’s resources …\nError information for when the program exhausted the …\nInformation about a size mismatch.\nData size is not equal to target size.\nShift by too much.\nSize of a <code>[T]</code> is too big\nThe stack grew too big.\nAccessing thread local statics\nSize of a DST is too big\nDon’t emit an error, the evaluation failed because the …\nResolution can fail if we are in a too generic context.\nFree-form case. Only for errors that are never caught! …\nThe program caused undefined behavior.\nError information for when the program caused Undefined …\nAn uninhabited enum variant is projected.\nA discriminant of an uninhabited enum variant is written.\nUnreachable code was executed.\nUnsized local variables.\nFree-form case. Only for errors that are never caught! …\nThe program did something the interpreter does not support …\nError information for when the program did something that …\nReading a C string that does not end within its allocation.\nValidation error.\nWriting to read-only memory.\nRange of the original memory access.\nAdd diagnostic arguments by passing name and value pairs …\nReturns success if both <code>self</code> and <code>other</code> succeed, while …\nRange of the bad memory that was encountered. (Might not …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe diagnostic message for this error\nDiscard the error information in this result. Only use …\nSome errors do string formatting even if the error is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLook at the <code>Result</code> wrapped inside of this. Must only be …\nThe vtable that was expected at the point in MIR that it …\nThe size of the memory range that was expected to be …\nThe size of the memory range that was expected to be …\nThe vtable that was actually referenced by the wide …\nThe vtable that was expected at the point in MIR that it …\nThe vtable that was actually referenced by the wide …\nThe type of provenance in the compile-time interpreter. …\nSays whether the <code>offset</code> field of <code>Pointer</code>s with this …\nRepresents a pointer in the Miri engine.\nThis trait abstracts over the kind of provenance that is …\nReturns the absolute address the pointer points to. Only …\nReturns the <code>AllocId</code> of this provenance.\nReturns an immutable version of this provenance.\nReturns a “shared reference” (but not necessarily …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDetermines how a pointer should be printed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a pointer to the given address, with invalid …\nIf <code>OFFSET_IS_ADDR == false</code>, provenance must always be able …\nReturns whether this provenance is immutable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain the constituents of this pointer. Not that the …\nConvert this pointer that <em>might</em> have a provenance into a …\nDefines the ‘join’ of provenance: what happens when …\nReturns whether this provenance is derived from a shared …\nThe raw bytes of a simple value.\nA pointer.\nA <code>Scalar</code> represents an immediate, primitive value existing …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCreate a Scalar from a pointer with an <code>Option&lt;_&gt;</code> …\nCalls <code>U::from(self)</code>.\nThis throws UB (instead of ICEing) on a size mismatch …\nThis is almost certainly not the method you want!  You …\nConverts the scalar to produce an <code>i128</code>. Fails if the …\nConverts the scalar to produce an <code>i16</code>. Fails if the scalar …\nConverts the scalar to produce an <code>i32</code>. Fails if the scalar …\nConverts the scalar to produce an <code>i64</code>. Fails if the scalar …\nConverts the scalar to produce an <code>i8</code>. Fails if the scalar …\nConverts the scalar to produce a signed integer of the …\nConverts the scalar to produce a machine-pointer-sized …\nConverts the scalar to produce a machine-pointer-sized …\nConverts the scalar to produce a <code>u128</code>. Fails if the scalar …\nConverts the scalar to produce a <code>u16</code>. Fails if the scalar …\nConverts the scalar to produce a <code>u32</code>. Fails if the scalar …\nConverts the scalar to produce a <code>u64</code>. Fails if the scalar …\nConverts the scalar to produce a <code>u8</code>. Fails if the scalar …\nConverts the scalar to produce an unsigned integer of the …\nFundamental scalar-to-int (cast) operation. Many …\nThere will be exactly one instance of the given MonoItem. …\nDescribes how a monomorphization will be instantiated in …\nSpecifies the linkage type for a <code>MonoItem</code>.\nEach codegen unit containing a reference to the given …\nAuxiliary info about a <code>MonoItem</code>.\nCGU names should fulfill the following requirements:\nSame as <code>CodegenUnit::build_cgu_name()</code> but will never …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the item’s <code>DefId</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA cached copy of the result of <code>MonoItem::instantiation_mode</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if this is CGU is used to hold code coverage …\nReturns <code>true</code> if this instance is instantiable - whether it …\nReturns <code>true</code> if the mono item is user-defined (i.e. not …\nReturns the item’s <code>CrateNum</code>\nMarks this CGU as the one used to contain code coverage …\nA name for this CGU. Incremental compilation requires that …\nShould only be called if <code>compute_size_estimate</code> has …\nA cached copy of the result of <code>MonoItem::size_estimate</code>.\nIn some compilation scenarios we may decide to take …\nThis struct represents a patch to MIR, which can add new …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAlignment for lining up comments following MIR statements\nWe just finished dumping the control flow graph. This is …\nWe just dumped the given statement or terminator.\nWe just dumped the terminator for a block but not the …\nNumber of bytes to print per allocation hex dump line.\nWe are about to start dumping the given basic block.\nWe have not started dumping the control flow graph, but we …\nWe are just about to dump the given statement or …\nAn indication of where we are in the control flow graph. …\nCosmetic options for pretty-printing the MIR contents, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAttempts to open a file where we should dump a given MIR …\nDumps the size and metadata and content of an allocation …\nIf the session is properly configured, dumps a …\nIf the session is properly configured, dumps a …\nReturns the path to the filename where we should dump a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate the default set of MIR pretty-printing options from …\nCalc converted u64 decimal into hex and return its length …\nWhether to include extra comments, like span info. From …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>prefix</code> argument allows callers to add an arbitrary …\nPrints the line start address and returns the new line …\nFind all <code>AllocId</code>s mentioned (recursively) in the MIR body …\nWrite out a human-readable textual representation for the …\nAfter we print the main statement, we sometimes dump extra …\nWrite out a human-readable textual representation for the …\nWrite out a human-readable textual representation of the …\nWrite out a human-readable textual representation for the …\nPrints local variables in a scope tree.\nA “boring” constraint (caused by the given location) …\nContains the function type if available.\nA constraint that came from checking the body of a closure.\nIndicates an outlives-constraint between a type or between …\nThe subject of a <code>ClosureOutlivesRequirement</code> – that is, …\nRepresents a <code>ty::Ty</code> for use in <code>ClosureOutlivesSubject</code>.\nAfter we borrow check a closure, we are left with various …\nThe result of the <code>mir_const_qualif</code> query.\nOutlives-constraints can be categorized to determine …\nThe layout of coroutine state.\nSummarizes coverage IDs inserted by the <code>InstrumentCoverage</code> …\nThe constituent parts of a mir constant of kind ADT or …\nAn internal constraint derived from an illegal universe …\nA constraint that doesn’t correspond to anything the …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nA constraint from a user-written predicate with the …\nSubject is a free region from the closure. Indicates a …\nSubject is a type, typically a type parameter, but could …\nA constraint that came from a usage of a variable (e.g. in …\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nAll regions of <code>ty</code> must be of kind <code>ReVar</code> and must represent …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAll the opaque types that are restricted to concrete types …\nThe name for debuginfo.\nThe type of every local stored inside the coroutine.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nWhether the local should be ignored for trait bound …\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCoverage codegen needs to know the highest counter ID that …\nThe number of external regions defined on the closure. In …\nRequirements between the various free regions defined in …\nSource info corresponding to the local in the original MIR …\nWhich saved locals are storage-live at the same time. …\nWhich of the above fields are in each variant. Note that …\nThe source that led to each variant being created …\nWhether this cast is a coercion that was automatically …\nWhether this is an unsizing coercion and if yes, this …\nThese indices are generated by slice patterns. Easiest to …\n“Downcast” to a variant of an enum or a coroutine.\nA field (e.g., <code>f</code> in <code>_1.f</code>) is one variant of <code>ProjectionElem</code>…\nIndex into a slice/array.\nLike an explicit cast from an opaque type to a concrete …\nAlias for projections as they appear in <code>UserTypeProjection</code>…\nA statement in a basic block, including information about …\nThese indices are generated by slice patterns.\nA <code>Subtype(T)</code> projection is applied to any …\nIf this place represents a local variable like <code>_X</code> with no …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this <code>Place</code> contains a <code>Deref</code> projection.\nReturns <code>true</code> if this <code>Place</code>’s first projection is <code>Deref</code>.\nIterate over the projections in evaluation order, i.e., …\nFinds the innermost <code>Local</code> from this <code>Place</code>, <em>if</em> it is either …\nChanges a statement to a nop. This is both faster than …\nGenerates a new place by appending <code>more_projections</code> to the …\nChanges a statement to a nop and returns the original …\nCounting backwards from end? This is always false when …\nWhether <code>to</code> counts from the start or end of the array/slice.\nThe thing being indexed must be at least this long – …\nindex or -index (in Python terms), depending on from_end\nUnwinding is just not possible given the ABI of this …\nThe <code>+</code> operator (addition)\nLike <code>Add</code>, but with UB on overflow.  (Integers only.)\nLike <code>Add</code>, but returns <code>(T, bool)</code> of both the wrapped result …\nThe second field is the variant index. It’s equal to 0 …\nCreates an aggregate value, like a tuple or struct.\nReturns the minimum alignment of a type\nThe MIR used for most analysis.\nSee <code>MirPhase::Analysis</code>.\nThe type is of the element\nThe coercion was manually written by the user with an <code>as</code> …\nEncodes a user’s type ascription. These need to be …\nThe <code>asm!</code> macro\nEvaluates the operand, which must have type <code>bool</code>. If it is …\nInformation about an assertion failure.\nType for MIR <code>Assert</code> terminator error messages.\nAssign statements roughly correspond to an assignment in …\nDenotes a call to the intrinsic function <code>assume</code>.\n<code>Offset</code> has the same semantics as <code>offset</code>, except that the …\nThe <code>&amp;</code> operator (bitwise and)\nThe <code>|</code> operator (bitwise or)\nThe <code>^</code> operator (bitwise xor)\nThe MIR that is generated by MIR building.\nRoughly speaking, evaluates the <code>func</code> operand and the …\nRepresents how a <code>TerminatorKind::Call</code> was constructed. …\nPerforms essentially all of the casts that can be …\nCleanups to be done.\nData must be immutable but not aliasable. This kind of …\nThe <code>&lt;=&gt;</code> operator (three-way comparison, like <code>Ord::cmp</code>)\nRepresents how a <code>CastKind::PointerCoercion</code> was constructed.\nInstructs the const eval interpreter to increment a …\nConstants are already semantically values, and remain …\nThese indices are generated by slice patterns. Easiest to …\nThese indices are generated by slice patterns. Easiest to …\nNo action is to be taken. Continue unwinding.\nCreates a value by loading the given place.\nA CopyForDeref is equivalent to a read from a place at the …\nDenotes a call to the intrinsic function …\nIndicates the end of dropping a coroutine.\nCarries control-flow-sensitive information injected by …\nA shared (deep) borrow. Data must be immutable and is …\nA “normal” retag.\nDeinitializes the place.\nComputes the discriminant of the place, returning it as an …\nThe <code>/</code> operator (division)\n“Downcast” to a variant of an enum or a coroutine.\n“Downcast” to a variant of an enum or a coroutine.\nThe behavior of this statement differs significantly …\nThe <code>==</code> operator (equality)\nAn immutable, aliasable borrow that is discarded after …\nThis represents all the reading that a pattern match may …\nThe <code>FakeReadCause</code> describes the type of pattern why a …\nA block where control flow only ever takes one real path, …\nA terminator for blocks that only take one path in …\nA field (e.g., <code>f</code> in <code>_1.f</code>) is one variant of <code>ProjectionElem</code>…\nA field (e.g., <code>f</code> in <code>_1.f</code>) is one variant of <code>ProjectionElem</code>…\nThe initial retag of arguments when entering a function.\nA fake read of the RefWithinGuard version of a …\nIf we have an index expression like\nOfficially, the semantics of\nInject a fake read of the borrowed input at the end of …\n<code>let x: !; match x {}</code> doesn’t generate any read of x so …\nThe <code>&gt;=</code> operator (greater than or equal to)\nBlock has one successor; we continue execution there.\nThe <code>&gt;</code> operator (greater than)\nThe coercion was automatically inserted by the compiler.\nWe were already cleaning up for an ongoing unwind, and a …\nIndex into a slice/array.\nIndex into a slice/array.\nIn addition to the semantic changes, beginning with this …\nBlock ends with an inline assembly block. This is a …\nThe macro that an inline assembly block was created by\nDenotes a call to an intrinsic that does not require an …\nThe <code>&lt;=</code> operator (less than or equal to)\nYields the length of the place, as a <code>usize</code>.\nThe <code>&lt;</code> operator (less than)\nThis was from comparison generated by a match, used by …\nRepresents the “flavors” of MIR.\nOther types of desugaring that did not come from the HIR, …\nCreates a value by performing loading the place, just like …\nThe <code>*</code> operator (multiplication)\nLike <code>Mul</code>, but with UB on overflow.  (Integers only.)\nLike <code>Mul</code>, but returns <code>(T, bool)</code> of both the wrapped result …\nData is mutable and not aliasable.\nThe <code>naked_asm!</code> macro\nThe <code>!=</code> operator (not equal to)\nThe <code>-</code> operator for negation\nNo-op. Useful for deleting instructions without affecting …\nNormal function call, no special source\nThe <code>!</code> operator for logical inversion\nComputes a value as described by the operation.\nThe <code>ptr.offset</code> operator\nReturns the offset of a field\nLike an explicit cast from an opaque type to a concrete …\nLike an explicit cast from an opaque type to a concrete …\nAn operand in MIR represents a “value” in Rust, the …\nThis came from something such as <code>a &gt; b</code> or <code>a + b</code>. In THIR, …\nPlaces roughly correspond to a “location in memory.” …\nAlias for projections as they appear in places, where the …\nThis statement exists to preserve a trace of a scrutinee …\nPointer related casts that are done by coercions. Note …\nAn exposing pointer to address cast. A cast between a …\nAn address-to-pointer cast that picks up an exposed …\nBeginning in this phase, the following variants are …\nBeginning with this phase, the following variant is …\nGets the metadata <code>M</code> from a <code>*const</code>/<code>*mut</code>/<code>&amp;</code>/<code>&amp;mut</code> to …\nRetagging raw pointers.\nCreates a raw pointer with the indicated mutability to the …\nConstruct a raw pointer from the data pointer and metadata.\nCreates a reference of the indicated kind to the place.\nThe <code>%</code> operator (modulus)\nCreates an array where each element is the value of the …\nRetag references in the given place, ensuring they got …\nDescribes what kind of retag is to be performed.\nReturns from the function.\nThe MIR used for CTFE, optimizations, and codegen.\nSee <code>MirPhase::Runtime</code>.\nThe various kinds of rvalues that can appear in MIR.\nWrite the discriminant for a variant to the enum Place.\nA shared shallow borrow. The immediately borrowed place …\nTransmutes a <code>*mut u8</code> into shallow-initialized <code>Box&lt;T&gt;</code>.\nData must be immutable and is aliasable.\nThe <code>&lt;&lt;</code> operator (shift left)\nLike <code>Shl</code>, but is UB if the RHS &gt;= LHS::BITS or RHS &lt; 0\nThe <code>&gt;&gt;</code> operator (shift right)\nLike <code>Shl</code>, but is UB if the RHS &gt;= LHS::BITS or RHS &lt; 0\nReturns the size of a value of that type\nThe various kinds of statements that can appear in MIR.\nSee <code>StorageLive</code> above.\n<code>StorageLive</code> and <code>StorageDead</code> statements mark the live range …\nThe <code>-</code> operator (subtraction)\nLike <code>Sub</code>, but with UB on overflow.  (Integers only.)\nLike <code>Sub</code>, but returns <code>(T, bool)</code> of both the wrapped result …\nThese indices are generated by slice patterns.\nThese indices are generated by slice patterns.\nA <code>Subtype(T)</code> projection is applied to any …\nA <code>Subtype(T)</code> projection is applied to any …\nSwitches based on the computed value.\nTail call.\nTerminates the execution if unwind happens.\nThe various kinds of terminators, representing ways of …\nCreates a pointer/reference to the given thread local.\nReinterpret the bits of the input as a different type.\nRetag preparing for a two-phase borrow.\nThis borrow arose from method-call auto-ref. (i.e., …\nReturns whether we should perform some UB-checking at …\nExactly like <code>BinaryOp</code>, but less operands.\nIndicates a terminator that can never be reached.\nTriggers undefined behavior if unwind happens.\nAction to be taken when a stack unwind happens.\nIndicates that the landing pad is finished and that the …\nIndicates that the landing pad is finished and that the …\nThe reason we are terminating the process during unwinding.\nYields the operand unchanged\nMarks a suspend point.\nAdds a new target to the switch. But You cannot add an …\nReturns a slice with all possible jump targets (including …")