searchState.loadedDescShard("rustc_middle", 2, "This function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nA trait object, all of whose components are markers (e.g., …\nA trait object, all of whose components are markers (e.g., …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nA AND B\nA AND B\nUninhabited when a const value is non-zero. This occurs …\nUninhabited when a const value is non-zero. This occurs …\nUninhabited\nUninhabited\nInhabited if some generic type is inhabited. These are …\nInhabited if some generic type is inhabited. These are …\nUninhabited if within a certain module. This occurs when …\nUninhabited if within a certain module. This occurs when …\nInhabited if either we don’t know the hidden type or we …\nInhabited if either we don’t know the hidden type or we …\nA OR B\nA OR B\nThis type alias specifies the type returned from query …\nInhabited\nInhabited\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nA AND B\nA AND B\nUninhabited when a const value is non-zero. This occurs …\nUninhabited when a const value is non-zero. This occurs …\nUninhabited\nUninhabited\nInhabited if some generic type is inhabited. These are …\nInhabited if some generic type is inhabited. These are …\nUninhabited if within a certain module. This occurs when …\nUninhabited if within a certain module. This occurs when …\nInhabited if either we don’t know the hidden type or we …\nInhabited if either we don’t know the hidden type or we …\nA OR B\nA OR B\nThis type alias specifies the type returned from query …\nInhabited\nInhabited\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThe size at which the <code>large_assignments</code> lint starts being …\nThe size at which the <code>large_assignments</code> lint starts being …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThe maximum recursion limit for potentially infinitely …\nThe maximum recursion limit for potentially infinitely …\nThe maximum length of types during monomorphization.\nThe maximum length of types during monomorphization.\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThe absolute value of the resultant constant.\nThe absolute value of the resultant constant.\nIf the constant is negative.\nIf the constant is negative.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThe type of the constant.\nThe type of the constant.\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nIf Some(T), a type autoderef reported an error on.\nIf Some(T), a type autoderef reported an error on.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nIf <code>true</code>, <code>steps</code> has been truncated due to reaching the …\nIf <code>true</code>, <code>steps</code> has been truncated due to reaching the …\nThe valid autoderef steps that could be found.\nThe valid autoderef steps that could be found.\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\nAn intrinsic <code>fn</code> item (with <code>&quot;rust-intrinsic&quot;</code> or …\nAn intrinsic <code>fn</code> item (with <code>&quot;rust-intrinsic&quot;</code> or …\nA user-defined callable item.\nA user-defined callable item.\nThis type alias specifies the type returned from query …\n<code>fn()</code> pointer where the function itself cannot be turned …\n<code>fn()</code> pointer where the function itself cannot be turned …\nCompiler-generated accessor for thread locals which …\nCompiler-generated accessor for thread locals which …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\nAn intrinsic <code>fn</code> item (with <code>&quot;rust-intrinsic&quot;</code> or …\nAn intrinsic <code>fn</code> item (with <code>&quot;rust-intrinsic&quot;</code> or …\nA user-defined callable item.\nA user-defined callable item.\nThis type alias specifies the type returned from query …\n<code>fn()</code> pointer where the function itself cannot be turned …\n<code>fn()</code> pointer where the function itself cannot be turned …\nCompiler-generated accessor for thread locals which …\nCompiler-generated accessor for thread locals which …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis packs both caller bounds and the reveal enum into one …\nThis packs both caller bounds and the reveal enum into one …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis packs both caller bounds and the reveal enum into one …\nThis packs both caller bounds and the reveal enum into one …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\n<code>&amp;str</code> gives a consistent ordering, which ensures …\n<code>&amp;str</code> gives a consistent ordering, which ensures …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\nAn intrinsic <code>fn</code> item (with <code>&quot;rust-intrinsic&quot;</code> or …\nA user-defined callable item.\nThis type alias specifies the type returned from query …\n<code>fn()</code> pointer where the function itself cannot be turned …\nCompiler-generated accessor for thread locals which …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nNo value.\nNo value.\nThis type alias specifies the type returned from query …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nA value not representable by the other variants; needs to …\nA value not representable by the other variants; needs to …\nThis type alias specifies the type returned from query …\nUsed for types with <code>layout::abi::Scalar</code> ABI.\nUsed for types with <code>layout::abi::Scalar</code> ABI.\nUsed for references to unsized types with slice tail.\nUsed for references to unsized types with slice tail.\nOnly for ZSTs.\nOnly for ZSTs.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThe backing memory of the value. May contain more memory …\nThe allocation storing the slice contents. This always …\nThe metadata field of the reference. This is a “target …\nOffset into <code>alloc</code>\nThe backing memory of the value. May contain more memory …\nThe allocation storing the slice contents. This always …\nThe metadata field of the reference. This is a “target …\nOffset into <code>alloc</code>\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nVisible everywhere (including in other crates).\nVisible everywhere (including in other crates).\nVisible only in the given crate-local module.\nVisible only in the given crate-local module.\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nThis type alias specifies the type returned from query …\nThis function takes <code>ProvidedValue</code> and coverts it to an …\nAn ADT constructor, e.g. <code>Foo {x: 1, y: 2}</code>.\nThe <code>&amp;&amp;</code> operator.\nA <code>match</code> arm.\nAn array, e.g. <code>[a, b, c, d]</code>.\nFixed match against an array; irrefutable.\nAn assignment: <code>lhs = rhs</code>.\nA <em>non-overloaded</em> operation assignment, e.g. <code>lhs += rhs</code>.\nA <code>become</code> expression.\nA <em>non-overloaded</em> binary operation.\n<code>x</code>, <code>ref x</code>, <code>x @ P</code>, etc.\nA block.\nA borrow, e.g. <code>&amp;arg</code>.\nA <code>box &lt;value&gt;</code> expression.\nA <code>break</code> expression.\nA compiler-generated unsafe block\nA function call. Method calls and overloaded operators are …\nA cast: <code>&lt;source&gt; as &lt;type&gt;</code>. The type we cast to is the …\nA closure definition.\nAn inline <code>const</code> block, e.g. <code>const {}</code>.\nOne of the following:\nA <code>continue</code> expression.\nA <em>non-overloaded</em> dereference.\n<code>box P</code>, <code>&amp;P</code>, <code>&amp;mut P</code>, etc.\nDeref pattern, written <code>box P</code> for now.\nAn error has been encountered during lowering. We probably …\nAn <code>unsafe</code> block. The <code>HirId</code> is the ID of the block.\nA THIR expression.\nAn expression with a trailing semicolon.\nAccess to a field of a struct, a tuple, an union, or an …\nRepresents the association of a field identifier and an …\nAn <code>if</code> expression.\nA <em>non-overloaded</em> indexing operation.\nInline assembly, i.e. <code>asm!()</code>.\nInline constant found while lowering a pattern.\n<code>(...)</code>, <code>Foo(...)</code>, <code>Foo{...}</code>, or <code>Foo</code>, where <code>Foo</code> is a variant …\nA <code>let</code> binding.\nSpecial expression representing the <code>let</code> part of an <code>if let</code> …\nA literal.\nA logical operation. This is distinct from <code>BinaryOp</code> because\nA <code>loop</code> expression.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nA <code>match</code> expression.\nAssociated constants and named constants\nA never pattern <code>!</code>.\nA coercion from <code>!</code> to any type.\nFor literals that don’t correspond to anything in the HIR\nNo value.\nField offset (<code>offset_of!</code>)\nThe <code>||</code> operator.\nAn or-pattern, e.g. <code>p | q</code>. Invariant: <code>pats.len() &gt;= 2</code>.\nDescription of a type-checked function parameter.\nA range pattern. The boundaries must be of the same type …\nA (possibly open) boundary of a range pattern. If present, …\nA type ascription on a place.\nA pointer coercion. More information can be found in …\nA <code>&amp;raw [const|mut] $place_expr</code> raw borrow resulting in …\nAn array literal constructed from one repeated element, …\nA <code>return</code> expression.\n<code>Scope</code>s are used to explicitly mark destruction scopes, and …\nMatches against a slice, checking the length and …\nSome value of type <code>T</code>.\nA literal containing the address of a <code>static</code>.\nA container for a THIR body.\nAn expression taking a reference to a thread local.\nA tuple, e.g. <code>(a, b, c, d)</code>.\nA <em>non-overloaded</em> unary operation. Note that here the deref …\nUsed to represent upvars mentioned in a closure/coroutine\nForces its contents to be treated as a value expression, …\nA type ascription on a value, e.g. <code>type_ascribe!(42, i32)</code> …\nA local variable.\n<code>Foo(...)</code> or <code>Foo{...}</code> or <code>Foo</code>, where <code>Foo</code> is a variant name …\nA wildcard pattern: <code>_</code>.\nA <code>yield</code> expression.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nA literal of a ZST type.\nThe ADT we’re constructing.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nThe base, e.g. <code>Foo {x: 1, .. base}</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCall <code>f</code> on every “binding” in a pattern, e.g., on <code>a</code> in …\nThe trailing expression of the block, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nMust not be <code>NegInfinity</code>.\nHirId for lints.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this range covers the full extent of possible …\nWhether this a never pattern.\nkind of expression\nMust not be <code>PosInfinity</code>.\nThe pattern that appears in the parameter list, or None …\nWhether the pattern has a <code>PatKind::Error</code> nested within.\nWhether this param is <code>self</code>, and how it is bound.\nThe span of the block, including the opening braces, the …\nspan of the expression in the source\nThe statements in the blocK.\nWhether the block itself has a label. Used by <code>label: {}</code> …\nThe lifetime of this expression if it should be spilled …\nThe possibly inferred type.\nThe type of this expression\nSpan of the explicitly provided type, or None if inferred …\nOptional user-given args: for something like …\nVariance to use when relating the <code>user_ty</code> to the <strong>type of </strong>…\nThe variant of the ADT.\nWalk the pattern in left-to-right order.\nWalk the pattern in left-to-right order.\nThe arguments passed to the function.\nDefId of the closure/coroutine\nThe span of the function, without the dot and receiver …\nWhether this is from an overloaded operator rather than a …\nThe function itself.\nWhether this coercion is written with an <code>as</code> cast in the …\nThis can be a named (<code>.foo</code>) or unnamed (<code>.0</code>) field.\nThe type of the function. This is often a <code>FnDef</code> or a <code>FnPtr</code>.\nType that the user gave to this expression\nType that the user gave to this expression\nHirId of the root variable\nVariant containing the field.\nLocalDefId of the constant, we need this so that we have a …\nIs this the leftmost occurrence of the binding, i.e., is …\nIf the inline constant is used in a range pattern, this …\n<code>let pat: ty = &lt;INIT&gt; else { &lt;ELSE&gt; }</code>\nThe expression being evaluated in this statement.\nThe scope for the initialization itself; might be used as …\n<code>let pat: ty = &lt;INIT&gt;</code>\nThe lint level for this <code>let</code> statement.\n<code>let &lt;PAT&gt; = ...</code>\nThe scope for variables bound in this <code>let</code>; it covers this …\nThe scope for this statement; may be used as lifetime of …\nSpan of the <code>let &lt;PAT&gt; = &lt;INIT&gt;</code> part.\nAt codegen time, all monomorphic projections will succeed. …\nAmbiguity can happen when monomorphizing during trans …\nVarious cases where expressions must be <code>Sized</code> / <code>Copy</code> / etc.\nAssociated const.\ne.g., <code>async fn foo(&amp;self)</code>\nBlock implicit return\nSuccessful resolution for a builtin impl.\nDerived obligation (i.e. theoretical <code>where</code> clause) on a …\nChecking that the bounds of a trait’s associated type …\nThese are the error cases for <code>codegen_select_candidate</code>.\nObligation incurred due to a coercion.\nError derived when checking an impl item is compatible with\nError for a <code>ConstArgHasType</code> goal\nRequirement for a <code>const N: Ty</code> to implement <code>Ty: ConstParamTy</code>\nConstant expressions must be sized.\nUse of a const ctor\nObligations to prove that a <code>std::ops::Drop</code> impl is not …\nContains the error value\nChecking that this expression can be assigned to its …\nTypes of fields (other than the last, except for packed …\nCall to a const fn\nDerived obligation refined to point at a specific argument …\nGAT\ne.g., <code>fn foo&lt;A&gt;()</code>\nComputing common supertype in an if expression\nComputing common supertype of an if expression with no …\nDerived obligation (i.e. <code>where</code> clause) on an user-provided …\nGiven the successful resolution of an obligation, the …\nIdentifies a particular impl in the source, along with a …\nInline asm operand type must be <code>Sized</code>.\nIntrinsic has wrong type\nWhether a value can be extracted into a const. Used for …\nlanguage function has wrong type\nA let else block does not diverge\n<code>main</code> has wrong type\nComputing common supertype in the arms of a match …\nFrom <code>match_impl</code>. The cause for us having to match an impl, …\nMethod has something illegal.\nMethod receiver\nReasons a method might not be dyn-compatible.\nSome built-in impl we don’t need to differentiate. This …\nNot well classified or should be obvious from the span.\nA given constant couldn’t be evaluated.\nA built-in impl for trait objects. The index is only used …\nA type like <code>Box&lt;Foo&lt;&#39;a&gt; + &#39;b&gt;</code> is WF only if <code>&#39;b: &#39;a</code>.\nThe reason why we incurred this obligation; used for error …\nContains the success value\nOpaque return type of this function\nComputing an opaque type’s hidden type caused an error …\nExceeded the recursion depth during type projection.\nUse the type of the parameter of the provided function. We …\nSuccessful resolution to an obligation provided by the …\nType error arising from type checking a pattern against an …\nA type like <code>&amp;&#39;a T</code> is WF only if <code>T: &#39;a</code>.\ne.g., <code>fn foo(&amp;self) -&gt; impl Sized</code>\ne.g., <code>fn foo(&amp;self, x: Self)</code>\ne.g., <code>fn foo(&amp;self) -&gt; Self</code>\n<code>[expr; N]</code> requires <code>type_of(expr): Copy</code>.\n<code>return</code> with no expression\n<code>return</code> with an expression\nDepending on the stage of compilation, we want projection …\nWhen performing resolution, it is typically the case that …\n<code>static</code> items must have <code>Sync</code> type.\nAfter a closure impl has selected, its “outputs” were …\nArgument type must be <code>Sized</code>.\nReturn type of a call expression must be <code>Sized</code>.\nCaptured closure type must be <code>Sized</code>.\nTypes live across coroutine yields must be <code>Sized</code>.\nReturn type must be <code>Sized</code>.\n<code>Self: Sized</code> declared on the trait.\nYield type must be <code>Sized</code>.\nA slice or array is WF only if <code>T: Sized</code>.\n<code>start</code> has wrong type\ne.g., <code>fn foo()</code>\n<code>S { ... }</code> must be <code>Sized</code>.\nSupertrait reference references <code>Self</code> an in illegal location\nThe trait pointed by <code>DefId</code> is dyn-incompatible.\nA built-in implementation of <code>Upcast</code> for trait objects to …\n#[feature(trivial_bounds)] is not enabled\nA tuple is WF only if its middle elements are <code>Sized</code>.\n<code>(x1, .., xn)</code> must be <code>Sized</code>.\nUnsizing a tuple like <code>(A, B, ..., X)</code> to <code>(A, B, ..., Y)</code> if <code>X</code>…\nUse the type of the provided definition.\nObligations emitted during the normalization of a weak …\nthe method’s receiver (<code>self</code> argument) can’t be …\nThe trait is not implemented.\nThis can trigger when we probe for the source of a <code>&#39;static</code> …\nImplSource identifying a particular impl.\nAt type-checking time, we refuse to project any associated …\nType of each variable must be <code>Sized</code>.\nWell-formed checking. If a <code>WellFormedLoc</code> is provided, then …\nDerived obligation for WF goals.\nThe ‘location’ at which we try to perform HIR-based wf …\nRepresents a clause that comes from a specific item. The …\nLike <code>WhereClause</code>, but also identifies the expression which …\ne.g., <code>fn foo(&amp;self) where Self: Clone</code>\nThe ID of the fn body that triggered this obligation. This …\n<code>None</code> for <code>ObligationCauseCode::Misc</code> (a common case, occurs ~…\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCreates a cause for obligations that are derived from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index of the derived predicate in the parent impl’s …\nThe <code>DefId</code> of the <code>impl</code> that gave rise to the <code>derived</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe parent trait had this cause.\nThe trait predicate of the parent obligation that led to …\nReturns the base obligation, ignoring derived obligations.\nReturns the base obligation and the base trait predicate, …\nExperimental types for the trait query interface. The …\nCandidate selection. See the rustc dev guide for more …\nThe node of the relevant argument in the function call.\nThe node of the function call.\nSpan of the statement/item in which the repeat expression …\nIf element is a <code>const fn</code> or const ctor we display a help …\nWhether the <code>Span</code> came from an expression or a type …\nThe obligation introduced by this argument.\nThe root expected type induced by a scrutinee or type …\nThe span of the scrutinee or type expression which caused …\nThe function to lookup the parameter in\nThe index of the parameter to use. Parameters are indexed …\nA set of constraints that need to be satisfied in order for\nResult of the …\nOutlives bounds are relationships between generic …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nTypes that could not be resolved: projections and params.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> if the type results from a dereference of a raw …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResult of the normalization.\nIf Some(T), a type autoderef reported an error on.\nTypes that are required to be alive in order for this type …\nIf, during the computation of the dtorck constraint, we …\nIf <code>true</code>, <code>steps</code> has been truncated due to reaching the …\nThe valid autoderef steps that could be found.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplementation of an <code>AsyncFn</code>-family trait by one of the …\nImplementation of the <code>AsyncFnKindHelper</code> helper trait, which\nImplementation of an <code>AsyncIterator</code> trait by one of the …\nA builtin implementation for some specific traits, used in …\nImplementation of a <code>Fn</code>-family trait by one of the …\nImplementation of <code>const Destruct</code>, optionally from a custom …\nImplementation of a <code>Coroutine</code> trait by one of the …\nEvaluation is known to be ambiguous – it <em>might</em> hold for …\nEvaluation failed because of recursion involving inference …\nEvaluation failed.\nEvaluation successful.\nEvaluation successful, but need to rerun because opaque …\nEvaluation successful, but there were unevaluated region …\nThe result of trait evaluation. The order is important …\nImplementation of a <code>Fn</code>-family trait by one of the anonymous\nImplementation of a <code>Future</code> trait by one of the coroutine …\nImplementation of an <code>Iterator</code> trait by one of the …\nMatching <code>dyn Trait</code> with a supertrait of <code>Trait</code>. The index …\nIndicates that trait evaluation caused overflow and in …\nThis is a trait matching with a projected type as <code>Self</code>, …\nThe selection process begins by considering all impls, …\nPerform trait upcasting coercion of <code>dyn Trait</code> to a …\nImplementation of transmutability trait.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this evaluation result is known to apply, …\nReturns <code>true</code> if this evaluation result is known to apply, …\n<code>false</code> if there are no <em>further</em> obligations.\nIf the self type is an alias type, e.g. an opaque type or …\nAt codegen time, all monomorphic projections will succeed. …\nWe failed due to ambiguity. This ambiguity can either be a …\nA builtin impl generated by the compiler. When adding a …\nTrait solving during coherence. There are a few notable …\nA candidate that is registered only during coherence to …\nContains the error value\nAdditional constraints returned on success.\nWhy a specific goal has to be proven.\nA user written impl.\nWe’re proving a where-bound of an impl.\nInstantiating a higher-ranked goal and re-proving it.\nWhy we failed to evaluate a goal.\nSome built-in impl we don’t need to differentiate. This …\nOrdinary trait solving, using everywhere except for …\nA built-in impl for trait objects. The index is only used …\nContains the success value\nWe gave up due to an overflow, most often by hitting the …\nAn assumption from the environment.\nOpaques that are defined in the inference context before a …\nDepending on the stage of compilation, we want projection …\nA built-in implementation of <code>Upcast</code> for trait objects to …\nUnsizing a tuple like <code>(A, B, ..., X)</code> to <code>(A, B, ..., Y)</code> if <code>X</code>…\nAt type-checking time, we refuse to project any associated …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAdditional constraints returned by this query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nData structure used to inspect trait solver behavior.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe added a goal to the <code>EvalCtxt</code> which will get proven the …\nWhen evaluating a goal we also store the original values …\nA call to …\nA call to <code>probe</code> while proving the current goal. This is …\nProbe entered when normalizing the self ty during …\nTry to unify an opaque type with an existing key in the …\nA self-contained computation during trait solving. This …\nWhat kind of probe we’re in. In case the probe …\nA trait goal was satisfied by an impl candidate.\nThe root inference context while proving a goal.\nLooking for param-env candidates that satisfy the trait …\nSome <code>data</code> together with information about how they relate …\nA candidate for proving a trait or alias-relate goal.\nTrying to normalize an alias by at least one step in …\nUsed in the probe that wraps normalizing the non-self type …\nDuring upcasting from some source object to target object …\nThe actual evaluation of the goal, always <code>ProbeKind::Root</code>.\nWhat happened inside of this probe in chronological order.\nChildren of a given impl, grouped into blanket/non-blanket …\nA per-trait graph of impls in specialization order. At the …\nInformation about the most specialized definition of an …\nA node in the specialization graph is either an impl or a …\nWhat kind of overlap check are we doing – this exists …\nThe 1.0 rules (either types fail to unify, or where …\nJust check for negative impls, not for “where clause not …\nFeature-gated test: Stable, <em>or</em> there is an explicit …\nWalk up the specialization ancestors of a given impl, …\nBlanket impls associated with the trait.\nThe “root” impls are found by looking up the trait’s …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe node in the specialization graph containing the …\nThe “top-most” (ie. least specialized) specialization …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this definition is known to not be further …\nTries to find the associated item that implements …\nThe associated item described by this <code>LeafDef</code>.\nFinds the bottom-most (ie. most specialized) definition of …\nImpls of the trait.\nThe parent of a given impl, which is the <code>DefId</code> of the …\nAll impls have a parent; the “root” impls have as …\nAlgebraic data types (ADT). For example: structures, …\nThe definition of a user-defined type, e.g., a <code>struct</code>, <code>enum</code>…\nA projection, opaque type, weak type alias, or inherent …\nSeparate from <code>ClauseKind::Projection</code> which is used for …\nA marker predicate that is always ambiguous. Used for …\nAn array with the given length. Written as <code>[T; N]</code>.\nInformation about an associated item\nA list of <code>ty::AssocItem</code>s in definition order that allows …\n<code>core::future::async_drop::async_drop_in_place::&lt;&#39;_, T&gt;</code>.\nE.g., <code>Send</code>.\nThe primitive boolean type. Written as <code>bool</code>.\nBound const variable, used only when preparing a trait …\nBound type variable, used to represent the <code>&#39;a</code> in …\nAn anonymous region parameter for a given fn (&amp;T)\nAnonymous region for the implicit env pointer parameter to …\nNamed region parameters for functions (a in &amp;’a T)\nThe fields of any kind of aggregate. Structs, tuples and …\nUpvar is captured by reference.\nUpvar is captured by value. This is always true when the …\nCaptures are represented using fields inside a structure. …\nA “canonicalized” type <code>V</code> is one where all free …\nRust actually has more than one category of type variables;\nCanonical user type annotation.\nMapping of type annotation indices to canonical user type …\nInformation about a canonical variable that is included …\nDescribes the “kind” of the canonical variable. This …\nA set of values corresponding to the canonical variables …\nPart of <code>MinCaptureInformationMap</code>; describes the capture …\nA composite describing a <code>Place</code> that is captured by a …\nThe primitive character type; holds a Unicode scalar value …\nA subset of predicates which can be assumed by the trait …\nProve a clause\nCompiler-generated <code>&lt;T as Clone&gt;::clone</code> implementation.\nThe anonymous type of a closure. Used to represent the …\nA closure can be modeled as a struct that looks like:\nStruct returned by <code>split()</code>.\nRepresents the various closure traits in the language. This\n<code>&lt;[FnMut/Fn closure] as FnOnce&gt;::call_once</code>.\n<code>T1</code> coerced to <code>T2</code>\nImagine you have a function <code>F: FnOnce(&amp;[T]) -&gt; R</code>, plus an …\nSome kind of const inference variable.\n<code>Type: const Trait</code>\nEnsures that a const generic argument to a parameter …\nConstants must be equal. The first component is the const …\nConstant initializer must evaluate successfully.\n<code>Type: ~const Trait</code>\nA type for representing any integer. Only used for …\nA <strong><code>const</code></strong> <strong>v</strong>ariable <strong>ID</strong>.\n<code>&lt;[FnMut/Fn coroutine-closure] as FnOnce&gt;::call_once</code>\nThe anonymous type of a coroutine. Used to represent the …\nSimilar to <code>ClosureArgs</code>; see the above documentation for …\nThe anonymous type of a closure. Used to represent the …\nSee docs for explanation of how each argument is used.\nA type representing the types stored inside a coroutine. …\nA map for the local crate mapping each type to a vector of …\nThe crate outlives map is computed during typeck and …\nThe crate variances map is computed during typeck and …\nThis is used to get a reference to a <code>GlobalCtxt</code> if one is …\nA De Bruijn index is a standard means of representing …\nParameter attributes that can only be determined by …\nThe constituent parts of a type level constant of kind ADT …\n<code>core::ptr::drop_in_place::&lt;T&gt;</code>.\nAn unsized <code>dyn Trait</code> object\nTrait must be dyn-compatible.\nSpecifies how a trait object is represented.\nA sized <code>dyn* Trait</code> object\nA trait object. Written as …\nEffect variable <code>&#39;?E</code>.\nInfer the value of the effect.\nAn <strong>effect</strong> <strong>v</strong>ariable <strong>ID</strong>.\nA placeholder for a const which could not be computed; …\nA placeholder for a type which could not be computed; this …\nExplicit value for this variant, i.e., <code>X = 123</code>. The <code>DefId</code> …\nUnevaluated non-const-item, used by …\nThis trait is implemented for every folding traversal. …\nThe same as <code>TyCtxtFeed</code>, but does not contain a <code>TyCtxt</code>. Use …\nIn some cases, <code>hir::ConstArg</code>s that are being used in the …\nFloating-point type variable <code>?F</code> (that can only be unified …\nA primitive floating-point type. For example, <code>f64</code>.\nA floating-point type variable (<code>{float}</code>).\nA <strong>float</strong>ing-point (<code>f32</code> or <code>f64</code>) type <strong>v</strong>ariable <strong>ID</strong>.\nThe anonymous type of a function declaration/definition. …\nA pointer to a function. Written as <code>fn() -&gt; i32</code>.\nThe <code>ReifyShim</code> was created to produce a function pointer. …\nCompiler-generated <code>&lt;T as FnPtr&gt;::addr</code> implementation.\n<code>&lt;fn() as FnTrait&gt;::call_*</code> (generated <code>FnTrait</code> …\nAn unsized FFI type that is opaque to Rust. Written as …\nThis struct contains information regarding a free …\nA fresh const variable. See <code>infer::freshen</code> for more …\nLike <code>FreshTy</code>, but as a replacement for <code>FloatVar</code>.\nLike <code>FreshTy</code>, but as a replacement for <code>IntVar</code>.\nA <code>FreshTy</code> is one that is generated as a replacement for an …\nThese impls are allowed to overlap, but that raises an …\nGeneral type variable <code>?T</code> that can be unified with …\nAn entity in the Rust type system, which can be one of …\nList of generic arguments that are gonna be used to …\nBounds on generics.\nInformation about the formal type/lifetime parameters …\nSee TyCtxt for details about this type.\nDoes this have <code>Alias</code> or <code>ConstKind::Unevaluated</code>?\nDoes this have any binders with bound vars (e.g. that need …\nDoes this have any bound variables? Used to check if a …\nDoes this have any <code>ConstKind::Bound</code> consts?\nDoes this value have <code>InferConst::Fresh</code>?\nDoes this have <code>ConstKind::Infer</code>?\nDoes this have <code>ConstKind::Param</code>?\nDoes this have <code>ConstKind::Placeholder</code>?\nDoes this have <code>ConstKind::Unevaluated</code>?\nIs an error type/lifetime/const reachable?\n<code>true</code> if there are “names” of types and regions and so …\n<code>true</code> if there are “names” of regions and so forth that …\nDoes this have any region that “appears free” in the …\nDoes this have inference variables? Used to determine …\nDoes this have placeholders?\nDoes this have any <code>ReBound</code> regions?\nDoes this have any <code>ReErased</code> regions?\nDoes this have <code>ReVar</code>?\nDoes this have <code>ReEarlyParam</code>?\nDoes this have <code>RePlaceholder</code>?\nDoes this have any <code>Bound</code> types?\nDoes this have <code>Coroutine</code> or <code>CoroutineWitness</code>?\nDoes this value have …\nDoes this have <code>Infer</code>?\nDoes this have <code>Inherent</code>?\nDoes this have <code>Opaque</code>?\nDoes this have <code>Param</code>?\nDoes this have <code>Placeholder</code>?\nDoes this have <code>Projection</code>?\nDoes this have <code>Weak</code>?\nIndicates whether this variant has unnamed fields.\nIndicates whether the field list of this variant is …\nData must be immutable and is aliasable.\nThe “header” of an impl is everything outside the …\nUseful source information about where a desugared …\nInfer the value of the const.\nA type variable used during type checking.\nAn inference variable for a const, for use in const …\nA placeholder for a type that hasn’t been inferred yet.\nAn associated type in an inherent <code>impl</code>\nAn associated type in an inherent <code>impl</code>\nAn inline const is modeled like\nStruct returned by <code>split()</code>.\nAn <code>InstanceKind</code> along with the args that are needed to …\nRepresents the bounds declared on a particular set of type …\nIntegral type variable <code>?I</code> (that can only be unified with …\nA primitive signed integer type. For example, <code>i32</code>.\nAn integral type variable (<code>{integer}</code>).\nAn <strong>int</strong>egral (<code>u32</code>, <code>i32</code>, <code>usize</code>, etc.) type <strong>v</strong>ariable <strong>ID</strong>.\nAn intrinsic <code>fn</code> item (with <code>&quot;rust-intrinsic&quot;</code> or …\nWe switched our variance because a generic argument occurs …\nA user-defined callable item.\nThis is the initial value used when doing upvar inference.\nThe parameter representation of late-bound function …\nintegers, <code>bool</code>, <code>char</code> are represented as scalars. See the …\nA trait implemented for all <code>X&lt;&#39;a&gt;</code> types that can be safely …\n<code>List&lt;T&gt;</code> is a bit like <code>&amp;[T]</code>, but with some critical …\nA <code>List</code> that additionally stores type information inline to …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nGiven the closure DefId this map provides a map of root …\nPart of <code>MinCaptureInformationMap</code>; List of <code>CapturePlace</code>s.\nThe movability of a coroutine / closure literal: whether a …\nMust not contain self-references, <code>Unpin</code>.\nData is mutable and not aliasable.\n<code>impl !Trait for Type</code>\n<code>Type: !Trait</code>\nThe never type <code>!</code>.\nDon’t feed the type.\nNo additional information - this is the default. We will …\nThis should only be used inside of the new solver for …\n<code>Type: Trait</code>\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\nCoroutine has been poisoned.\nA const generic parameter.\nA type parameter; for example, <code>T</code> in <code>fn f&lt;T&gt;(x: T) {}</code>.\nFeed the type.\nWhen interacting with the type system we must provide …\nA pattern newtype. Takes any type and restricts its valid …\nThese impls are always allowed to overlap.\nThe “placeholder index” fully defines a placeholder …\nA placeholder const - universally quantified higher-ranked …\nA placeholder type, used during higher ranked subtyping to …\nA “placeholder” that represents “any const”.\nA “placeholder” that represents “any region”. …\nA “placeholder” that represents “any type”.\n<code>impl Trait for Type</code>\n<code>Type: Trait</code>\nA statement that can be proven by a trait solver. This …\nPolarity for a trait predicate. May either be negative or …\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\nE.g., <code>Iterator::Item = T</code>.\n<code>where &lt;T as TraitRef&gt;::Name == X</code>, approximately. See the …\nAn unevaluated const coming from an associated const.\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\nVisible everywhere (including in other crates).\nNumber of variants to reserve in coroutine state. …\nCoroutine has returned or is completed.\nA raw pointer. Written as <code>*mut T</code> or <code>*const T</code>\nA higher-ranked region. These represent either late-bound …\nA region parameter; for example <code>&#39;a</code> in …\nErased region, used by trait selection, in MIR and during …\nA region that resulted from some other error. Used …\nLate-bound function parameters are represented using a …\nA placeholder region – the higher-ranked version of …\nStatic data that has an “infinite” lifetime. Top in …\nA region variable. Should not exist outside of type …\nA reference; a pointer with an associated lifetime. …\nTrait for decoding to a reference.\nUse this rather than <code>RegionKind</code>, whenever possible.\nRegion variable <code>&#39;?R</code>.\n<code>where &#39;a: &#39;r</code>\nA <strong>region</strong> <strong>v</strong>ariable <strong>ID</strong>.\nA <strong>region</strong> <strong>v</strong>ariable <strong>ID</strong>.\nDescribes why a <code>ReifyShim</code> was created. This is needed to …\n<code>fn()</code> pointer where the function itself cannot be turned …\nThe previous variant’s discriminant plus one. For …\nRepresents the repr options provided by the user.\n<code>#[rustc_reservation_impl] impl Trait for Type</code>\nResolutions that should only be used for lowering. This …\nVisible only in the given crate-local module.\nPart of <code>MinCaptureInformationMap</code>; Maps a root variable to …\n<code>RvalueScopes</code> is a mapping from sub-expressions to <em>extended</em> …\nThe shorthand encoding uses an enum’s variant index <code>usize</code>\nDoes this value have parameters/placeholders/inference …\nThe raw bytes of a simple value.\nThe pointee of an array slice. Written as <code>[T]</code>.\nMay contain self-references, <code>!Unpin</code>.\nCollect al types that have an implicit <code>&#39;static</code> obligation …\nThe pointee of a string slice. Written as <code>str</code>.\n<code>T1 &lt;: T2</code>\nCompiler-generated accessor for thread locals which …\nE.g., <code>Iterator</code>.\nCorresponds to <code>where Foo: Bar&lt;A, B, C&gt;</code>. <code>Foo</code> here would be …\nCollect al types that have an implicit <code>&#39;static</code> obligation …\nA tuple type. For example, <code>(i32, bool)</code>.\nUse this rather than <code>TyKind</code>, whenever possible.\nSome kind of type inference variable.\nThe central data structure of the compiler. It stores …\nThis struct should only be created by <code>create_def</code>.\nA type variable.\nA <strong>ty</strong>pe <strong>v</strong>ariable <strong>ID</strong>.\nFlags that we track on types. These flags are propagated …\nThis trait is implemented for every type that can be …\nThis trait is implemented for every infallible folding …\nThe canonical type is the result of <code>type_of(def_id)</code> with …\n<code>where T: &#39;r</code>\nThis trait is implemented for every type that can be …\nThis trait is implemented for every visiting traversal. …\nCoroutine has not been resumed yet.\nA primitive unsigned integer type. For example, <code>u32</code>.\nAn unnormalized const item such as an anon const or assoc …\nAn unevaluated const coming from a generic const …\nData must be immutable but not aliasable. This kind of …\n“Universes” are used during type- and trait-checking …\nAn <code>Into</code>-like trait that takes <code>TyCtxt</code> to perform …\nA <code>From</code>-like trait that takes <code>TyCtxt</code> to perform …\nInformation describing the capture of an upvar. This is …\nUpvars do not get their own <code>NodeId</code>. Instead, we use the …\nStores the user-given args to reach some fully qualified …\nSpecifies the user-given self type. In the case of a path …\nA user-given type annotation attached to a constant. These …\n<code>&lt;T as Trait&gt;::method</code> where <code>method</code> receives unsizeable …\nThis datastructure is used to represent the value of …\nUsed to hold computed value.\nInfer the value of the const.\nExtra information about why we ended up with a particular …\nDefinition of a variant – a struct’s fields or an enum …\nDynamic dispatch to <code>&lt;dyn Trait as Trait&gt;::fn</code>.\nThis <code>ReifyShim</code> was created to populate a vtable. …\nA type alias that actually checks its trait bounds. …\nA type alias that actually checks its trait bounds. …\nNo syntax: <code>T</code> well-formed.\nA helper type that you can wrap round your own type in …\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nZero value of the index.\nAlways <code>RustCall</code>\nA subset of a mir body used for const evaluability …\nTuple containing the types of closure captures after the …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nStores memory for globals (statics/consts).\nCreates a pair of param-env and value for use in queries.\nThe arena that types, regions, etc. are allocated from.\nLifetime and type parameters from the enclosing function, …\nThe parameters of the associated or opaque item.\nThe parameters of the associated or opaque type.\nThe args for the item as given by the user.\nGeneric parameters from the enclosing item, concatenated …\nThe polarity marker in front of the impl trait ref if …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nReturns the type of the async destructor of this type.\nGet morphology of the async drop glue, needed for types …\nTuple containing the types of closure captures before the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nthe bound region corresponding to free region.\nReturns the type and mutability of <code>*ty</code>.\nReturns the type of <code>ty[i]</code>.\nAlways false\nReturns <code>true</code> if <code>self</code> can name a name from <code>other</code> – in …\nReturns <code>true</code> if this type is valid for reordering and …\nReturns <code>true</code> if <code>self</code> cannot name some names from <code>other</code> – …\nCapture mode that was selected\nExpr Id pointing to use that resulted in selecting the …\nTracks the fake reads required for a closure and the …\nRecords the reasons that we picked the kind of each …\nRepresents the maximum calling capability of the closure.\nRepresents the maximum calling capability of the closure.\nTracks the minimum captures required for a closure; see …\nCaptures the closure’s signature. This closure signature …\nContains the data for evaluating the effect of feature …\nThis module contains some shared code for encoding and …\nFor every coercion cast we add the HIR node ID of the cast …\nProduce a result of type <code>Self::Output</code> from <code>iter</code>. The …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAll the opaque types that have hidden types set by this …\nMapping from ident span to path span for paths that don’…\nThe constness of the destructor method\nCommon consts, pre-interned for your convenience.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nChecks whether a type recursively contains another type\nWhether all set bits in a source flags value are also set …\nChecks whether a type recursively contains any closure\nType context book-keeping.\na function pointer that has the shape …\nStores the predicates that apply on coroutine witness …\nWitness type returned by the generator produced by this …\nThe <code>DefId</code> of the async destructor future constructor\n<code>DefId</code> that identifies the variant’s constructor. If this …\nThe first <code>size</code> bytes of <code>data</code> are the value. Do not try to …\nData layout specification for the current target.\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\n<code>LocalDefId</code> of the free region.\n<code>DefId</code> that identifies the variant itself. If this variant …\nInformation about functions signatures for delegation …\nDiagnostics related methods for <code>Ty</code>.\nThe <code>DefId</code> of the struct, enum or union item.\nThe <code>DefId</code> of the destructor method\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDiscriminant of this variant.\nThe type of the state discriminant used in the coroutine …\nThe type of the state discriminant used in the coroutine …\nReturns the discriminant type, given these <code>repr</code> options. …\nThe discriminant for the given variant. Panics if the …\nThe discriminant for the given variant. Panics if the …\nIf the type contains variants, returns the variant for …\nReturns the type of the discriminant of this type.\nThe set of all discriminants for the coroutine, enumerated …\nThe set of all discriminants for the coroutine, enumerated …\nCreates dummy var values which should not be used in a …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nConstruct a trait environment suitable for contexts where …\nGet a flags value with all bits unset.\nCaches the results of trait evaluation. This cache is used …\nPanics if called on any type other than <code>Box&lt;T&gt;</code>.\nItem with a given <code>LocalDefId</code> was defined during macro …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns <code>true</code> if a type that impls this closure kind must …\nLifetime parameters that lowering will have to introduce.\nResolved field indices for field accesses in expressions (…\nThe seed to be used for randomizing a type’s layout\nFields of this variant.\nThis field provides fast access to information that is …\nFlags of the ADT (e.g., is this a struct? is this …\nFlags of the variant (e.g. is field list non-exhaustive)?\nFlips polarity by turning <code>Positive</code> into <code>Negative</code> and …\nWhether this is a method with an explicit self as its …\nA convenient alternative to <code>try_fold_with</code> for use with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nInverse of <code>Ty::to_opt_closure_kind</code>. See docs on that method\nLike <code>Ty::to_opt_closure_kind</code>, but it caps the “maximum”…\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nFor each FRU expression, record the normalized types of …\nThe <code>DefId</code> of the async destructor future type\nTrue if there are any late-bound regions\nTrue if there are any bound variables\nTrue if there are any un-erased free regions.\nWas this variant obtained as part of recovering from a …\nReturn <code>true</code> if this type has regions that are not a part …\n“Free” regions in this context means that it has any …\nTrue if there are any late-bound non-region variables\nChecks if <code>ty</code> has a significant drop.\nDoes this variant contains unnamed fields\nReturns <code>true</code> if this type has any regions that escape …\nReturns <code>true</code> if <code>self</code> has any late-bound regions that are …\nThe <code>HirId::owner</code> all <code>ItemLocalId</code>s in this table are …\nHooks to be able to register functions in other crates …\nComputes the <code>Ident</code> of this variant by looking up the <code>Span</code>\nComputes the <code>Ident</code> of this variant by looking up the <code>Span</code>\nThis module contains <code>HashStable</code> implementations for …\nResolutions for import nodes, which have multiple …\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\n<code>CaptureKind</code> and expression(s) that resulted in such …\nCalculates the forest of <code>DefId</code>s from which this variant is …\nThis module contains logic for determining whether a type …\nSet of traits which are used to emulate the inherent impls …\nReturns <code>true</code> if this <code>#[repr()]</code> should inhabit “smart enum\nReturns <code>true</code> if this <code>#[repr()]</code> guarantees a fixed field …\nReturns <code>true</code> if this <code>#[repr()]</code> should inhibit union ABI …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe “untyped” variant of <code>ConstInt</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nReturns an intersection between two effect kinds. If one …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if an item with this visibility is accessible …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturn true if the <code>proj_possible_ancestor</code> represents an …\nTests if this is any kind of primitive pointer type …\nReturns <code>true</code> if this visibility is at least as accessible …\nTests whether this is a Box definitely using the global …\nChecks whether values of this type <code>T</code> are <em>moved</em> or <em>copied</em> …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nIs this field list non-exhaustive?\nReturns <code>true</code> if this type is a floating point type.\nChecks whether values of this type <code>T</code> implement the <code>Freeze</code> …\nIndicates whether this value references only ‘global’ …\nchecks if bound region is in Impl Item\nChecks whether a type is visibly uninhabited from a …\nReturns <code>true</code> when the outermost type cannot be further …\nReturn <code>true</code> if self is mutable\nReturn <code>true</code> if self is <strong>not</strong> mutable\nSimilar to <code>Ty::is_primitive</code>, but also considers inferred …\nReturns true if the type is uninhabited without regard to …\nWhether the value is a <code>usize</code> or <code>isize</code> type.\nReturns <code>true</code> if <code>self</code> is the root universe, otherwise false.\nA scalar type is one that denotes an atomic datum, with no …\nWhether the type is succinctly representable as a type …\nWhether the type is succinctly representable as a type …\nChecks whether values of this type <code>T</code> have a size known at …\nReturns <code>true</code> if this type is a <code>str</code>.\nReturns <code>true</code> if equality for this type is both reflexive …\nWhether this makes sense to suggest in a diagnostic.\nFast path helper for testing if a type is <code>Freeze</code>.\nFast path helper for primitives which are always <code>Copy</code> and …\nFast path helper for testing if a type is <code>Sized</code>.\nFast path helper for testing if a type is <code>Unpin</code>.\nReturns whether the field is unnamed\nChecks whether values of this type <code>T</code> implement the <code>Unpin</code> …\nReturns <code>true</code> if this item is visible anywhere in the local …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturns the closure kind for this closure; only usable …\nReturns the closure kind for this closure; may return a …\nThe coroutines returned by a coroutine-closure’s …\nResolutions for labels (node IDs of their corresponding …\nFor each fn, records the “liberated” types of its …\nList functions and methods for which lifetime elision was …\nCommon lifetimes, pre-interned for your convenience.\nResolutions for lifetimes.\nLints that were emitted by the resolver and early lints.\nWhether the intrinsic has no meaningful body and all …\nRepresents if <code>place</code> can be mutated or not.\nReturns <code>&quot;&quot;</code> (empty string) or <code>&quot;mutably &quot;</code> depending on the …\nVariant or struct name, maybe empty for anonymous adt …\n<code>&amp;str</code> gives a consistent ordering, which ensures …\nIf <code>ty.needs_async_drop(...)</code> returns <code>true</code>, then <code>ty</code> is …\nIf <code>ty.needs_drop(...)</code> returns <code>true</code>, then <code>ty</code> is definitely …\nResolved types and indices for the nested fields’ …\nConstruct <code>ClosureArgs</code> from <code>ClosureArgsParts</code>, containing …\nConstruct <code>CoroutineArgs</code> from <code>CoroutineArgsParts</code>, …\nAvoid using this in favour of more specific <code>new_*</code> methods, …\nConstruct a trait environment with the given set of …\nCreates a new <code>VariantDef</code>.\nConstructs a <code>TyKind::Error</code> type with current …\nConstructs a <code>TyKind::Error</code> type and registers a …\nConstructs a <code>TyKind::Error</code> type and registers a …\nCaches the results of goal evaluation in the new solver.\nCreates a <code>&amp;mut Context&lt;&#39;_&gt;</code> <code>Ty</code> with erased lifetimes.\nWhether the new trait solver is enabled. This only exists …\nReturns the “next” universe index in order – this …\nStores the type parameters which were instantiated to …\nStores the types for various nodes in the AST. Note that …\nMethods for normalizing when you don’t care about …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the maximum value for the given numeric type …\nReturns the minimum and maximum values for the given …\nReturns the minimum value for the given numeric type …\nContainer types and field indices of <code>offset_of!</code> expressions\n<code>Some</code> if the associated item (an associated type) comes …\nThis field provides fast access to information that is …\nThe outlives relation <code>T: &#39;a</code> or <code>&#39;a: &#39;b</code>. This code frequently\nThis is true if we identified that this Ty (<code>?T</code>) is found …\nThis packs both caller bounds and the reveal enum into one …\nReverse map to the <code>index</code> field of each <code>GenericParamDef</code>.\nReturns the generic parameters of the closure’s parent.\nReturns the generic parameters of the coroutine’s parent.\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nResolutions for nodes that have a single resolution.\nStores the types which were implicitly dereferenced in …\nStores the actual binding mode for all instances of …\nExpr Id pointing to use that resulted the corresponding …\nPeel off all reference types in this type until there are …\nThe <code>Place</code> that is captured.\nGiven a pointer or reference type, returns the type of the …\nIf polarity is Positive: we are proving that the trait is …\nFor each struct with outlive bounds, maps to a vector of …\nReturns <code>&quot;&quot;</code> (empty string) or <code>&quot;mut &quot;</code> depending on the …\nThis is the types of the fields of a coroutine which are …\nThis is the types of the fields of a coroutine which are …\nReturns the <code>Size</code> for primitive types (bool, uint, int, …\nIf <code>self</code> is a primitive, return its <code>Symbol</code>.\nA list of proc macro LocalDefIds, written out in the order …\nReturns the type of metadata for (potentially wide) …\nReturns the type of metadata for (potentially wide) …\nReturns <code>&quot;const&quot;</code> or <code>&quot;mut&quot;</code> depending on the mutability.\n<code>pure_wrt_drop</code>, set by the (unsafe) <code>#[may_dangle]</code> attribute …\nThe parameter is marked immutable in the function and …\nGet the mutability of the reference or <code>None</code> when not a …\nReturns <code>&quot;&amp;&quot;</code> or <code>&quot;&amp;mut &quot;</code> depending on the mutability.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRepr options provided by the user.\nReturns the type representing the resume type of the …\nReturns the type representing the return type of the …\nConstruct a trait environment with no where-clauses in …\nTop-level patterns whose match ergonomics need to be …\nTracks the rvalue scoping rules which defines finer …\nAlways <code>Normal</code> (safe)\nCaches the results of trait selection. This cache is used …\nThis is true if we identified that this Ty (<code>?T</code>) is found …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nUpdate this index in place by shifting it “in” through …\nUpdate in place by shifting out from <code>amount</code> binders.\nReturns the resulting index when this value is moved into …\nReturns the resulting index when this value is moved out …\nAdjusts any De Bruijn indices so as to make <code>to_binder</code> the …\nExtracts the signature from the closure.\nReturns the “coroutine signature”, which consists of …\nReturns the <code>fn</code> pointer type representing the closure …\nRepresents all of the relevant parts of the coroutine …\nWhether the value is of a signed integer type.\nReturns the one field in this variant.\nSet of reference patterns that match against a …\nThe span of this particular definition of the opaque type. …\nCompares via an ordering that will not change if modules …\nThe <code>stable_crate_id</code> is constructed out of the crate name …\nThis returns the types of the MIR locals which had to be …\nThis returns the types of the MIR locals which had to be …\nIndicates whether this value still has …\nThis module contains implementations of the <code>Lift</code>, …\nThis module contains <code>TyKind</code> and its major components.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSuggest restricting a type param with a new bound.\nSuggest restricting a type param with a new bound.\nA convenient alternative to <code>try_super_fold_with</code> for use …\nProvides a default visit for a recursive type of interest. …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the last field in this variant.\nReturns the last field in this variant, if present.\nThe error guarantees from parser, if any.\nIf any errors occurred while type-checking this body, this …\nConstruct a coroutine from the closure signature. Since a …\nGiven known upvars and a <code>ClosureKind</code>, compute the coroutine\nWhen we create a closure, we record its kind (i.e., what …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nIf this is an item in an impl of a trait then this is the …\nWe sometimes treat byte string literals (which are of type …\nThe entry point for folding. To fold a value <code>t</code> with a …\nProvides a default fold for a recursive type of interest. …\nIterates over tuple fields. Panics when called on anything …\nCompute the tupled upvars that a coroutine-closure’s …\nReturns the tuple type representing the upvars for this …\nReturns the tuple type representing the upvars for this …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nReturns the type of this field. The resulting type is not …\nThe type variable that represents the value of the opaque …\nCompute the information for the pointer stored at the …\nResolved definitions for <code>&lt;T&gt;::X</code> associated paths and …\nCommon types, pre-interned for your convenience.\nAllows you to map the <code>value</code> of a canonical while keeping …\nAllows you to map the <code>value</code> of a canonical while keeping …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns an iterator over the list of types of captured …\nReturns an iterator over the list of types of captured …\nSet of trait imports actually used in the method …\nStores the canonicalized types provided by the user. See …\nThis will either store the canonicalized types provided by …\nThe self type, in the case of a <code>&lt;T&gt;::Item</code> path (when …\nMiscellaneous type-system utilities that are too small to …\nThis stores a pointer to a <code>GlobalCtxt</code>. This is set to <code>Some</code> …\nName and span where the binding happens.\nFor each item with generics, maps to a vector of the …\nCalls <code>f</code> with a reference to the name of the enumerator for …\nCalls <code>f</code> with a reference to the name of the enumerator for …\nThe valid variant indices of this coroutine.\nThe valid variant indices of this coroutine.\nIf the type contains variants, returns the valid range of …\nVariants of the ADT. If this is a struct or union, then …\nThe entry point for visiting. To visit a value <code>t</code> with a …\nAn iterator over the type substructure. WARNING: this does …\nIterator that walks <code>self</code> and any types reachable from <code>self</code>…\nReturns a new parameter environment with the same clauses, …\nReplaces the universe of this canonical variable with <code>ui</code>.\nReturns this same environment but with no caller bounds.\nThis describes the types that can be contained in a …\nThe interior type of the coroutine. Represents all types …\nMirrors <code>Variance::xform</code> - used to ‘combine’ the …\n<code>a.xform(b)</code> combines the variance of a context with the …\nReturns the type representing the yield type of the …\nWhether or not the impl is permitted due to the trait …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\nthir::ExprKind::As\nContains the error value\nContains the success value\nthir::ExprKind::Use\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents coercing a value to a different type of value.\nAt least for initial deployment, we want to limit …\nGo from <code>*const [T; N]</code> to <code>*const T</code>\nTake the address and produce either a <code>&amp;</code> or <code>*</code> pointer.\nGo from a non-capturing closure to an fn pointer or an …\nInformation for <code>CoerceUnsized</code> impls, storing information we\nDereference once, producing a place.\nGo from a pointer-like type to a <code>dyn*</code> object.\nGo from a mut raw pointer to a const raw pointer.\nGo from ! to any type.\nAn overloaded autoderef step, representing a …\nConverts from T to *T.\nTake a pinned reference and reborrow as a <code>Pin&lt;&amp;mut T&gt;</code> or …\nConverts from T to &amp;T.\nGo from a fn-item type to a fn-pointer type.\nRecords the index of the field being coerced.\nGo from a safe fn pointer to an unsafe fn pointer.\nUnsize a pointer/reference value, e.g., <code>&amp;[T; n]</code> to <code>&amp;[T]</code>. …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nIf this is a “custom coerce” impl, then what kind of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the zst function item type for this method call.\nCreates an <code>AutoBorrowMutability</code> from a mutability and …\nThe <code>Span</code> associated with the field access or method call …\nThe definition of a user-defined type, e.g., a <code>struct</code>, <code>enum</code>…\nIndicates whether the ADT is a struct and has a …\nIndicates whether the type is anonymous.\nIndicates whether the type is <code>Box</code>.\nIndicates whether the ADT is an enum.\nIndicates whether the type has a <code>#[fundamental]</code> attribute.\nIndicates whether the type is <code>ManuallyDrop</code>.\nIndicates whether the type is <code>PhantomData</code>.\nIndicates whether the ADT is a struct.\nIndicates whether the ADT is a union.\nIndicates whether the type is <code>UnsafeCell</code>.\nIndicates whether the variant list of this ADT is …\nReturns the kind of the ADT.\nGet a flags value with all known bits set.\nReturns an iterator over all fields contained by this ADT …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns a description of this abstract data type.\nThe <code>DefId</code> of the struct, enum or union item.\nThe intersection of a source flags value with the …\nYields a <code>DefId</code> for the discriminant and an offset to add …\nComputes the discriminant value used by a specific variant.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlags of the ADT (e.g., is this a struct? is this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nIf this function returns <code>true</code>, it implies that <code>is_struct</code> …\nReturns <code>true</code> if this type has a destructor.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if this is an anonymous adt\nReturns <code>true</code> if this is <code>Box&lt;T&gt;</code>.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if this is an enum.\nReturns <code>true</code> if this type is <code>#[fundamental]</code> for the …\nReturns <code>true</code> if this is <code>ManuallyDrop&lt;T&gt;</code>.\nWhether the ADT lacks fields. Note that this includes …\nReturns <code>true</code> if this is <code>PhantomData&lt;T&gt;</code>.\nReturns <code>true</code> if this is a struct.\nReturns <code>true</code> if this is a union.\nReturns <code>true</code> if this is <code>UnsafeCell&lt;T&gt;</code>.\nReturns <code>true</code> if the variant list of this ADT is …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates a new <code>AdtDefData</code>.\nAsserts this is a struct or union and returns its unique …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nRepr options provided by the user.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturns a type such that <code>Self: Sized</code> if and only if that …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a description of a variant of this abstract data …\nReturn the index of <code>VariantDef</code> given a constructor id.\nReturn the index of <code>VariantDef</code> given a variant id.\nReturn a <code>VariantDef</code> given a constructor id.\nReturn a <code>VariantDef</code> given a variant id.\nVariants of the ADT. If this is a struct or union, then …\nInformation about an associated item\nA list of <code>ty::AssocItem</code>s in definition order that allows …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nGets the defaultness of the associated item. To get the …")