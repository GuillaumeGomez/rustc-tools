searchState.loadedDescShard("rustc_errors", 0, "Diagnostics creation and emission for <code>rustc</code>.\nOnly used for lints.\nIndicates the confidence in the correctness of a …\nBorrowed data.\nFor bugs in the compiler. Manifests as an ICE (internal …\nMarker type which enables implementation of <code>create_bug</code> and …\nThe set of available colors for the terminal …\nA color specification.\nDo not display this suggestion in the cli output, it is …\nQuery cycle detected, stashing in favor of a better error.\nRaw content of Fluent resource for this crate, generated …\nThis is a strange one: lets you register an error without …\nSignifies that the compiler died due to a delayed bug …\nUsed for emitting structured error messages and other …\nSimplified version of <code>FluentArg</code> that can implement …\nName of a diagnostic argument.\nSimplified version of <code>FluentValue</code> that can implement …\nA <code>DiagCtxt</code> deals with errors and other compiler output. …\nThis inner struct exists to keep it all behind a single …\nThe main part of a diagnostic. Note that <code>Diag</code>, which wraps …\nAbstraction over a message in a diagnostic to support both …\nTrait implemented by error types. This is rarely …\nIndicates that no suggestion is available for this …\nTrait for types that <code>Diag::emit</code> can return as a “…\nIndicates that new suggestions can be added or removed …\nContains the error value\nAn error in the code being compiled, which prevents …\nUseful type to use with <code>Result&lt;&gt;</code> indicate that an error …\nOnly used for lints.\nSignifies that the compiler died with an explicit call to …\nUsed by <code>Parser::maybe_recover_trailing_expr</code>\nSimilar to <code>Note</code>, but used in cases where compilation has …\nAn error that causes an immediate abort. Used for things …\nMarker type which enables implementation of <code>create_fatal</code> …\nUsed as a return value to signify a fatal error occurred.\nThis is a marker for a fatal compiler error used with …\nAttribute of a Fluent message. Needs to be combined with a …\nIdentifier of a Fluent message. Instances of this variant …\nIdentifier for a Fluent message (with optional attribute) …\nA <code>force-warn</code> lint warning about the code being compiled. …\nThe suggestion contains placeholders like <code>(...)</code> or …\nA message suggesting how to fix something.\nAlways hide the suggested code but display the message.\nHide the suggested code when displaying this suggestion …\nConverts a value of a type into a <code>DiagArg</code> (typically a …\n<code>LanguageIdentifier</code> is a core struct representing a Unicode …\nType alias for the result of <code>fallback_fluent_bundle</code> - a …\nLevelis_errorEmissionGuaranteeTop-levelSubUsed in lints?Bug…\nWhen an invalid lifetime e.g. <code>&#39;2</code> should be reinterpreted …\nTrait implemented by lint types. This should not be …\nThe suggestion is definitely what the user intended, or …\nMaybe there was a typo where a comma was forgotten before …\nThe suggestion may be what the user intended, but it is …\nA collection of <code>Span</code>s.\nA message giving additional context.\nContains the success value\nA help that is only emitted once.\nA note that is only emitted once.\nOwned data.\nIndicates that suggestions cannot be added or removed from …\nAlways show the suggested code independently.\nAlways show the suggested code. This will <em>not</em> show the …\nUtility struct used to apply a single label while …\nA span together with some additional data.\nA key denoting where from a diagnostic was stashed.\nNon-translatable diagnostic message.\nNon-translatable diagnostic message.\nA “sub”-diagnostic attached to a parent diagnostic. …\nAbstraction over a message in a subdiagnostic (i.e. label, …\nTrait implemented by error types. This should not be …\nSee the docs on <code>CodeSuggestion::substitutions</code>\nUsed to translate between <code>Span</code>s and byte positions within …\nRepresents the help messages seen on a diagnostic.\nDiagnostics emitted by <code>DiagCtxtInner::emit_diagnostic</code> are …\nTranslatable message which has already been translated …\nTranslatable message which has been already translated.\nThe applicability of the suggestion is unknown.\nA warning about the code being compiled. Does not prevent …\nThis trait describes the behavior of writers that support …\nGrammatical tool for displaying messages to end users in a …\nThis excludes delayed bugs. Used for early aborts after …\nAdd a subdiagnostic to an existing diagnostic where <code>f</code> is …\nEmit diagnostics using the <code>annotate-snippets</code> library\nWhether or not the suggestion is approximate\nGet the background color.\nGet whether this is bold or not.\nIf false, warning-level lints are suppressed. (rustc: see …\nReturns character direction of the <code>LanguageIdentifier</code>.\nClears this color specification so that it has no …\nClears variant subtags of the <code>LanguageIdentifier</code>.\nClone this <code>MultiSpan</code> without keeping any of the span …\nThis module defines the following.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDecorate and emit a lint.\nIf true, identical diagnostics are reported only once.\nThe error count shown to the user at the end.\nThe warning count shown to the user at the end.\nEnsures that an error is printed. See <code>Level::DelayedBug</code>.\nThe delayed bugs and their error guarantees.\nWhy the <code>Option</code>? It is always <code>Some</code> until the <code>Diag</code> is …\nWhy the <code>Option</code>? It is always <code>Some</code> until the <code>Diag</code> is …\nGet whether this is dimmed or not.\nGrammatical tool for displaying messages to end users in a …\nEagerly emit delayed bugs as errors, so that the compiler …\nTranslate <code>message</code> eagerly with <code>args</code> to …\nTranslate <code>message</code> eagerly with <code>args</code> to …\nTranslate <code>message</code> eagerly with <code>args</code> to <code>String</code>.\nTranslate <code>message</code> eagerly with <code>args</code> to <code>String</code>.\nImplementation of <code>Diag::emit</code>, fully controlled by each <code>impl</code>…\nEmit all stashed diagnostics.\nEmit all stashed diagnostics.\nWith <code>-Ztrack_diagnostics</code> enabled, we print where in rustc …\nUsed to suggest rustc –explain <code>&lt;error code&gt;</code>\nThis set contains a hash of every diagnostic that has been …\nThe current rustc diagnostics emitter.\nThis excludes delayed bugs.\nThe error guarantees from all emitted errors. The length …\nReturn the default <code>FluentBundle</code> with standard “en-US” …\nGet the foreground color.\nReturns Fluent bundle with the user’s locale resources …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA constructor which takes a utf8 slice, parses it and …\nA constructor which takes optional subtags as <code>AsRef&lt;[u8]&gt;</code>, …\nUnchecked\nexpected diagnostic will have the level <code>Expect</code> which …\nThis excludes delayed bugs.\nThis excludes lint errors and delayed bugs. Unless …\nThis excludes nothing. Unless absolutely necessary, prefer …\nReturns <code>true</code> if any of the primary spans are displayable.\nHas this diagnostic context printed any diagnostics? (I.e. …\nReturns <code>true</code> if any of the span labels is displayable.\nTests if a variant subtag is present in the …\nThe file where the ICE information is stored. This allows …\nGet whether this is intense or not.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrite out as a diagnostic out of <code>DiagCtxt</code>.\nConsumes <code>LanguageIdentifier</code> and produces raw internal …\nReturns <code>true</code> if this contains only a dummy primary span …\nReturns true if this color specification has no colors or …\nIs this a primary span? This is the “locus” of the …\nReturns true if and only if the underlying writer must …\nGet whether this is italic or not.\nA JSON emitter for errors.\nWhat label should we attach to this span (if any)?\nThe error guarantee from all emitted lint errors. The …\nBindings to acquire a global named lock.\nShow macro backtraces. (rustc: see <code>-Z macro-backtrace</code>)\nA simple markdown parser that can write formatted text to …\nCompares a <code>LanguageIdentifier</code> to another …\nMust we produce a diagnostic to justify the use of the …\n<code>true</code> if we haven’t taught a diagnostic with this code …\nCreate a new color specification that has no colors or …\nSelects the first primary span (if any).\nReturns all primary spans.\nReplaces all occurrences of one Span with another. Used to …\nReset the current color settings to their original …\nGet whether reset is enabled or not.\nResets the diagnostic error count as well as the cached …\nSet the background color.\nSet whether the text is bolded or not.\nSet the color settings of the writer.\nSet whether the text is dimmed or not.\nSet the foreground color.\nSet the current hyperlink of the writer.\nSet whether the text is intense or not.\nSet whether the text is italicized or not.\nUsed when trimmed_def_paths is called and we must produce …\nSet whether to reset the terminal whenever color settings …\nSet whether the text is strikethrough or not.\nSet whether the text is underlined or not.\nSets variant subtags of the <code>LanguageIdentifier</code>.\nThis is not used for highlighting or rendering any error …\nThe span we are going to include in the final snippet.\nEnsures that an error is printed. See <code>Level::DelayedBug</code>.\nReturns the strings to highlight. We always ensure that …\nReturns the assembled code suggestions, whether they …\nStashes a diagnostic for possible later improvement in a …\nStashed diagnostics emitted in one stage of the compiler …\nThis methods steals all <code>LintExpectationId</code>s that are stored …\nSteal a previously stashed non-error diagnostic with the …\nGet whether this is strikethrough or not.\nVisual representation of this suggestion.\nEach substitute can have multiple variants due to multiple …\nReturns true if and only if the underlying writer supports …\nReturns true if and only if the underlying writer supports …\nThis flag indicates that an expected diagnostic was …\nLink this to a taintable context so that emitting errors …\nSome contexts create <code>DiagCtxtHandle</code> with this field set, …\nThis set contains the code of all emitted diagnostics to …\nTrack where errors are created. Enabled with …\nIf Some, the Nth error-level diagnostic is upgraded to …\nSteals a previously stashed error with the given <code>Span</code> and …\nSteals a previously stashed error with the given <code>Span</code> and …\nDon’t use this outside of <code>DiagCtxtInner::emit_diagnostic</code>!\nGet whether this is underline or not.\nReturns the underlying list of suggestions.\nReturns a vector of variants subtags of the …\nGiven a <code>SubdiagMessage</code> which may contain a Fluent …\nGenerates diagnostics using annotate-snippet\nMaps <code>crate::Level</code> to <code>annotate_snippets::Level</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe entry point for the diagnostics generation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf true, hides the longer explanation text\nProvides the source string for the given <code>line</code> of <code>file</code>\nAllows to modify <code>Self</code> to enable or disable the <code>ui_testing</code> …\nIf true, will normalize line numbers with <code>LL</code> to prevent …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nBorrowed data.\nMarker type which enables implementation of <code>create_bug</code> and …\nUsed for emitting structured error messages and other …\nSimplified version of <code>FluentArg</code> that can implement …\nName of a diagnostic argument.\nSimplified version of <code>FluentValue</code> that can implement …\nThe main part of a diagnostic. Note that <code>Diag</code>, which wraps …\nTrait implemented by error types. This is rarely …\nTrait for types that <code>Diag::emit</code> can return as a “…\nThis exists so that bugs and fatal errors can both result …\nThis exists so that bugs and fatal errors can both result …\nMarker type which enables implementation of <code>create_fatal</code> …\nConverts a value of a type into a <code>DiagArg</code> (typically a …\nTrait implemented by lint types. This should not be …\nOwned data.\nA “sub”-diagnostic attached to a parent diagnostic. …\nTrait implemented by error types. This should not be …\nAdd a subdiagnostic to an existing diagnostic.\nAdd a subdiagnostic to an existing diagnostic.\nAdd a subdiagnostic to an existing diagnostic where <code>f</code> is …\nAdd an argument. See <code>Diag::arg()</code>.\nCancel and consume the diagnostic. (A diagnostic must …\nAdd an error code. See <code>Diag::code()</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDecorate and emit a lint.\nDelay emission of this diagnostic as a bug.\nWhy the <code>Option</code>? It is always <code>Some</code> until the <code>Diag</code> is …\nDisallow attaching suggestions to this diagnostic. Any …\nDelay emission of this diagnostic as a bug.\nEmit and consume the diagnostic.\n<code>ErrorGuaranteed::emit_producing_guarantee</code> uses this.\nImplementation of <code>Diag::emit</code>, fully controlled by each <code>impl</code>…\nMost <code>emit_producing_guarantee</code> functions use this as a …\nEmit the diagnostic unless <code>delay</code> is true, in which case …\nWith <code>-Ztrack_diagnostics</code> enabled, we print where in rustc …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates whether this diagnostic should show up in cargo…\nIndicates whether this lint should show up in cargo’s …\nAdd a help message attached to this diagnostic. See …\nThis is like <code>Diag::help()</code>, but it’s only printed once.\nAdd a help message attached to this diagnostic with a …\nAdd a help message attached to this diagnostic with a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrite out as a diagnostic out of <code>DiagCtxt</code>.\nFields used for Hash, and PartialEq trait.\nShow a suggestion that has multiple parts to it. In other …\nShow a suggestion that has multiple parts to it, always as …\n<code>Diag::multipart_suggestion()</code> but you can set the …\nPrints out a message with multiple suggested edits of the …\nThe lint name.\nCreates a new <code>Diag</code> with an already constructed diagnostic.\nAdd a note attached to this diagnostic. See <code>Diag::note()</code>.\nThis is like <code>Diag::note()</code>, but it’s only printed once.\nAdd a primary message. See <code>Diag::primary_message()</code>.\nHelper for pushing to <code>self.suggestions</code>.\nPrevent new suggestions from being added to this …\nThis is not used for highlighting or rendering any error …\nAdd a span. See <code>Diag::span()</code>.\nPrints the span with some help above it. This is like …\nAppends a labeled span to the diagnostic.\nLabels all the given spans with the provided label. See …\nPrints the span with a note above it. This is like …\nPrints the span with a note above it. This is like …\nPrints out a message with a suggested edit of the code.\nPrints out a message for a suggestion without showing the …\nPrints out a message with a suggested edit of the code. If …\nAlways show the suggested change. See …\n<code>Diag::span_suggestion()</code> but you can set the <code>SuggestionStyle</code>…\nPrints out a message with multiple suggested edits of the …\nPrints the span with a warning above it. This is like …\nSee <code>DiagCtxt::stash_diagnostic</code> for details.\nConvenience function for internal use, clients should use …\nConvenience function for internal use, clients should use …\nAdd a subdiagnostic from a type that implements …\nHelper function that takes a <code>SubdiagMessage</code> and returns a …\nTakes the diagnostic. For use by methods that consume the …\nPrints out a message with for a multipart suggestion …\nAdds a suggestion to the JSON output that will not be …\nAdd a warning attached to this diagnostic. See <code>Diag::warn()</code>…\nAdd an argument. See <code>Diag::arg()</code>.\nAdd an error code. See <code>Diag::code()</code>.\nAllow moving diagnostics between different error tainting …\n<code>Diag</code> impls many <code>&amp;mut self -&gt; &amp;mut Self</code> methods. Each one …\nAdd a help message attached to this diagnostic. See …\nShow a suggestion that has multiple parts to it. In other …\nAdd a note attached to this diagnostic. See <code>Diag::note()</code>.\nAdd a primary message. See <code>Diag::primary_message()</code>.\nAdd a span. See <code>Diag::span()</code>.\nAppends a labeled span to the diagnostic.\nLabels all the given spans with the provided label. See …\nPrints the span with a note above it. This is like …\nPrints out a message with a suggested edit of the code.\nPrints out a message with a suggested edit of the code. If …\nAlways show the suggested change. See …\nPrints out a message with multiple suggested edits of the …\nAdds a suggestion to the JSON output that will not be …\nAdd a warning attached to this diagnostic. See <code>Diag::warn()</code>…\nUtility struct used to apply a single label while …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOn Windows, BRIGHT_BLUE is hard to read on black. Use cyan …\nDefault column width, used in tests and when terminal …\nEmitter trait for emitting errors.\nHandles the writing of <code>HumanReadableErrorType::Default</code> and …\nDescribes the way the content of the <code>rendered</code> field of the …\nMaximum number of suggestions to be shown\nAn emitter that does nothing when emitting a non-fatal …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPreprocess all the annotations so that they are grouped by …\nThe current width of the terminal. Uses value of …\nThe beginning of the line to be displayed.\nThe end of the line to be displayed.\nEmit a notification that an artifact has been output. …\nEmit a structured diagnostic.\nEmit a report about future breakage. Currently only …\nEmit list of unused externs. Currently only supported for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the original and suggested code are visually …\nWhether the original and suggested code are the same.\nThe end column of a span label, including the span. Doesn…\nAdds a left margin to every line but the first, given a …\nFormats the substitutions of the primary_span\nChecks if should show explanations about “rustc –…\nThe column of the beginning of left-most span.\nThe column of the end of right-most span.\nChecks if we can use colors in the current output stream.\nThe available whitespace in the left that can be consumed …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe path of the artifact.\nAssociated diagnostic messages.\nThe error code (e.g. “E1234”), if the diagnostic has …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\n1-based, character offset.\nspan where macro was defined (if known)\nWhat kind of artifact we’re emitting.\nMacro invocations that created the code at this span, if …\nAn explanation for the code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from <code>rustc_errors::DiagInner</code> to <code>Diagnostic</code>.\nCreates a list of DiagnosticSpanLines from span - each …\n1-based, character offset in self.text.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a “primary” span – meaning the point, or one …\nLabel that should be placed at this location (if any)\n“error: internal compiler error”, “error”, “…\n1-based.\nThe severity level of the unused dependencies lint\nname of macro that was applied (e.g., “foo!” or “#[…\nThe primary error message.\nThe message as rustc would render it.\nspan where macro was applied to generate this code; note …\nIf we are suggesting a replacement, this will contain text …\nIf the suggestion is approximate\nSource text from the start of line_start to the end of …\nList of unused externs by their names.\nLeaf types\nBreak bewtween two lines (single <code>\\n</code>)\nFoo or simple anchor &lt;www.foo.com&gt;\nAn AST representation of a Markdown document\nA single tokentree within a Markdown document\nBreak bewtween two paragraphs (double <code>\\n</code>), not directly …\n<code>[Foo link][ref]</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCreate a termcolor buffer with the <code>Always</code> color choice\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a markdown string to a tokenstream\nWrite formatted output to a termcolor buffer\nShort aliases that we can use in match patterns. If an end …\nWhether two types should or shouldn’t have a paragraph …\nParsing context\nNo value.\nFlags to simple parser function\nOutput of a parse function\n<code>(extracted, remaining)</code>\nCharacter class preceding this one\nPattern replacements\nSome value of type <code>T</code>.\nIgnore escapes before closing pattern, trim content\nWhitespace that is not a newline\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nMost common setting for non top-level parsing: not top …\nParse a buffer\nPerform transformations to text. This splits paragraphs, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTypes that indicate some form of break\nTurn reflinks (links with reference IDs) into normal …\nTake a parsed stream and fix the little things\nVerify a valid ordered list start (e.g. <code>1.</code>) and parse it. …\nParse links. <code>can_be_def</code> indicates that a link definition …\nParse a codeblock. Accounts for &gt;3 backticks and language …\nParse backtick-wrapped inline code. Accounts for &gt;1 …\nNumbered list\nParse a buffer with specified context\nThe simplest kind of patterns: data within start and end …\nResturn <code>(match, residual)</code> to end of line. The EOL is …\nBulleted list\nFind and consume an end pattern, return <code>(match, residual)</code>\nPrevious character\nBlocks that automatically handle their own text wrapping\nIf true, we are at a the topmost level (not recursing a …\nIf there is more than one whitespace char at start, trim …\nIf there is more than one whitespace char at start or end, …\nTrack the position of viewable characters in our buffer\nWidth of the terminal\nPrint to terminal output to a buffer\nEnd of that block, just wrap the line\nWrite the buffer, reset to the default style after each\nChange to be generic on Write for testing. If we have a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>InvalidErrorCode</code> if the code requested does not …\nAnnotation marking the last character of a fully shown …\nLine at the left enclosing the lines of a fully shown …\nAnnotation marking the first character of a fully shown …\nAnnotation under a single line of code\nIs this a single line, multiline or multiline span …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nthe (0-indexed) column for <em>display</em> purposes, counted in …\nEnd column within the line (exclusive)\nthe (0-indexed) column in the file, counted in characters, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this annotation is a vertical line placeholder.\nIs this annotation derived from primary span\nOptional label to display adjacent to the annotation.\nLength of this annotation as displayed in the stderr output\nCompare two <code>MultilineAnnotation</code>s considering only the <code>Span</code> …\nStart column. Note that it is important that this field …\nFor given <code>line</code> inserts <code>string</code> with <code>style</code> after old content …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor given <code>line</code> inserts <code>string</code> with <code>style</code> before old …\nSets <code>chr</code> with <code>style</code> for given <code>line</code>, <code>col</code>. If <code>line</code> does not …\nSets <code>string</code> with <code>style</code> for given <code>line</code>, starting from <code>col</code>. …\nReturns content of <code>StyledBuffer</code> split by lines and line …\nSet <code>style</code> for <code>line</code>, <code>col</code> if:\nSet <code>style</code> for <code>line</code>, <code>col_start..col_end</code> range if:\nFluent messages can use arguments in order to …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturn <code>FluentBundle</code> with localized diagnostics for the …\nReturn <code>FluentBundle</code> with localized diagnostics for the …\nReturns the argument unchanged.\nGets the <code>FluentValue</code> at the <code>key</code> if it exists.\nCalls <code>U::from(self)</code>.\nIterate over a tuple of the key an <code>FluentValue</code>.\nCreates a new empty argument map.\nSets the key value pair.\nConvert diagnostic arguments (a rustc internal type that …\nConvert a <code>DiagMessage</code> to a string, performing translation …\nConvert <code>DiagMessage</code>s to a string, performing translation …\nPre-allocates capacity for arguments.")