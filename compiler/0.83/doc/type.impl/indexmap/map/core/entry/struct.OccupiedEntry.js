(function() {
    var type_impls = Object.fromEntries([["rustc_data_structures",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-OccupiedEntry%3C'_,+K,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#276\">source</a><a href=\"#impl-Debug-for-OccupiedEntry%3C'_,+K,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html\" title=\"struct indexmap::map::core::entry::OccupiedEntry\">OccupiedEntry</a>&lt;'_, K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#277\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","rustc_data_structures::fx::IndexOccupiedEntry"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CIndexedEntry%3C'a,+K,+V%3E%3E-for-OccupiedEntry%3C'a,+K,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#285\">source</a><a href=\"#impl-From%3CIndexedEntry%3C'a,+K,+V%3E%3E-for-OccupiedEntry%3C'a,+K,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.IndexedEntry.html\" title=\"struct indexmap::map::core::entry::IndexedEntry\">IndexedEntry</a>&lt;'a, K, V&gt;&gt; for <a class=\"struct\" href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html\" title=\"struct indexmap::map::core::entry::OccupiedEntry\">OccupiedEntry</a>&lt;'a, K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#286\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(entry: <a class=\"struct\" href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.IndexedEntry.html\" title=\"struct indexmap::map::core::entry::IndexedEntry\">IndexedEntry</a>&lt;'a, K, V&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html\" title=\"struct indexmap::map::core::entry::OccupiedEntry\">OccupiedEntry</a>&lt;'a, K, V&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<IndexedEntry<'a, K, V>>","rustc_data_structures::fx::IndexOccupiedEntry"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MutableEntryKey-for-OccupiedEntry%3C'_,+K,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/mutable.rs.html#131\">source</a><a href=\"#impl-MutableEntryKey-for-OccupiedEntry%3C'_,+K,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/mutable/trait.MutableEntryKey.html\" title=\"trait indexmap::map::mutable::MutableEntryKey\">MutableEntryKey</a> for <a class=\"struct\" href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html\" title=\"struct indexmap::map::core::entry::OccupiedEntry\">OccupiedEntry</a>&lt;'_, K, V&gt;</h3></section></summary><div class=\"docblock\"><p>Opt-in mutable access to <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html\" title=\"struct indexmap::map::core::entry::OccupiedEntry\"><code>OccupiedEntry</code></a> keys.</p>\n<p>See <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/mutable/trait.MutableEntryKey.html\" title=\"trait indexmap::map::mutable::MutableEntryKey\"><code>MutableEntryKey</code></a> for more information.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Key\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/mutable.rs.html#132\">source</a><a href=\"#associatedtype.Key\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/mutable/trait.MutableEntryKey.html#associatedtype.Key\" class=\"associatedtype\">Key</a> = K</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.key_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/mutable.rs.html#133\">source</a><a href=\"#method.key_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/mutable/trait.MutableEntryKey.html#tymethod.key_mut\" class=\"fn\">key_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut K</a></h4></section></summary><div class='docblock'>Gets a mutable reference to the entry’s key, either within the map if occupied,\nor else the new key that was used to find the entry.</div></details></div></details>","MutableEntryKey","rustc_data_structures::fx::IndexOccupiedEntry"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OccupiedEntry%3C'a,+K,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#131\">source</a><a href=\"#impl-OccupiedEntry%3C'a,+K,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"struct\" href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html\" title=\"struct indexmap::map::core::entry::OccupiedEntry\">OccupiedEntry</a>&lt;'a, K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#134\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.index\" class=\"fn\">index</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the index of the key-value pair</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.key\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#143\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.key\" class=\"fn\">key</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a></h4></section></summary><div class=\"docblock\"><p>Gets a reference to the entry’s key in the map.</p>\n<p>Note that this is not the key that was used to find the entry. There may be an observable\ndifference if the key type has any distinguishing features outside of <code>Hash</code> and <code>Eq</code>, like\nextra fields or the memory address of an allocation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#152\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.get\" class=\"fn\">get</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a></h4></section></summary><div class=\"docblock\"><p>Gets a reference to the entry’s value in the map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#160\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable reference to the entry’s value in the map.</p>\n<p>If you need a reference which may outlive the destruction of the\n<a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/enum.Entry.html\" title=\"enum indexmap::map::core::entry::Entry\"><code>Entry</code></a> value, see <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#method.into_mut\" title=\"method indexmap::map::core::entry::OccupiedEntry::into_mut\"><code>into_mut</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#166\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.into_mut\" class=\"fn\">into_mut</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a mut V</a></h4></section></summary><div class=\"docblock\"><p>Converts into a mutable reference to the entry’s value in the map,\nwith a lifetime bound to the map itself.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#171\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: V) -&gt; V</h4></section></summary><div class=\"docblock\"><p>Sets the value of the entry to <code>value</code>, and returns the entry’s old value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#183\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.remove\" class=\"fn\">remove</a>(self) -&gt; V</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: <code>remove</code> disrupts the map order – use <code>swap_remove</code> or <code>shift_remove</code> for explicit behavior.</span></div></span></summary><div class=\"docblock\"><p>Remove the key, value pair stored in the map for this entry, and return the value.</p>\n<p><strong>NOTE:</strong> This is equivalent to <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#method.swap_remove\" title=\"method indexmap::map::core::entry::OccupiedEntry::swap_remove\"><code>.swap_remove()</code></a>, replacing this\nentry’s position with the last element, and it is deprecated in favor of calling that\nexplicitly. If you need to preserve the relative order of the keys in the map, use\n<a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#method.shift_remove\" title=\"method indexmap::map::core::entry::OccupiedEntry::shift_remove\"><code>.shift_remove()</code></a> instead.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#194\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(self) -&gt; V</h4></section></summary><div class=\"docblock\"><p>Remove the key, value pair stored in the map for this entry, and return the value.</p>\n<p>Like <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>Vec::swap_remove</code></a>, the pair is removed by swapping it with\nthe last element of the map and popping it off.\n<strong>This perturbs the position of what used to be the last element!</strong></p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shift_remove\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#205\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.shift_remove\" class=\"fn\">shift_remove</a>(self) -&gt; V</h4></section></summary><div class=\"docblock\"><p>Remove the key, value pair stored in the map for this entry, and return the value.</p>\n<p>Like <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>Vec::remove</code></a>, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n<strong>This perturbs the index of all of those elements!</strong></p>\n<p>Computes in <strong>O(n)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_entry\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#217\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.remove_entry\" class=\"fn\">remove_entry</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: <code>remove_entry</code> disrupts the map order – use <code>swap_remove_entry</code> or <code>shift_remove_entry</code> for explicit behavior.</span></div></span></summary><div class=\"docblock\"><p>Remove and return the key, value pair stored in the map for this entry</p>\n<p><strong>NOTE:</strong> This is equivalent to <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#method.swap_remove_entry\" title=\"method indexmap::map::core::entry::OccupiedEntry::swap_remove_entry\"><code>.swap_remove_entry()</code></a>,\nreplacing this entry’s position with the last element, and it is deprecated in favor of\ncalling that explicitly. If you need to preserve the relative order of the keys in the map,\nuse <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#method.shift_remove_entry\" title=\"method indexmap::map::core::entry::OccupiedEntry::shift_remove_entry\"><code>.shift_remove_entry()</code></a> instead.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove_entry\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#228\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.swap_remove_entry\" class=\"fn\">swap_remove_entry</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a></h4></section></summary><div class=\"docblock\"><p>Remove and return the key, value pair stored in the map for this entry</p>\n<p>Like <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>Vec::swap_remove</code></a>, the pair is removed by swapping it with\nthe last element of the map and popping it off.\n<strong>This perturbs the position of what used to be the last element!</strong></p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shift_remove_entry\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#240\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.shift_remove_entry\" class=\"fn\">shift_remove_entry</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a></h4></section></summary><div class=\"docblock\"><p>Remove and return the key, value pair stored in the map for this entry</p>\n<p>Like <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>Vec::remove</code></a>, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n<strong>This perturbs the index of all of those elements!</strong></p>\n<p>Computes in <strong>O(n)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.move_index\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#257\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.move_index\" class=\"fn\">move_index</a>(self, to: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Moves the position of the entry to a new index\nby shifting all other entries in-between.</p>\n<p>This is equivalent to <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/struct.IndexMap.html#method.move_index\" title=\"method indexmap::map::IndexMap::move_index\"><code>IndexMap::move_index</code></a>\ncoming <code>from</code> the current <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#method.index\" title=\"method indexmap::map::core::entry::OccupiedEntry::index\"><code>.index()</code></a>.</p>\n<ul>\n<li>If <code>self.index() &lt; to</code>, the other pairs will shift down while the targeted pair moves up.</li>\n<li>If <code>self.index() &gt; to</code>, the other pairs will shift up while the targeted pair moves down.</li>\n</ul>\n<p><em><strong>Panics</strong></em> if <code>to</code> is out of bounds.</p>\n<p>Computes in <strong>O(n)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_indices\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/indexmap/2.5.0/src/indexmap/map/core/entry.rs.html#270\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#tymethod.swap_indices\" class=\"fn\">swap_indices</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Swaps the position of entry with another.</p>\n<p>This is equivalent to <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/struct.IndexMap.html#method.swap_indices\" title=\"method indexmap::map::IndexMap::swap_indices\"><code>IndexMap::swap_indices</code></a>\nwith the current <a href=\"https://docs.rs/indexmap/2.5.0/indexmap/map/core/entry/struct.OccupiedEntry.html#method.index\" title=\"method indexmap::map::core::entry::OccupiedEntry::index\"><code>.index()</code></a> as one of the two being swapped.</p>\n<p><em><strong>Panics</strong></em> if the <code>other</code> index is out of bounds.</p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details></div></details>",0,"rustc_data_structures::fx::IndexOccupiedEntry"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[22195]}