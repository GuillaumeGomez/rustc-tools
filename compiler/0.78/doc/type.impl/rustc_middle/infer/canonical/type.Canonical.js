(function() {var type_impls = {
"rustc_middle":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Key-for-Canonical%3CTyCtxt%3C'tcx%3E,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/keys.rs.html#481-487\">source</a><a href=\"#impl-Key-for-Canonical%3CTyCtxt%3C'tcx%3E,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'tcx, T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"rustc_middle/query/keys/trait.Key.html\" title=\"trait rustc_middle::query::keys::Key\">Key</a> for <a class=\"type\" href=\"rustc_middle/infer/canonical/type.Canonical.html\" title=\"type rustc_middle::infer::canonical::Canonical\">Canonical</a>&lt;'tcx, T&gt;</h3></section></summary><div class=\"docblock\"><p>Canonical query goals correspond to abstract trait operations that\nare not tied to any crate in particular.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.CacheSelector\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CacheSelector\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"rustc_middle/query/keys/trait.Key.html#associatedtype.CacheSelector\" class=\"associatedtype\">CacheSelector</a> = <a class=\"struct\" href=\"rustc_query_system/query/caches/struct.DefaultCacheSelector.html\" title=\"struct rustc_query_system::query::caches::DefaultCacheSelector\">DefaultCacheSelector</a>&lt;<a class=\"struct\" href=\"rustc_middle/ty/struct.Canonical.html\" title=\"struct rustc_middle::ty::Canonical\">Canonical</a>&lt;<a class=\"struct\" href=\"rustc_middle/ty/context/struct.TyCtxt.html\" title=\"struct rustc_middle::ty::context::TyCtxt\">TyCtxt</a>&lt;'tcx&gt;, T&gt;&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_span\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/keys.rs.html#484-486\">source</a><a href=\"#method.default_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/query/keys/trait.Key.html#tymethod.default_span\" class=\"fn\">default_span</a>(&amp;self, _tcx: <a class=\"struct\" href=\"rustc_middle/ty/context/struct.TyCtxt.html\" title=\"struct rustc_middle::ty::context::TyCtxt\">TyCtxt</a>&lt;'_&gt;) -&gt; <a class=\"struct\" href=\"rustc_span/span_encoding/struct.Span.html\" title=\"struct rustc_span::span_encoding::Span\">Span</a></h4></section></summary><div class='docblock'>In the event that a cycle occurs, if no explicit span has been\ngiven for a query with key <code>self</code>, what span should we use?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.key_as_def_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/keys.rs.html#40-42\">source</a><a href=\"#method.key_as_def_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/query/keys/trait.Key.html#method.key_as_def_id\" class=\"fn\">key_as_def_id</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"rustc_span/def_id/struct.DefId.html\" title=\"struct rustc_span::def_id::DefId\">DefId</a>&gt;</h4></section></summary><div class='docblock'>If the key is a <a href=\"rustc_span/def_id/struct.DefId.html\" title=\"struct rustc_span::def_id::DefId\"><code>DefId</code></a> or <code>DefId</code>–equivalent, return that <code>DefId</code>.\nOtherwise, return <code>None</code>.</div></details><section id=\"method.ty_def_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustc_middle/query/keys.rs.html#44-46\">source</a><a href=\"#method.ty_def_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustc_middle/query/keys/trait.Key.html#method.ty_def_id\" class=\"fn\">ty_def_id</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"rustc_span/def_id/struct.DefId.html\" title=\"struct rustc_span::def_id::DefId\">DefId</a>&gt;</h4></section></div></details>","Key","rustc_middle::traits::query::CanonicalAliasGoal","rustc_middle::traits::query::CanonicalTyGoal","rustc_middle::traits::query::CanonicalPredicateGoal","rustc_middle::traits::query::CanonicalTypeOpAscribeUserTypeGoal","rustc_middle::traits::query::CanonicalTypeOpEqGoal","rustc_middle::traits::query::CanonicalTypeOpSubtypeGoal","rustc_middle::traits::query::CanonicalTypeOpProvePredicateGoal","rustc_middle::traits::query::CanonicalTypeOpNormalizeGoal","rustc_middle::traits::solve::inspect::CanonicalState","rustc_middle::traits::solve::CanonicalInput","rustc_middle::traits::solve::CanonicalResponse","rustc_middle::ty::sty::CanonicalPolyFnSig","rustc_middle::ty::typeck_results::CanonicalUserType","rustc_middle::query::queries::check_tys_might_be_eq::Key","rustc_middle::query::queries::check_tys_might_be_eq::LocalKey"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()