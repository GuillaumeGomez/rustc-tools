searchState.loadedDescShard("rustc_serialize", 0, "Support code for encoding and decoding types.\nTrait for types that can be deserialized\nThis current does not support <code>f32</code> nor <code>f64</code>, as they’re …\nTrait for types that can be serialized\nA note about error handling.\nSupport code for encoding and decoding types.\nAddition, but only overflow checked when …\nSee <code>DebugStrictAdd</code>.\nSee <code>DebugStrictAdd</code>.\nSee <code>DebugStrictAdd</code>.\nReturns the length of the longest LEB128 encoding of all …\nReturns the length of the longest LEB128 encoding for <code>T</code>, …\nThe size of the buffer in <code>FileEncoder</code>.\nContains the error value\n<code>FileEncoder</code> encodes data to file via fixed-size buffer.\nAn integer that will always encode to 8 bytes.\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhile we could manually expose manipulation of the decoder …\nHelper for calls where <code>FileEncoder::write_with</code> always …\nWrite up to <code>N</code> bytes to this encoder.\nTrait for types that can be deserialized\nThis current does not support <code>f32</code> nor <code>f64</code>, as they’re …\nTrait for types that can be serialized\nA note about error handling.\nA byte that cannot occur in UTF8 sequences. Used to mark …")