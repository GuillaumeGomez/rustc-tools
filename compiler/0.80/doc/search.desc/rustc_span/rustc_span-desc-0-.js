searchState.loadedDescShard("rustc_span", 0, "Source positions and related helper functions.\nA failed attempt has been made to load the external source.\nNo attempt has been made to load the external source.\nCommand line.\nA byte offset.\nA character offset.\nStrings provided as crate attributes in the CLI.\nCustom sources for explicit parser calls from plugins and …\nThe dummy span has zero position, length, and context, and …\nThe source file lines, in undecoded difference list form.\nContains the error value\nUseful type to use with <code>Result&lt;&gt;</code> indicate that an error …\nThe state of the lazy external source loading mechanism of …\nDifferentiates between real files and common virtual files.\nRequirements for a <code>StableHashingContext</code> to be used in this …\nPost-substitution inline assembly from LLVM.\nRange inside of a <code>Span</code> used for diagnostics when we only …\nThe source file lines, in decoded (random-access) form.\nA source code location used for error reporting.\nDisplay the path before the application of rewrite rules …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nHack in <code>src/librustc_ast/parse.rs</code>.\nIdentifies an offset of a multi-byte character in a …\nIdentifies an offset of a non-narrow character in a …\nIdentifies an offset of a character that was normalized …\nContains the success value\nThe external source has been loaded already.\nCall to <code>quote!</code>.\nA byte offset relative to file beginning.\nFor remapped paths (namely paths into libstd that have …\nDisplay the path after the application of rewrite rules …\nPer-session global variables: this struct is stored in …\nDisplay only the filename, as a way to reduce the …\nA single source in the <code>SourceMap</code>.\nThe source file lines in difference list form. This …\nThe hash of the on-disk source file used for debug info.\nA compressed span.\nRepresents a span.\nThis trait is used to allow decoder specific encodings of …\nThis trait is used to allow encoder specific encodings of …\nThis is a SourceFile identifier that is used to correlate …\nRepresents a tab character, represented visually with a …\nNo external source has to be loaded, since the <code>SourceFile</code> …\nRepresents a wide (full-width) character.\nZero value of the index.\nRepresents a zero-width character.\nAdd externally loaded source. If the hash of the input …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nConverts an relative <code>RelativeBytePos</code> to a <code>CharPos</code> relative …\nThe number of bytes, <code>&gt;= 2</code>.\nAlways 1, 2, or 4. Always as small as possible, while …\nIndicates which crate this <code>SourceFile</code> was imported from.\nThe (0-based) column offset.\nThe (0-based) column offset when displayed.\nReturns whether or not the file contains the given …\nReturns <code>true</code> if <code>self</code> fully encloses <code>other</code>.\nThis converts the <code>lines</code> field to contain …\nDefault edition, no source map.\nNo source map.\nInformation about where the macro came from, if this piece …\nThe difference between original and normalized string at …\nEdit distances.\nAs a local identifier, a <code>CrateNum</code> is only meaningful …\nColumn in line where span ends, starting from 0, exclusive.\nThe external source code (used for external crates, which …\nInformation about the original source.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nGets a line from the list of pre-computed line-beginnings. …\nThe bytes of the hash.\nMachinery for hygienic macros.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the path suitable for reading from the file system …\nReturns the path suitable for reading from the file system …\nReturns <code>true</code> if this is a dummy span with any hygienic …\nThe (1-based) line number.\nIndex of line, starting from 0.\nReturns the <code>BytePos</code> of the beginning of the current line.\nIndex of line, starting from 0.\nLocations of lines beginnings in the source code.\nReturns the path suitable for reading from the file system …\nReturns the path suitable for reading from the file system …\nLooks up the file’s (1-based) line number and (0-based …\nLooks up the file’s (1-based) line number, (0-based …\nFinds the line containing the given position. The return …\nCheck if the stored hash matches the hash of the string.\nMaps a macro argument token into use of the corresponding …\nLocations of multi-byte characters in the source code.\nThe name of the file that the source came from. Source …\nWidth of characters that are not narrow in the source code.\nReplaces <code>\\r\\n</code> with <code>\\n</code> in-place in <code>src</code>.\nNormalizes the source code and records the normalizations.\nCalculates a normalized byte position from a byte offset …\nLocations of characters removed during normalization.\nThe number of diffs encoded in <code>raw_diffs</code>. Always one less …\nCalculates the original byte position relative to the …\nReturns the relative offset of the character in the …\nThe relative offset of the character in the <code>SourceFile</code>.\nThe relative offset of the character in the <code>SourceFile</code>.\nThis may include transient local filesystem information. …\nThe diffs in “raw” form. Each segment of <code>bytes_per_diff</code>…\nReturns the path suitable for embedding into build …\nRemoves UTF-8 BOM, if any.\nThe byte length of this source.\nTypes for tracking pieces of source code within a crate.\nThe session’s source map, if there is one. This field …\nThe complete source code.\nThe source code’s hash.\nA hash of the filename &amp; crate-id, used for uniquely …\nColumn in line where span begins, starting from 0.\nThe start position of this source in the <code>SourceMap</code>.\nAn “interner” is a data structure that associates …\nReturn the path remmapped or not depending on the …\nDon’t use this outside of <code>DiagCtxtInner::emit_diagnostic</code>!\nAccesses <code>sess.opts.unstable_opts.incremental_ignore_spans</code> …\nReturns the width of the character, 0 (zero-width) or 2 …\nAvoid if possible, <code>Span::map_ctxt</code> should be preferred.\nAvoid if possible, <code>Span::with_parent</code> should be preferred.\nIndex of the file inside metadata.\n<code>local_path</code> is the (host-dependent) local path to the file. …\n<code>virtual_name</code> is the stable path rustc will store …\nFinds all newlines, multi-byte characters, and non-narrow …\nChecks 16 byte chunks of text at a time. If the chunk …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe crate root is always assigned index 0 by the AST Map …\nA <code>DefId</code> identifies a particular <em>definition</em>, by combining a …\nA DefIndex is an index into the hir-map for a crate, …\nA <code>DefPathHash</code> is a fixed-size representation of a <code>DefPath</code> …\nItem definitions in the currently-compiled crate would …\nA <code>LocalDefId</code> is equivalent to a <code>DefId</code> with …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nAn occupied entry.\nAn occupied entry.\nA <code>StableCrateId</code> is a 64-bit hash of a crate name, together …\nA vacant entry.\nA vacant entry.\nZero value of the index.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the item is defined in the crate currently …\nMakes a local <code>DefId</code> from the given <code>DefIndex</code>.\nReturns the crate-local part of the DefPathHash.\nBuilds a new DefPathHash with the given StableCrateId and …\nComputes the stable ID for a crate with the given name and …\nReturns the StableCrateId identifying the crate this …\nFinds the edit distance between two strings.\nProvides a word similarity score between two words that …\nFinds the best match for a given word in the given …\nFinds the best match for given word in the given iterator …\nFind the best match for multiple words\nThe edition of the compiler. (See RFC 2052.)\nThe 2015 edition\nThe 2018 edition\nThe 2021 edition\nThe 2024 edition\nAre we allowed to use features from the Rust 2018 edition?\nAre we allowed to use features from the Rust 2021 edition?\nAre we allowed to use features from the Rust 2024 edition?\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs this edition 2015?\nUsed as a return value to signify a fatal error occurred.\nThis is a marker for a fatal compiler error used with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of AST transform.\nTransform done by the compiler on the AST.\nAn attribute macro <code>#[foo]</code>.\nA bang macro <code>foo!()</code>.\n<code>async Fn()</code> bound modifier\nWe desugar <code>if c { i } else { e }</code> to …\nA derive macro <code>#[derive(Foo)]</code>\nDesugaring done by the compiler during AST lowering.\nThe kind of compiler desugaring.\nA subset of properties from both macro definition and …\nA unique hash value associated to an expansion.\nA unique ID associated with a macro invocation and …\nA unique ID associated with a macro invocation and …\nExpansion kind.\nAdditional information used to assist in decoding hygiene …\nAdditional information used to assist in decoding hygiene …\nA unique ID associated with a macro invocation and …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nExpansion produced by a macro.\nThe kind of macro invocation or definition.\nIdentifier produced by an opaque expansion is always …\nDesugaring of an <code>impl Trait</code> in return type position to an …\nThe ID of the theoretical expansion that generates freshly …\nNo expansion, aka root expansion. Only <code>ExpnId::root()</code> has …\nIdentifier produced by a semi-transparent expansion may be …\nA <code>SyntaxContext</code> represents a chain of pairs …\nA property of a macro expansion that determines how …\nIdentifier produced by a transparent expansion is always …\nZero value of the index.\nZero value of the index.\nAdjust this context for resolution in a scope created by …\nSuppresses the <code>unsafe_code</code> lint for code produced by this …\nList of <code>#[unstable]</code>/feature-gated features that the macro …\nExtend a syntax context with a given expansion and …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nAssert that the provided <code>HashStableContext</code> is configured …\nThe location of the actual macro invocation or syntax …\nShould debuginfo for the macro be collapsed to the …\nDecode an expansion from the metadata of a foreign crate.\nMaps serialized <code>SyntaxContext</code> ids that are currently being …\nThe span of the macro definition (possibly dummy). This …\nConstructs expansion data with default properties.\nThe description wording should combine well with “…\nUsed to force two <code>ExpnData</code>s to have different <code>Fingerprint</code>s.\nName of the crate to which <code>$crate</code> with this context would …\nEdition of the crate in which the macro is defined.\nReturns span for the macro which originally caused this …\nReturns span for the macro which originally caused this …\nMaps the <code>local_hash</code> of an <code>ExpnData</code> to the next …\nData and hash information from external crates. We may …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nAdjust this context for resolution in a scope created by …\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of this expansion - macro or compiler desugaring.\nThe <code>SyntaxContexts</code> that we have serialized (e.g. as a …\nEach expansion should have an associated expansion data, …\nReturns the crate-local part of the ExpnHash.\nA set of serialized <code>SyntaxContext</code> ids that are currently …\nEnables the macro helper hack (<code>ident!(...)</code> -&gt; …\nThe <code>DefId</code> of the macro being invoked, if this <code>ExpnData</code> …\nBuilds a new ExpnHash with the given StableCrateId and …\nLike <code>SyntaxContext::adjust</code>, but also normalizes <code>self</code> to …\nThis context, but with all transparent and …\nThis context, but with all transparent expansions filtered …\n<code>ctxt.outer_expn_data()</code> is equivalent to but faster than …\n<code>expn_id.outer_expn_is_descendant_of(ctxt)</code> is equivalent to …\nThe expansion that produced this expansion.\nThe normal module (<code>mod</code>) in which the expanded macro was …\nRegister an expansion which has been decoded from the …\nRegister an expansion which has been decoded from the …\nPulls a single mark off of the syntax context. This …\nUndo <code>glob_adjust</code> if possible:\nThe ID of the theoretical expansion that generates freshly …\nRecord the fact that we need to serialize the …\nAll <code>SyntaxContexts</code> for which we have written …\nReturns the StableCrateId identifying the crate this …\nUpdates the <code>disambiguator</code> field of the corresponding …\nIn order to have good line stepping behavior in debugger, …\nExtension trait for self-profiling purposes: allows to …\nRecords the following event arguments within the current …\nAn abstraction over the fs operations used by the Parser.\nA FileLoader that uses std::fs to load real files.\nUsed to construct a <code>SourceMap</code> with <code>SourceMap::with_inputs</code>.\nIf there is a doctest offset, applies it to the line.\nReturns a new span representing just the last character of …\nQuery the existence of a file.\nFinds the width of the character, either before or after …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven a <code>Span</code>, return a span ending in the closest <code>{</code>. This …\nThe algorithm used for hashing the contents of each source …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads source file as a binary blob.\nFor a global <code>BytePos</code>, computes the local offset within the …\nLooks up source information about a <code>BytePos</code>.\nIf the corresponding <code>SourceFile</code> is empty, does not return …\nReturn the SourceFile that contains the given <code>BytePos</code>\nReturns the index of the <code>SourceFile</code> (in <code>self.files</code>) that …\nTries to find the span of the semicolon of a macro call …\nApplies any path prefix substitution as defined by the …\nAllocates a new <code>SourceFile</code> representing a source file from …\nCreates a new <code>SourceFile</code>. If a file already exists in the …\nReturns a new span representing the next character after …\nReturns the span itself if it doesn’t come from a macro …\nRead the contents of a potentially non-UTF-8 file into …\nRead the contents of a UTF-8 file into memory. This …\nAttempts to (heuristically) reverse a prefix mapping.\nExtends the given <code>Span</code> to previous character while the …\nExtends the given <code>Span</code> to contain the entire line it is on.\nExtends the given <code>Span</code> to just before the next occurrence …\nExtends the given <code>Span</code> to just after the previous …\nExtends the given <code>Span</code> to just after the previous …\nExtends the given <code>Span</code> while the next character matches …\nExtends the span to include any trailing whitespace, or …\nCheck whether span is followed by some specified expected …\nGiven a <code>Span</code>, gets a shorter one until <code>predicate</code> yields …\nGiven a <code>Span</code>, tries to get a shorter span ending just …\nFormat the span location to be printed in diagnostics. …\nFormat the span location suitable for embedding in build …\nReturns the source snippet as <code>String</code> after the given <code>Span</code>.\nReturns the source snippet as <code>String</code> before the given <code>Span</code>.\nReturns the source snippet as <code>String</code> corresponding to the …\nExtracts the source surrounding the given <code>Span</code> using the …\nGiven a <code>Span</code>, tries to get a shorter span ending before …\nGiven a <code>Span</code>, gets a new <code>Span</code> covering the first token and …\nGiven a <code>Span</code>, gets a new <code>Span</code> covering the first token …\nGiven a ‘Span’, tries to tell if it’s wrapped by “&lt;…\nReturns a new span representing just the first character …\nGets the span of a statement. If the statement is a macro …\nExpand a relative path to an absolute path with remapping …\nExpand a relative path to an absolute path <strong>without</strong> …\nApplies any path prefix substitution as defined by the …\nA <code>MonotonicVec</code> is a <code>Vec</code> which can only be grown. Once …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe dummy span has zero position, length, and context, and …\nA compressed span.\nChecks if a span is “internal” to a macro in which …\nChecks if a span is “internal” to a macro in which …\nAre we allowed to use features from the Rust 2018 edition?\nAre we allowed to use features from the Rust 2021 edition?\nAre we allowed to use features from the Rust 2024 edition?\nReturns a <code>Span</code> between the end of <code>self</code> to the beginning of …\nGate suggestions that would not be appropriate in a …\nReturns <code>true</code> if <code>self</code> fully encloses <code>other</code>.\nThis function is used as a fast path when decoding the …\nInternal function to translate between an encoded span and …\nReturns the compiler desugaring that created this span, or …\nEdition of the crate from which this span came.\nWalk down the expansion ancestors to find a span with the …\nWalk down the expansion ancestors to find a span that’s …\nWalk down the expansion ancestors to find a span that’s …\nRecursively walk down the expansion ancestors to find the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if this span comes from any kind of macro, …\nHashes a span in a stable way. We can’t directly hash …\nReturns <code>true</code> if <code>span</code> originates in a derive-macro’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this span arises from a compiler desugaring of …\nReturns <code>true</code> if this is a dummy span with any hygienic …\nReturns <code>true</code> if <code>hi == lo</code>.\nIs this edition 2015?\nReuses the span but adds information like the kind of the …\nReturns <code>true</code> if <code>self</code> touches <code>other</code>.\nReturns <code>true</code> if <code>self</code> touches or adjoins <code>other</code>.\nThe <code>Span</code> for the tokens in the previous macro expansion …\nPrepare two spans to a combine operation like <code>to</code> or <code>between</code>…\nReturns a new span representing an empty span at the end …\nReturns a new span representing an empty span at the …\nReturns the source callee.\nReturns the source span – this is either the supplied …\nReturns <code>true</code> if the spans are equal with regards to the …\nSplits a span into two composite spans around a certain …\nReturns <code>self</code> if <code>self</code> is not the dummy span, and <code>other</code> …\nReturns a <code>Span</code> that would enclose both <code>self</code> and <code>end</code>.\nReturns <code>Some(span)</code>, where the end is trimmed by the start …\nReturns <code>Some(span)</code>, where the start is trimmed by the end …\nCheck if you can select metavar spans for the given spans …\nReturns a <code>Span</code> from the beginning of <code>self</code> until the …\nEquivalent of <code>Span::call_site</code> from the proc macro API, …\nProduces a span with the same location as <code>self</code> and context …\nEquivalent of <code>Span::def_site</code> from the proc macro API, …\nEquivalent of <code>Span::mixed_site</code> from the proc macro API, …\nThis span, but in a larger context, may switch to the …\nThe most general type to print identifiers.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nAn newtype around <code>Ident</code> that calls …\nAn interned string.\nZero value of the index.\nAccess the underlying string. This is a slowish operation …\nAccess the underlying string. This is a slowish operation …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nReturns <code>true</code> if this symbol can be a raw identifier.\nSpan used for retrieving the crate name to which <code>$crate</code> …\nThis implementation is supposed to be used when printing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMaps a string to an identifier with a dummy span.\nMaps a string and a span to an identifier.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nGet the symbol as a string.\nExtracts the value of this index as a <code>usize</code>.\nMaps a string to its interned representation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the symbol is <code>true</code> or <code>false</code>.\nA keyword or reserved identifier that can be used as a …\nA keyword or reserved identifier that can be used as a …\nIs this symbol was interned in compiler’s <code>symbols!</code> macro\nWe see this identifier in a normal identifier position, …\nReturns <code>true</code> if the token is either a special identifier …\nReturns <code>true</code> for reserved identifiers used internally for …\nReturns <code>true</code> if the token is a keyword reserved for …\nReturns <code>true</code> if the token is a keyword used in the …\nThis module contains all the defined keyword <code>Symbol</code>s.\nThe most general <code>IdentPrinter</code> constructor. Do not use this.\nConstructs a new identifier from a symbol and a span.\nfor use in Decoder only\n“Normalize” ident for use in comparisons using “…\n“Normalize” ident for use in comparisons using “item …\nThis module contains all the defined non-keyword <code>Symbol</code>s.\nThis method is supposed to be used in error messages, so it…\nConstructs a new identifier with a dummy span.\nReplaces <code>lo</code> and <code>hi</code> with those from <code>span</code>, but keep hygiene …\nGet the symbol for an integer.")