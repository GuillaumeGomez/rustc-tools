searchState.loadedDescShard("rustc_mir_build", 0, "Construction of MIR from HIR.\nRaw content of Fluent resource for this crate, generated …\nThe MIR is built from some typed high-level IR (THIR). …\nThe <code>BlockAnd</code> “monad” packages up the new basic block …\n<code>ForGuard</code> indicates whether we are talking about:\nThe exceptional case is identifiers in a match arm’s …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nFor all cases where you aren’t sure or that are too …\nUse this variant when whatever you are converting with …\nIn the usual case, a <code>HirId</code> for an identifier maps to at …\nEvaluation is currently within a statement.\nGeneric mark meaning that the block occurred as a …\nEvaluation is currently within the tail expression of a …\nZero value of the index.\nCompile <code>expr</code>, yielding a compile-time constant. Assumes …\nReturns an operand suitable for use until the end of the …\nReturns an operand suitable for use until the end of the …\nReturns an rvalue suitable for use until the end of the …\nCompile <code>expr</code> into a value that can be used as an operand. …\nCompile <code>expr</code>, yielding a place that we can move from etc.\nThis is used when constructing a compound <code>Place</code>, so that …\nCompile <code>expr</code>, yielding a place that we can move from etc. …\nThis is used when constructing a compound <code>Place</code>, so that …\nCompile <code>expr</code>, yielding an rvalue.\nCompile <code>expr</code> into a fresh temporary. This is used when …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nAppend <code>AscribeUserType</code> statements onto the end of <code>block</code> …\nCreates an <code>Assert</code> terminator and return the success block. …\nInitializes each of the bindings from the candidate by …\nBinding for guards is a bit different from binding for the …\nBinds the variables and ascribes types for a given <code>match</code> …\nThe block-context: each time we build the code within an …\nSets up the drops for breaking from <code>block</code> due to an <code>if</code> …\nSets up the drops for explict tail calls.\nSets up the drops for breaking from <code>block</code> to <code>target</code>.\nUtility function for <em>non</em>-scope code to build their own …\nBuild the unwind and coroutine drop trees.\nBuild a drop tree for a breakable scope.\nPerform <code>let temp = &lt;ty as Deref&gt;::deref(&amp;place)</code>. or …\nRoutines for manipulating the control-flow graph.\nUnschedules any drops in the top scope.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompare using the provided built-in comparison operator\nConstruct MIR for an item that has had errors in type …\nthe main entry point for building MIR for a function\nSets up a path that performs all required cleanup for …\nCollects additional coverage information during MIR …\nCreate the initial <code>Candidate</code>s for a <code>match</code> expression.\nGiven a match-pair that corresponds to an or-pattern, …\nLooks at the topmost frame on the BlockContext and reports …\nTraverses the frames on the <code>BlockContext</code>, searching for …\nProvides the implementation of the <code>custom_mir</code> attribute.\nEach binding (<code>ref mut var</code>/<code>ref var</code>/<code>mut var</code>/<code>var</code>, where the …\nDeclares the bindings of the given patterns and returns …\nDeclare bindings in a guard. This has to be done when …\nReturns the DropIdx for the innermost drop if the function …\nThis is similar to diverge_cleanup except its target is …\nPrepares to create a path that performs all required …\nTakes a list of candidates such that some of the candidates…\nBuilds MIR from expressions. As a caller into this module, …\nCompile <code>expr</code>, storing the result into <code>destination</code>, which …\nCreates a false edge to <code>imaginary_target</code> and a real edge to\nBuilds and returns <code>MatchPairTree</code> subtrees, one for each …\nTemporaries with fixed indexes. Used so that if-let guards …\nScope of temporaries that should be deduplicated using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nIn the <code>origin</code> block, push a <code>goto -&gt; target</code> terminator.\nThe guard-context: each time we build the guard expression …\nStart a breakable scope, which tracks where <code>continue</code>, <code>break</code>…\nStart an if-then scope which tracks drop for <code>if</code> …\nConvenience wrapper that pushes a scope and then executes <code>f</code>\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnpacks <code>BlockAnd&lt;()&gt;</code> into a <code>BasicBlock</code>.\nConvenience function for creating a literal operand, one …\nReturns the scope that we should use as the lifetime of an …\nThese are the id’s of names that are bound by patterns …\nLower a captured upvar. Note we might not know the actual …\nLower an index expression\nLowers a <code>let</code> expression that appears in a suitable context …\nLower the bindings, guards and arm bodies of a <code>match</code> …\nThe entrypoint of the matching algorithm. Create the …\nEvaluate the scrutinee and add the PlaceMention for it.\nThe main match algorithm. It begins with a set of …\nConstruct the decision tree for <code>candidates</code>. Don’t call …\nGenerates MIR for a <code>match</code> expression.\nCode related to match expressions. These are sufficiently …\nWalks upwards from <code>orig_id</code> to find a node which might …\nPossibly creates a new source scope if <code>current_root</code> and …\nTry to merge all of the subcandidates of the given …\nConstruct the MIR for a given <code>DefId</code>.\nMiscellaneous builder routines that are not specific to …\nCreates a new source scope, nested in the current one.\nCompare two values using <code>&lt;T as std::compare::PartialEq&gt;::eq</code>…\nPick a test to run. Which test doesn’t matter as long as …\nIdentifies what test is needed to decide if <code>match_pair</code> is …\nPops a scope, which should have region scope <code>region_scope</code>, …\nBuilds <code>MatchPairTree</code> subtrees for the prefix/middle/suffix …\nAdds a dummy statement whose only role is to associate a …\nPush a scope onto the stack. You can then build code in …\nIndicates that the “local operand” stored in <code>local</code> is …\nNever subcandidates may have a set of bindings …\nIndicates that <code>place</code> should be dropped on exit from …\nManaging the scope stack. The scopes are tied to lexical …\nThe current set of scopes, updated as we traverse; see the …\nLink up matched candidates.\nSimplify a list of match pairs so they all require a test. …\nGiven that we are performing <code>test</code> against <code>test_place</code>, this …\nGiven a test, we sort the input candidates into several …\nGiven a span and the current source scope, make a …\nThe vector of all scopes that we have created thus far; we …\nBuilds a block of MIR statements to evaluate the THIR <code>expr</code>.\nEmits a <code>StatementKind::StorageLive</code> for the given var, and …\nAdds a new temporary value of type <code>ty</code> storing the result of\nThis is the most subtle part of the match lowering …\nIf more match pairs remain, test them after each …\nLowers a condition in a way that ensures that variables …\nUpdate a block pointer and return the value. Use it like …\nMaps <code>HirId</code>s of variable bindings to the <code>Local</code>s created for …\nIf branch coverage is enabled, inject marker statements …\nIf branch coverage is enabled, inject marker statements …\nIf condition coverage is enabled, inject extra blocks and …\nVisit all of the primary bindings in a patterns, that is, …\nReturns a zero literal operand for the appropriate type, …\nIf true, then statement discards result from evaluating …\n<code>Span</code> of the tail expression.\nIf true, then the surrounding context of the block ignores …\nCollects coverage-related information during MIR building, …\nPresent if branch coverage is enabled.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nWhen visiting the associated expression as a branch …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the associated expression is nested within an odd …\nPresent if MC/DC coverage is enabled.\nCreates a new coverage info builder, but only if coverage …\nMaps condition expressions to their enclosing <code>!</code>, for …\nUnary <code>!</code> expressions inside an <code>if</code> condition are lowered by …\nThe MCDC bitmap scales exponentially (2^n) based on the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDecision depth is given as a u16 to reduce the size of the …\nTo construct condition evaluation tree.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBodies are of the form:\nExpressions should only ever be matched on after …\nHelper macro for parsing custom MIR.\nSee docs in build/expr/mod.rs\nSee docs in build/expr/mod.rs\nSee docs in build/expr/mod.rs\nSee docs in <code>build/expr/mod.rs</code>.\nSee docs in build/expr/mod.rs\nSee docs in build/expr/mod.rs\nDenotes the start of a <code>Place</code>.\nThe “outermost” place that holds this value.\n<code>PlaceBuilder</code> is used to create places during MIR …\nWhen building place for an expression within a closure, …\nSame as <code>.clone().project(..)</code> but more efficient\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nGiven a list of MIR projections, convert them to list of …\nPrecise capture is enabled if user is using Rust Edition …\nGiven a closure, returns the index of a capture within the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the <code>proj_possible_ancestor</code> represents an …\nAttempts to resolve the <code>PlaceBuilder</code>. Returns <code>None</code> if this …\nReturns projections remaining after stripping an initial …\nTakes an upvar place and tries to resolve it into a …\nCreates a <code>Place</code> or returns <code>None</code> if an upvar cannot be …\nDefId of the closure\nHirId of the upvar\nBest generated by <code>as_rvalue</code>. This is usually the case.\nA literal like <code>23</code> or <code>&quot;foo&quot;</code>. Does not include constant …\nBest generated by <code>into</code>. This is generally exprs that cause …\nAn assignable memory location like <code>x</code>, <code>x.f</code>, <code>foo()[3]</code>, that …\nSomething that generates a new value at runtime, like <code>x + y</code>\nRvalues fall into different “styles” that will …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines the category for a given expression. Note that …\n<code>ArmHasGuard</code> is a wrapper around a boolean flag. It …\nIndicates that the type of <code>source</code> must be a subtype of the …\nBranch corresponding to this constant.\nShould lowering a <code>let</code> expression also declare its bindings?\nCall <code>Deref::deref[_mut]</code> on the value.\nUsed by <code>Builder::bind_matched_candidate_for_arm_body</code> to …\nTest for equality with value, possibly after an unsizing …\nFailure branch for tests with two possible outcomes, and …\nA pattern in a form suitable for generating code.\nTest what value a <code>bool</code> has.\nTest that the length of the slice is equal to <code>len</code>.\nLet expressions are not permitted in this context, so it …\nNode in a tree of “match pairs”, where each pair …\nAssert unreachability of never patterns.\nNo, don’t declare <code>let</code> bindings, because the caller …\nNo, don’t emit <code>StorageLive</code>. The caller has taken …\nNo, don’t schedule drops. The caller has taken …\nData extracted from a pattern that doesn’t affect which …\nTest whether the value falls within an inclusive or …\nUsed by <code>Builder::storage_live_binding</code> and …\nSuccess branch, used for tests with two possible outcomes.\nTest what enum variant a value is.\nTest what value an integer or <code>char</code> has.\nA test to perform to determine which <code>Candidate</code> matches a …\nThe branch to be taken after a test.\nSee <code>Test</code> for more.\nArguments to <code>Builder::then_else_break_inner</code> that are …\nBranch corresponding to this variant.\nYes, declare <code>let</code> bindings as normal for <code>if</code> conditions.\nYes, emit <code>StorageLive</code> as normal.\nYes, the relevant functions should also schedule drops as …\nTypes that must be asserted.\nBindings that must be established.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDetermines how bindings should be handled when lowering <code>let</code>…\nIf the candidate matches, bindings and ascriptions must be …\nThe earliest block that has only candidates &gt;= this one as …\nRecursively builds a match pair tree for the given pattern …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncorporates an already-simplified <code>FlatPat</code> into a new …\n…and if there is a guard it must be evaluated; if it’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this corresponds to a never pattern.\nTo match the pattern, all of these must be satisfied…\nFor the candidate to match, all of these must be satisfied…\nCreates a <code>FlatPat</code> containing a simplified <code>MatchPairTree</code> …\nThe <code>false_edge_start_block</code> of the next candidate.\nIf we filled <code>self.subcandidate</code>, we store here the span of …\nThe block to branch to if the guard or a nested candidate …\nThe pattern this was created from.\nThis place…\nThe block before the <code>bindings</code> have been established.\nSimplifying Candidates\n<code>Span</code> of the original pattern.\nReturns whether the first match pair of this candidate is …\n…and if this is non-empty, one of these subcandidates …\n… and these subpairs must match.\nUsed as the temp scope for lowering <code>expr</code>. If absent (for …\n… must pass this test…\nA depth-first traversal of the <code>Candidate</code> and all of its …\nVisit the leaf candidates (those with no subcandidates) …\nThe enum type being tested.\nTemporary to store the result of <code>deref()</code>/<code>deref_mut()</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDetermine the set of places that have to be stable across …\nStore for each place the kind of borrow to take. In case …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBase of the scrutinee place. Used to distinguish bindings …\nVisit all the bindings of these candidates. Because …\nThe target of an expression that breaks out of a scope\nA single node in the drop tree.\nSubset of <code>DropNode</code> used for reverse lookup in a hash table.\nA tree of drops that we have deferred lowering. It’s …\nA trait that determined how DropTree creates its blocks and\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nZero value of the index.\nAdds a node to the drop tree, consisting of drop data and …\nRegisters <code>from</code> as an entry point to this drop tree, at <code>to</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nAssign blocks for all of the drops in the drop tree that …\nThe destination of the loop/block expression itself (i.e., …\nDrops that happen on the <code>break</code>/<code>return</code> path.\nThe current set of breakable scopes. See module comment …\nBuilds the MIR for a given drop tree.\nBuilds drops for <code>pop_scope</code> and <code>leave_top_scope</code>.\nThe drop index that will drop everything in and below this …\nThe drop index that will drop everything in and below this …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDrops that happen on the <code>continue</code> path.\nDrops that need to be done on paths to the <code>CoroutineDrop</code> …\nInfo about the drop to be performed at this node in the …\nset of places to drop when exiting this scope. This starts …\nNodes in the drop tree, containing drop data and a link to …\nDrops that happen on the <code>else</code> path.\nEdges into the <code>DropTree</code> that need to be added once it’s …\nMap for finding the index of an existing node, given its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nThe scope of the innermost if-then currently being lowered.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is a value Drop or a StorageDead.\nLinks a block outside the drop tree, <code>from</code>, to the block <code>to</code> …\nlocal to drop\nCreate a new block for the tree. This should call either …\nWhether there’s anything to do for the cleanup path, …\nIndex of the “next” drop to perform (in drop order, …\nthe region span of this scope within source code.\nRegion scope of the loop\nThe if-then scope or arm scope\nThe <code>Span</code> where drop obligation was incurred (typically …\nThe source scope this scope was created in.\nReturns the topmost active scope, which is known to be …\nDrops that need to be done on unwind paths. See the …\nWhen inside the LHS of an assignment to a field, this is …\nThe <code>#[target_feature]</code> attributes of the body. Used for …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>HirId</code> of the current scope, which would be the <code>HirId</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current “safety context”. This notably tracks …\nFlag to ensure that we only suggest wrapping the entire …\nWhether the <code>unsafe_op_in_unsafe_fn</code> lint is <code>allow</code>ed at the …\nHandle closures/coroutines/inline-consts, which is …\nTarget features in <code>missing</code> that are enabled at compile time\nTarget features enabled in callee’s <code>#[target_feature]</code> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequires drop elaboration to have been performed first.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe type that <code>Drop</code> is implemented for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>func</code> refers to the function we are …\nThis module contains the functionality to convert from the …\nValidation of patterns/matches.\nFalse to indicate that adjustments should not be applied. …\nThe <code>DefId</code> of the owner of this body.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nConverts a list of named fields (i.e., for struct-like …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLowers a cast expression.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nConverts a constant to a pattern (if possible). This means …\nOverflowing literals are linted against in a late pass. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts inline const patterns.\nConverts literals, paths and negation of literals to …\nTakes a HIR Path. If the path is a constant, evaluates it …\nUsed by the Rust 2024 migration lint.\nCheck if a by-value binding is by-value. That is, check if …\nCheck that never patterns are only used on inhabited types.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCollect types that require specific explanations when they …\nTracks if we encountered an error while checking this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInspects the match scrutinee expression to determine …\nChecks for common cases of “catchall” patterns that …\nReport unreachable arms, if any.\nReport that a match is not exhaustive.\nReport unreachable arms, if any.\nVisit a nested chain of <code>&amp;&amp;</code>. Used for if-let chains. This …\nVisit the right-hand-side of a <code>&amp;&amp;</code>. Used for if-let chains. …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLooks up the type associated with this hir-id and applies …")