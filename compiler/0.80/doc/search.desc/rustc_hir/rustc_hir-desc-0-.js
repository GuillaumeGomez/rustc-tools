searchState.loadedDescShard("rustc_hir", 0, "HIR datatypes. See the rustc dev guide for more info.\nThe <code>+</code> operator (addition)\nA referencing operation (i.e., <code>&amp;a</code> or <code>&amp;mut a</code>).\nThe user wrote <code>&amp;type</code> or <code>&amp;mut type</code>.\nAn elided lifetime <code>&amp;&#39; ty</code>.\nThe <code>&amp;&amp;</code> operator (logical and)\nAn anonymous struct or union type i.e. <code>struct { foo: Type }</code>…\nA constant (expression) that’s not an item or associated …\nRepresents a single arm of a <code>match</code> expression, e.g. …\nAn array (e.g., <code>[a, b, c, d]</code>).\nA fixed length array (i.e., <code>[T; n]</code>).\nAn assignment (e.g., <code>a = foo()</code>).\nA desugared <code>expr = expr</code>, where the LHS is a tuple, struct, …\nAn assignment with an operator.\nA constraint on an associated item.\nThe kind of associated item constraint.\nAn explicit <code>async</code> block or the body of an <code>async</code> function.\nWhen lowering async functions, we create locals within the …\n<code>async fn</code>\nAn explicit <code>async gen</code> block or the body of an <code>async gen</code> …\nAttributes owned by a HIR owner.\nAn <code>&lt;expr&gt;.await</code>.\nA desugared <code>&lt;expr&gt;.await</code>.\nA desugared <code>&lt;expr&gt;.await</code>.\nA bare function (e.g., <code>fn(usize) -&gt; bool</code>).\nA <code>become</code>, with the value to be returned.\nA binary operation (e.g., <code>a + b</code>, <code>a * b</code>).\nA fresh binding <code>ref mut binding @ OPT_SUBPATTERN</code>. The <code>HirId</code>…\nThe mode of a binding (<code>mut</code>, <code>ref mut</code>, etc). Used for both …\nThe <code>&amp;</code> operator (bitwise and)\nThe <code>|</code> operator (bitwise or)\nThe <code>^</code> operator (bitwise xor)\nA block of statements <code>{ .. }</code>, which may have a label (in …\nAn explicit <code>async</code>/<code>gen</code> block written by the user.\nA block (e.g., <code>&#39;label: { ... }</code>).\nThe body of a function, closure, or constant value. In the …\nThe kind of borrow in an <code>AddrOf</code> expression, e.g., <code>&amp;place</code> …\nA bound on an associated type (e.g., <code>AssocTy: Bound</code> in …\nA type bound (e.g., <code>for&lt;&#39;c&gt; Foo: Send + Clone + &#39;c</code>).\nA <code>box</code> pattern.\nAn elided lifetime with elided brackets.\nA <code>break</code>, with an optional label to break.\nA function call.\nA capture clause used in closures and <code>async</code> blocks.\nA cast (e.g., <code>foo as f64</code>).\nThis is a plain closure expression.\nAn explicit <code>async</code>/<code>gen</code> closure written by the user.\nClosures\nA closure (e.g., <code>move |a, b, c| {a + b + c}</code>).\nRepresents <code>for&lt;...&gt;</code> binder before a closure\nAn elided lifetime in brackets with written brackets.\n<code>Type: const Trait</code>\nConstants and associated constants, also including inline …\nA <code>const</code>, associated <code>const</code>, or other const context.\nAn associated constant with an optional value (otherwise …\nAn associated constant of the given type, set to the …\nA <code>const</code> item.\nA constant that enters the type system, used for arguments …\nSee <code>ConstArg</code>.\nAn inline constant expression <code>const { something }</code>.\nAllow anonymous constants from an inline <code>const</code> block\nThe kind of an item that requires const-checking.\nA <code>const fn</code>.\nA <code>continue</code>, with an optional label.\nThis is a coroutine expression – i.e. a closure …\nA coroutine literal created via a <code>yield</code> inside a closure.\nThis is a coroutine-closure, which is a special sugared …\nThe type of source expression that caused this coroutine …\nIn the case of a coroutine created as part of an async/gen …\nThe top-level data structure that stores the entire …\n<code>Ctor</code> refers to the constructor of an enum variant or …\nBinder is not specified.\nReturn type is not specified.\nA <code>deref</code> pattern (currently <code>deref!()</code> macro-based syntax).\nThe <code>*</code> operator for dereferencing\nA coroutine that comes from a desugaring.\nThe <code>/</code> operator (division)\nWraps the expression in a terminating scope. This makes it …\nThe user wrote <code>Path</code> and omitted the <code>&lt;&#39;_&gt;</code>.\nThe user wrote <code>Path&lt;T&gt;</code>, and omitted the <code>&#39;_,</code>.\nAn enum definition, e.g., <code>enum Foo&lt;A, B&gt; {C&lt;A&gt;, D&lt;B&gt;}</code>.\nThe <code>==</code> operator (equality)\nAn equality predicate (unsupported).\nAn equality constraint for an associated item (e.g., …\nA placeholder for a pattern that wasn’t well formed in …\nA placeholder for an expression that wasn’t …\nPlaceholder for a type that has failed to be defined.\nIndicates an illegal name was given and an error has been …\nIndicates an error during lowering (usually <code>&#39;_</code> in wrong …\nAn expression.\nAn expression without a trailing semi-colon (must have …\nAn <code>extern crate</code> item, with optional <em>original</em> crate name if …\nAccess of a named (e.g., <code>obj.foo</code>) or unnamed (e.g., <code>obj.0</code>) …\nThe <code>async</code>/<code>gen</code> block generated as the body of an async/gen …\nFunctions and methods.\nAn associated function with an optional body.\nAn associated function implementation with the given …\nA function declaration.\nA foreign function.\nRepresents the header (not the body) of a function …\n<code>-&gt; impl Trait</code>\nRepresents a function’s signature in a trait declaration,\nBinder is specified.\nA <code>for _ in _ { .. }</code> loop.\nA desugared <code>for _ in _ { .. }</code> loop.\nAn item within an <code>extern</code> block.\nA reference from a foreign block to one of its items. This …\nAn external module, e.g. <code>extern { .. }</code>.\nA desugared <code>format_args!()</code>.\nSynthetic name generated when user elided a lifetime in an …\nThe <code>&gt;=</code> operator (greater than or equal to)\nAn explicit <code>gen</code> block or the body of a <code>gen</code> function.\nThe generic arguments and associated item constraints of a …\nRecords where the generic parameter originated from.\nRepresents lifetimes and type parameters attached to a …\nGlob import, e.g., <code>use foo::*</code>.\nModule-level inline assembly (from <code>global_asm!</code>).\nThe <code>&gt;</code> operator (greater than)\nRequirements for a <code>StableHashingContext</code> to be used in this …\nAn <code>if</code> block, with an optional else block.\nRepresents a <code>fn x(self);</code>.\nRepresents an impl block declaration.\nAn implementation, e.g., <code>impl&lt;A&gt; Trait for Foo { .. }</code>.\nRepresents an associated item within an impl block.\nRepresents various kinds of content within an <code>impl</code>.\nA reference from an impl to one of its associated items. …\nImplicit lifetime in a context like <code>dyn Foo</code>. This is …\nRepresents what type of implicit self a function has, if …\nAn indexing operation (<code>foo[2]</code>). Similar to …\nUser wrote an anonymous lifetime, either <code>&#39;_</code> or nothing. …\n<code>TyKind::Infer</code> means the type should be inferred instead of …\nActual type should be inherited from <code>DefId</code> signature\nInline assembly (from <code>asm!</code>), with its outputs and inputs.\nIs the trait definition an auto trait?\nAn item\nAn item binding.\nReference to a <code>#[lang = &quot;foo&quot;]</code> item.\nThe <code>&lt;=</code> operator (less than or equal to)\nA local (<code>let</code>) binding.\nA <code>let $pat = $expr</code> expression.\nRepresents a <code>let &lt;pat&gt;[: &lt;ty&gt;] = &lt;expr&gt;</code> expression (not a …\nRepresents a <code>let</code> statement (i.e., <code>let &lt;pat&gt;:&lt;ty&gt; = &lt;init&gt;;</code>…\nA lifetime definition (e.g., <code>&#39;a: &#39;b + &#39;c + &#39;d</code>).\nDegenerate list import, e.g., <code>use foo::{a, b}</code> produces an …\nA literal.\nA literal.\nA literal (e.g., <code>1</code>, <code>&quot;foo&quot;</code>).\nHints at the original code for a let statement.\nA conditionless loop (can be exited with <code>break</code>, <code>continue</code>, …\nA <code>loop { .. }</code> loop.\nThe loop type that yielded an <code>ExprKind::Loop</code>.\nThe <code>&lt;</code> operator (less than)\nA MBE macro definition (<code>macro_rules!</code> or <code>macro</code>).\nA <code>match</code> block, with a source that indicates whether or not …\nHints at the original code for a <code>match _ { .. }</code>.\n<code>Type: ?Trait</code>\n<code>Type: ~const Trait</code>\nA method call (e.g., <code>x.foo::&lt;&#39;static, Bar, Baz&gt;(a, b, c, d)</code>…\nA module.\nThe movability of a coroutine / closure literal: whether a …\nMust not contain self-references, <code>Unpin</code>.\nThe <code>*</code> operator (multiplication)\nRepresents a <code>fn x(mut self);</code>.\nThe <code>!=</code> operator (not equal to)\nThe <code>-</code> operator for negation\n<code>Type: !Trait</code>\n<code>impl !Trait for Type</code>\nA never pattern <code>!</code>.\nThe never type (<code>!</code>).\n<code>Type: Trait</code>\nRepresents when a function does not have a self argument or\nThe user wrote <code>&#39;a</code> or <code>&#39;_</code>.\nA <code>match _ { .. }</code>.\nA <code>match _ { .. }</code>.\nThe <code>!</code> operator for logical inversion\nThe user wrote <code>dyn Trait</code> and omitted the <code>+ &#39;_</code>.\nField offset (<code>offset_of!</code>)\nAn opaque type definition itself. This is only used for …\nAn opaque <code>impl Trait</code> type alias, e.g., <code>type Foo = impl Bar;</code>…\nFrom whence the opaque type came.\nAn or-pattern <code>A | B | C</code>. Invariant: <code>pats.len() &gt;= 2</code>.\nThe <code>||</code> operator (logical or)\nFull information resulting from lowering an AST node.\nMap of all HIR nodes inside the current owner. These nodes …\nRepresents a parameter in a function header.\nUser-given names or fresh (synthetic) names.\nNon-lifetime argument (type or const)\nparenthesized function-family traits, like …\nHIR node coupled with its parent’s id in the same HIR …\nPattern types (<code>pattern_type!(u32 is 1..)</code>)\nA single field in a struct pattern.\nA <code>Path</code> is essentially Rust’s notion of a name; for …\n<strong>Note:</strong> Currently this is only used for bare const params (<code>N</code> …\nA path pattern for a unit struct/variant or a …\nPath to a definition, possibly containing lifetime or type …\nA path to a type definition (<code>module::module::...::Type</code>), …\nA segment of a path: an identifier, an optional lifetime, …\nUsed as a placeholder for unused LocalDefId.\nSome user-given name like <code>T</code> or <code>&#39;x</code>.\n<code>impl Trait for Type</code>\nA <code>expr.match { .. }</code>.\nWe need to have a <code>Node</code> for the <code>HirId</code> that we attach the …\nNot represented directly in the AST; referred to by name …\nBoth signature and body are provided in the trait.\nA raw pointer (i.e., <code>*const T</code> or <code>*mut T</code>).\nRepresents an optionally <code>Self</code>-qualified value/type path or …\nA range pattern (e.g., <code>1..=2</code> or <code>1..2</code>).\nA raw borrow, <code>&amp;raw const $expr</code> or <code>&amp;raw mut $expr</code>. The …\nA reference pattern (e.g., <code>&amp;mut (a, b)</code>).\nA normal borrow, <code>&amp;$expr</code> or <code>&amp;mut $expr</code>. The resulting type …\n<code>move</code> keyword was not specified.\nA reference (i.e., <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>).\nRepresents a <code>fn x(&amp;self);</code>.\nRepresents a <code>fn x(&amp;mut self);</code>.\nA lifetime predicate (e.g., <code>&#39;a: &#39;b + &#39;c</code>).\nThe <code>%</code> operator (modulus)\nAn array literal constructed from one repeated element.\nNo default body in the trait, just a signature.\nPath to a definition, optionally “fully-qualified” …\nA <code>return</code>, with an optional value to be returned.\nEverything else.\nBounds for <code>feature(return_type_notation)</code>, like …\nAn expression with a trailing semi-colon (may have any …\nThe <code>&lt;&lt;</code> operator (shift left)\nThe <code>&gt;&gt;</code> operator (shift right)\nOne import, e.g., <code>use foo::bar</code> or <code>use foo::bar as baz</code>. …\nA slice pattern, …\nA variable length slice (i.e., <code>[T]</code>).\nMay contain self-references, <code>!Unpin</code>.\nUser wrote <code>&#39;static</code>.\nInitializer of a <code>static</code> item.\nA <code>static</code> or <code>static mut</code>.\nA <code>static</code> item.\nA foreign static item (<code>static ext: u8</code>).\nA statement.\nThe contents of a statement.\nA struct or struct variant pattern (e.g., …\nA struct or struct-like variant literal expression.\nA struct variant.\nA struct definition, e.g., <code>struct Foo&lt;A&gt; {x: A}</code>.\nThe <code>-</code> operator (subtraction)\nA trait definition.\nA trait alias.\nA modifier on a trait bound.\nRepresents a trait method’s body (or just argument …\nRepresents an item declaration within a trait declaration, …\nRepresents a trait method or associated constant or type\nA reference from an trait to one of its associated items. …\nA trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …\nReferences to traits in impls.\nA desugared <code>?</code> operator.\nA tuple (e.g., <code>(a, b, c, d)</code>).\nA tuple (<code>(A, B, C, D, ...)</code>).\nA tuple pattern (e.g., <code>(a, b)</code>). If the <code>..</code> pattern fragment …\nA tuple variant.\nA tuple struct/variant pattern <code>Variant(x, y, .., z)</code>. If …\ntype aliases: <code>type Foo = impl Trait;</code>\nA type alias, e.g., <code>type Foo = Bar&lt;u8&gt;</code>.\nThe various kinds of types recognized by the compiler.\nA type ascription (e.g., <code>x: Foo</code>). See RFC 3307.\nAn associated type with (possibly empty) bounds and …\nAn associated type.\nA foreign type.\nType-related paths (e.g., <code>&lt;T&gt;::default</code> or <code>&lt;T&gt;::Output</code>). …\nUnused for now.\nUnary operator.\nA unary operation (e.g., <code>!x</code>, <code>*x</code>).\nAn explicit <code>&#39;_</code>.\nA union definition, e.g., <code>union Foo&lt;A, B&gt; {x: A, y: B}</code>.\nA unit variant.\nA variable captured by a closure.\n<code>use foo::bar::*;</code> or <code>use foo::bar::baz as quux;</code>\nUp to three resolutions for type, value and macro …\n<code>move |x| y + x</code>.\nFields and constructor IDs of enum variants and structs.\nA type bound (e.g., <code>for&lt;&#39;c&gt; Foo: Send + Clone + &#39;c</code>).\nAn equality predicate (e.g., <code>T = int</code>); currently …\nA single predicate in a where-clause.\nA lifetime predicate (e.g., <code>&#39;a: &#39;b + &#39;c</code>).\nA <code>while _ { .. }</code> loop.\nRepresents a wildcard pattern (i.e., <code>_</code>).\nA suspension point for coroutines (i.e., <code>yield &lt;expr&gt;</code>).\nA plain <code>yield</code>.\nThe yield kind that caused an <code>ExprKind::Yield</code>.\nThis higher-order macro declares a list of types which can …\nType/lifetime parameters attached to this path. They come …\nThe generic arguments for this path segment.\nCollected attributes of the HIR nodes.\nContent of local bodies.\nThe expression the arm evaluates to if this arm matches.\nAny generics from a <code>for</code> binding.\nThe <code>&#39;a</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>.\nThe type being bounded.\nTrait and lifetime bounds (e.g., <code>Clone + Send + &#39;static</code>).\nThe associated item constraints for this path segment.\nFields and constructor id of the variant.\nWhether to use default binding modes. At present, this is …\nFor each definition, we track the following data. A …\nExplicit discriminant (e.g., <code>Foo = 1</code>).\nElse block for a <code>let...else</code> binding.\nAn expression at the end of the block without a semicolon, …\nThe span of the argument block <code>|...|</code>\nThe span of the declaration block: ‘move |…| -&gt; …’\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOptional guard clause.\nId of the variant (not the constructor, see …\nEither “<code>&#39;a</code>”, referring to a named lifetime definition, …\nThe identifier portion of this path segment.\nThe identifier for the field.\nName of the variant.\nDoes the function have an implicit self?\nWhether the opaque is a return-position impl trait (or …\nWhether to infer remaining type parameters, if any. This …\nInitializer expression to set the value, if any.\nA span from the first token past <code>{</code> to the last token until …\nThe types of the function’s parameters.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHIR walker for walking the contents of nodes.\nReturns <code>true</code> if the binary operator takes its arguments by …\nReturns <code>true</code> if the unary operator takes its argument by …\nIndicates whether this comes from a <code>~const</code> desugaring.\nReturn <code>true</code> if self is mutable\nReturn <code>true</code> if self is <strong>not</strong> mutable\nChecks if the specified expression is a built-in range …\nThis is <code>Some(_)</code> iff there is an explicit user-specified ’…\nDefines lang items.\nIs lifetime elision allowed.\nReturn-position impl traits (and async futures) must “…\nReturns <code>&quot;&quot;</code> (empty string) or <code>&quot;mutably &quot;</code> depending on the …\nFull HIR for the current owner.\nContents of the HIR.\nThe trait being implemented, if any.\nPre-computed hash of the full HIR. Used in the crate hash. …\nOrigin of the predicate.\nWhether the arguments were written in parenthesized form …\nMap from each nested owner to its parent’s local id.\nThe pattern the field is destructured to.\nIf this pattern and the optional guard matches, then <code>body</code> …\nReturns <code>&quot;&quot;</code> (empty string) or <code>&quot;mut &quot;</code> depending on the …\nReturns <code>&quot;const&quot;</code> or <code>&quot;mut&quot;</code> depending on the mutability.\n<code>Recovered::Yes</code> when this let expressions is not in a …\nReturns <code>&quot;&amp;&quot;</code> or <code>&quot;&amp;mut &quot;</code> depending on the mutability.\nThe resolution for the path.\nSemantics of this lifetime.\nThe resolution for the path.\nDistinguishes between <code>unsafe { ... }</code> and <code>{ ... }</code>.\nThe segments in the path: the things separated by <code>::</code>.\nThe segments in the path: the things separated by <code>::</code>.\nCan be <code>ForLoopDesugar</code> if the <code>let</code> statement is part of a <code>for</code>…\nThe span includes the curly braces <code>{</code> and <code>}</code> around the …\nSpan\nFirst span where it is accessed (there can be multiple).\nThe span encompassing the arguments, constraints and the …\nStatements in a block.\nThis module implements some validity checks for attributes.\nThese errors are caught and then reported during the …\nIf true, then there may exist <code>break &#39;a</code> values that aim to …\nWhen we are in a trait impl, link to the trait-item’s id.\nMap indicating what traits are in scope for places where …\nThe <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>.\nType annotation, if any (otherwise the type will be …\nValidity checking for weak lang items\nThe span of the <code>move</code> keyword.\nOptional default value for the const generic param\nassociated types in impl blocks for traits.\nThe type alias or associated type parent of the TAIT/ATPIT\nAnonymous constant, e.g. the <code>1 + 2</code> in <code>[u8; 1 + 2]</code>\nAssociated constant: <code>trait MyTrait { const ASSOC: usize; }</code>\nAssociated function: <code>impl MyStruct { fn associated() {} }</code> …\nAssociated type: <code>trait MyTrait { type Assoc; }</code>\nSingle-segment attribute defined by the language (<code>#[inline]</code>…\nA closure, coroutine, or coroutine-closure.\nConstructor constant automatically created by a unit …\nConstant generic parameter: …\nRefers to the struct or enum variant’s constructor.\nWhat kind of constructor something is.\nEncodes if a <code>DefKind::Ctor</code> is the constructor of an enum …\nDefinition having a unique ID (<code>DefId</code>), corresponds to …\nWhat kind of definition something is; e.g., <code>mod</code> vs <code>struct</code>. …\nSingle-segment custom attribute registered by a derive …\nSingle-segment custom attribute registered by a derive …\nHACK: This is used to recover the NodeId of an elided …\nName resolution failed. We use a dummy <code>Res</code> variant so …\nResolution failure.\nA field in a struct, enum or union. e.g.\nConstructor function automatically created by a tuple …\nAn <code>extern</code> block.\nType from an <code>extern</code> block.\nCreated a generic parameter for an anonymous lifetime.\nA use of <code>global_asm!</code>.\nThis variant is used for anonymous lifetimes that we did …\nAn inline constant, e.g. <code>const { 1 + 2 }</code>\nLifetime parameter: the <code>&#39;a</code> in <code>struct Foo&lt;&#39;a&gt; { ... }</code>\nResolution for a lifetime appearing in a type.\nA local variable or function parameter.\nThe macro namespace includes <code>macro_rules!</code> macros, …\nDifferent kinds of symbols can coexist even if they share …\nAn attribute that is <em>not</em> implemented via macro. E.g., …\nAn attribute that is not a macro; e.g., <code>#[inline]</code> or …\nOpaque type, aka <code>impl Trait</code>.\nSuccessfully linked the lifetime to a generic parameter.\nThe result of resolving a path before lowering to HIR, …\nJust a helper ‒ separate structure for each namespace.\nA primitive type such as <code>i32</code> or <code>str</code>.\nThe resolution of a path or export.\nThe <code>Self</code> constructor, along with the <code>DefId</code> of the impl it …\nThe <code>Self</code> type, as used somewhere other than within a trait.\nThe <code>Self</code> type, as used within a trait.\nExplicit <code>&#39;static</code> lifetime.\nThis <code>DefKind::Ctor</code> is a synthesized constructor of a tuple …\nRefers to the struct itself, <code>DefKind::Ctor</code> refers to its …\nMulti-segment custom attribute living in a “tool module…\nA tool attribute module; e.g., the <code>rustfmt</code> in …\nTrait alias: <code>trait IntIterator = Iterator&lt;Item = i32&gt;;</code>\nType alias: <code>type Foo = Bar;</code>\nType parameter: the <code>T</code> in <code>struct Vec&lt;T&gt; { ... }</code>\nThe type namespace includes <code>struct</code>s, <code>enum</code>s, <code>union</code>s, <code>trait</code>…\nThe value namespace includes <code>fn</code>s, <code>const</code>s, <code>static</code>s, and …\nThis <code>DefKind::Ctor</code> is a synthesized constructor of a tuple …\nRefers to the variant itself, <code>DefKind::Ctor</code> refers to its …\nGets an English article for the definition.\nGets an English article for the <code>Res</code>.\nReturn the <code>DefId</code> of this <code>Def</code> if it has an ID, else panic.\nGet an English description for the item’s kind.\nA human readable name for the res kind (“function”, “…\nThe English description of the namespace.\nReturns whether such a resolved path can occur in a tuple …\nReturns whether such a resolved path can occur in a unit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether <code>query get_codegen_attrs</code> should be used with this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all the items in this collection are <code>None</code>.\nUsers of some attributes cannot mark them as used, so they …\nAlways returns <code>true</code> if <code>self</code> is <code>Res::Err</code>\nReturn the <code>DefId</code> of this <code>Res</code> if it represents a module.\nReturns <code>None</code> if this is <code>Res::Err</code>\nReturn <code>Some(..)</code> with the <code>DefId</code> of this <code>Res</code> if it has a ID, …\nReturns an iterator over the items which are <code>Some</code>.\nWhether it’s a <code>static mut</code> or just a <code>static</code>.\nWhether it’s an anonymous static generated for nested …\nWhether it’s a <code>unsafe static</code>, <code>safe static</code> (inside extern …\nId of the introducing place. That can be:\nId of the introducing place. See <code>Param</code>.\nKind of elided lifetime\nId of the generic parameter that introduced it.\nId of the generic parameter that introduced it.\nThe item introducing the <code>Self</code> type alias. Can be used in …\nWhether the <code>Self</code> type is disallowed from mentioning …\nIs this within an <code>impl Foo for bar</code>?\nThe trait this <code>Self</code> is a generic parameter for.\nThe crate root is always assigned index 0 by the AST Map …\nA <code>DefId</code> identifies a particular <em>definition</em>, by combining a …\nA DefIndex is an index into the hir-map for a crate, …\nA <code>DefPathHash</code> is a fixed-size representation of a <code>DefPath</code> …\nItem definitions in the currently-compiled crate would …\nA <code>LocalDefId</code> is equivalent to a <code>DefId</code> with …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nAn occupied entry.\nAn occupied entry.\nA <code>StableCrateId</code> is a 64-bit hash of a crate name, together …\nA vacant entry.\nA vacant entry.\nZero value of the index.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the item is defined in the crate currently …\nMakes a local <code>DefId</code> from the given <code>DefIndex</code>.\nReturns the crate-local part of the DefPathHash.\nBuilds a new DefPathHash with the given StableCrateId and …\nComputes the stable ID for a crate with the given name and …\nReturns the StableCrateId identifying the crate this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn anonymous struct or union type i.e. <code>struct { foo: Type }</code>…\nA constant expression (see <code>{ast,hir}::AnonConst</code>).\nA closure expression.\nThe crate root (marker).\nImplicit constructor for a unit or tuple-like struct or …\nA unique identifier that we can use to lookup a definition …\nNew variants should only be added in synchronization with …\nA <code>DefPathHash</code> is a fixed-size representation of a <code>DefPath</code> …\nThe <code>DefPathTable</code> maps <code>DefIndex</code>es to <code>DefKey</code>s and vice versa.\nThe definition table containing node definitions. It holds …\nA pair of <code>DefPathData</code> and an integer disambiguator. The …\nAn <code>extern</code> block.\nA global asm item.\nAn impl.\nSomething in the lifetime namespace.\nSomething in the macro namespace.\nAn existential <code>impl Trait</code> type node. Argument position …\nSomething in the type namespace.\nA <code>use</code> item.\nSomething in the value namespace.\nAdds a definition with a parent definition.\nThe path leading from the crate root to the item.\nGets the number of definitions.\nReturns the path from the crate root to <code>index</code>. The root …\nThe identifier of this node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe crate root this path is relative to.\nReturns <code>None</code> if the <code>DefPathHash</code> does not correspond to a …\nAdds a root definition (no parent) and a few other …\nThe parent path.\nReturns a filename-friendly string of the <code>DefPath</code>, without …\nReturns a string representation of the <code>DefPath</code> without the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll of the primitive types\nThe <code>+</code> operator (addition)\nA referencing operation (i.e., <code>&amp;a</code> or <code>&amp;mut a</code>).\nThe user wrote <code>&amp;type</code> or <code>&amp;mut type</code>.\nAn elided lifetime <code>&amp;&#39; ty</code>.\nThe <code>&amp;&amp;</code> operator (logical and)\nAn anonymous struct or union type i.e. <code>struct { foo: Type }</code>…\nA constant (expression) that’s not an item or associated …\nRepresents a single arm of a <code>match</code> expression, e.g. …\nAn array (e.g., <code>[a, b, c, d]</code>).\nA fixed length array (i.e., <code>[T; n]</code>).\nAn assignment (e.g., <code>a = foo()</code>).\nA desugared <code>expr = expr</code>, where the LHS is a tuple, struct, …\nAn assignment with an operator.\nA constraint on an associated item.\nThe kind of associated item constraint.\nAn explicit <code>async</code> block or the body of an <code>async</code> function.\nWhen lowering async functions, we create locals within the …\n<code>async fn</code>\nAn explicit <code>async gen</code> block or the body of an <code>async gen</code> …\nAttributes owned by a HIR owner.\nAn <code>&lt;expr&gt;.await</code>.\nA desugared <code>&lt;expr&gt;.await</code>.\nA desugared <code>&lt;expr&gt;.await</code>.\nA bare function (e.g., <code>fn(usize) -&gt; bool</code>).\nA <code>become</code>, with the value to be returned.\nA binary operation (e.g., <code>a + b</code>, <code>a * b</code>).\nA fresh binding <code>ref mut binding @ OPT_SUBPATTERN</code>. The <code>HirId</code>…\nThe mode of a binding (<code>mut</code>, <code>ref mut</code>, etc). Used for both …\nThe <code>&amp;</code> operator (bitwise and)\nThe <code>|</code> operator (bitwise or)\nThe <code>^</code> operator (bitwise xor)\nA block of statements <code>{ .. }</code>, which may have a label (in …\nAn explicit <code>async</code>/<code>gen</code> block written by the user.\nA block (e.g., <code>&#39;label: { ... }</code>).\nThe body of a function, closure, or constant value. In the …\nThe kind of borrow in an <code>AddrOf</code> expression, e.g., <code>&amp;place</code> …\nA bound on an associated type (e.g., <code>AssocTy: Bound</code> in …\nA type bound (e.g., <code>for&lt;&#39;c&gt; Foo: Send + Clone + &#39;c</code>).\nA <code>box</code> pattern.\nAn elided lifetime with elided brackets.\nA <code>break</code>, with an optional label to break.\nA function call.\nA capture clause used in closures and <code>async</code> blocks.\nA cast (e.g., <code>foo as f64</code>).\nThis is a plain closure expression.\nAn explicit <code>async</code>/<code>gen</code> closure written by the user.\nClosures\nA closure (e.g., <code>move |a, b, c| {a + b + c}</code>).\nRepresents <code>for&lt;...&gt;</code> binder before a closure\nAn elided lifetime in brackets with written brackets.\n<code>Type: const Trait</code>\nConstants and associated constants, also including inline …\nA <code>const</code>, associated <code>const</code>, or other const context.\nAn associated constant with an optional value (otherwise …\nAn associated constant of the given type, set to the …\nA <code>const</code> item.\nA constant that enters the type system, used for arguments …\nSee <code>ConstArg</code>.\nAn inline constant expression <code>const { something }</code>.\nAllow anonymous constants from an inline <code>const</code> block\nThe kind of an item that requires const-checking.\nA <code>const fn</code>.\nA <code>continue</code>, with an optional label.\nThis is a coroutine expression – i.e. a closure …\nA coroutine literal created via a <code>yield</code> inside a closure.\nThis is a coroutine-closure, which is a special sugared …\nThe type of source expression that caused this coroutine …\nIn the case of a coroutine created as part of an async/gen …\nThe top-level data structure that stores the entire …\n<code>Ctor</code> refers to the constructor of an enum variant or …\nBinder is not specified.\nReturn type is not specified.\nA <code>deref</code> pattern (currently <code>deref!()</code> macro-based syntax).\nThe <code>*</code> operator for dereferencing\nA coroutine that comes from a desugaring.\nThe <code>/</code> operator (division)\nWraps the expression in a terminating scope. This makes it …\nThe user wrote <code>Path</code> and omitted the <code>&lt;&#39;_&gt;</code>.\nThe user wrote <code>Path&lt;T&gt;</code>, and omitted the <code>&#39;_,</code>.\nAn enum definition, e.g., <code>enum Foo&lt;A, B&gt; {C&lt;A&gt;, D&lt;B&gt;}</code>.\nThe <code>==</code> operator (equality)\nAn equality predicate (unsupported).\nAn equality constraint for an associated item (e.g., …\nA placeholder for a pattern that wasn’t well formed in …\nA placeholder for an expression that wasn’t …\nPlaceholder for a type that has failed to be defined.\nIndicates an illegal name was given and an error has been …\nIndicates an error during lowering (usually <code>&#39;_</code> in wrong …\nAn expression.\nAn expression without a trailing semi-colon (must have …\nAn <code>extern crate</code> item, with optional <em>original</em> crate name if …\nAccess of a named (e.g., <code>obj.foo</code>) or unnamed (e.g., <code>obj.0</code>) …\nThe <code>async</code>/<code>gen</code> block generated as the body of an async/gen …\nFunctions and methods.\nAn associated function with an optional body.\nAn associated function implementation with the given …\nA function declaration.\nA foreign function.\nRepresents the header (not the body) of a function …\n<code>-&gt; impl Trait</code>\nRepresents a function’s signature in a trait declaration,\nBinder is specified.\nA <code>for _ in _ { .. }</code> loop.\nA desugared <code>for _ in _ { .. }</code> loop.\nAn item within an <code>extern</code> block.\nA reference from a foreign block to one of its items. This …\nAn external module, e.g. <code>extern { .. }</code>.\nA desugared <code>format_args!()</code>.\nSynthetic name generated when user elided a lifetime in an …\nThe <code>&gt;=</code> operator (greater than or equal to)\nAn explicit <code>gen</code> block or the body of a <code>gen</code> function.\nThe generic arguments and associated item constraints of a …\nRecords where the generic parameter originated from.\nRepresents lifetimes and type parameters attached to a …\nGlob import, e.g., <code>use foo::*</code>.\nModule-level inline assembly (from <code>global_asm!</code>).\nThe <code>&gt;</code> operator (greater than)\nAn <code>if</code> block, with an optional else block.\nRepresents a <code>fn x(self);</code>.\nRepresents an impl block declaration.\nAn implementation, e.g., <code>impl&lt;A&gt; Trait for Foo { .. }</code>.\nRepresents an associated item within an impl block.\nRepresents various kinds of content within an <code>impl</code>.\nA reference from an impl to one of its associated items. …\nImplicit lifetime in a context like <code>dyn Foo</code>. This is …\nRepresents what type of implicit self a function has, if …\nAn indexing operation (<code>foo[2]</code>). Similar to …\nUser wrote an anonymous lifetime, either <code>&#39;_</code> or nothing. …\n<code>TyKind::Infer</code> means the type should be inferred instead of …\nActual type should be inherited from <code>DefId</code> signature\nInline assembly (from <code>asm!</code>), with its outputs and inputs.\nIs the trait definition an auto trait?\nAn item\nAn item binding.\nReference to a <code>#[lang = &quot;foo&quot;]</code> item.\nThe <code>&lt;=</code> operator (less than or equal to)\nA local (<code>let</code>) binding.\nA <code>let $pat = $expr</code> expression.\nRepresents a <code>let &lt;pat&gt;[: &lt;ty&gt;] = &lt;expr&gt;</code> expression (not a …\nRepresents a <code>let</code> statement (i.e., <code>let &lt;pat&gt;:&lt;ty&gt; = &lt;init&gt;;</code>…\nA lifetime definition (e.g., <code>&#39;a: &#39;b + &#39;c + &#39;d</code>).\nDegenerate list import, e.g., <code>use foo::{a, b}</code> produces an …\nA literal.\nA literal.\nA literal (e.g., <code>1</code>, <code>&quot;foo&quot;</code>).\nHints at the original code for a let statement.\nA conditionless loop (can be exited with <code>break</code>, <code>continue</code>, …\nA <code>loop { .. }</code> loop.\nThe loop type that yielded an <code>ExprKind::Loop</code>.\nThe <code>&lt;</code> operator (less than)\nA MBE macro definition (<code>macro_rules!</code> or <code>macro</code>).\nA <code>match</code> block, with a source that indicates whether or not …\nHints at the original code for a <code>match _ { .. }</code>.\n<code>Type: ?Trait</code>\n<code>Type: ~const Trait</code>\nA method call (e.g., <code>x.foo::&lt;&#39;static, Bar, Baz&gt;(a, b, c, d)</code>…\nA module.\nThe movability of a coroutine / closure literal: whether a …\nMust not contain self-references, <code>Unpin</code>.\nThe <code>*</code> operator (multiplication)\nRepresents a <code>fn x(mut self);</code>.\nThe <code>!=</code> operator (not equal to)\nThe <code>-</code> operator for negation\n<code>Type: !Trait</code>\n<code>impl !Trait for Type</code>\nA never pattern <code>!</code>.\nThe never type (<code>!</code>).\n<code>Type: Trait</code>\nRepresents when a function does not have a self argument or\nThe user wrote <code>&#39;a</code> or <code>&#39;_</code>.\nA <code>match _ { .. }</code>.\nA <code>match _ { .. }</code>.\nThe <code>!</code> operator for logical inversion\nThe user wrote <code>dyn Trait</code> and omitted the <code>+ &#39;_</code>.\nField offset (<code>offset_of!</code>)\nAn opaque type definition itself. This is only used for …\nAn opaque <code>impl Trait</code> type alias, e.g., <code>type Foo = impl Bar;</code>…\nFrom whence the opaque type came.\nAn or-pattern <code>A | B | C</code>. Invariant: <code>pats.len() &gt;= 2</code>.\nThe <code>||</code> operator (logical or)\nFull information resulting from lowering an AST node.\nMap of all HIR nodes inside the current owner. These nodes …\nRepresents a parameter in a function header.\nUser-given names or fresh (synthetic) names.\nNon-lifetime argument (type or const)\nparenthesized function-family traits, like …\nHIR node coupled with its parent’s id in the same HIR …\nPattern types (<code>pattern_type!(u32 is 1..)</code>)\nA single field in a struct pattern.\nA <code>Path</code> is essentially Rust’s notion of a name; for …\n<strong>Note:</strong> Currently this is only used for bare const params (<code>N</code> …\nA path pattern for a unit struct/variant or a …\nPath to a definition, possibly containing lifetime or type …\nA path to a type definition (<code>module::module::...::Type</code>), …\nA segment of a path: an identifier, an optional lifetime, …\nUsed as a placeholder for unused LocalDefId.\nSome user-given name like <code>T</code> or <code>&#39;x</code>.\n<code>impl Trait for Type</code>\nA <code>expr.match { .. }</code>.\nWe need to have a <code>Node</code> for the <code>HirId</code> that we attach the …\nNot represented directly in the AST; referred to by name …\nBoth signature and body are provided in the trait.\nA raw pointer (i.e., <code>*const T</code> or <code>*mut T</code>).\nRepresents an optionally <code>Self</code>-qualified value/type path or …\nA range pattern (e.g., <code>1..=2</code> or <code>1..2</code>).\nA raw borrow, <code>&amp;raw const $expr</code> or <code>&amp;raw mut $expr</code>. The …\nA reference pattern (e.g., <code>&amp;mut (a, b)</code>).\nA normal borrow, <code>&amp;$expr</code> or <code>&amp;mut $expr</code>. The resulting type …\n<code>move</code> keyword was not specified.\nA reference (i.e., <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>).\nRepresents a <code>fn x(&amp;self);</code>.\nRepresents a <code>fn x(&amp;mut self);</code>.\nA lifetime predicate (e.g., <code>&#39;a: &#39;b + &#39;c</code>).\nThe <code>%</code> operator (modulus)\nAn array literal constructed from one repeated element.\nNo default body in the trait, just a signature.\nPath to a definition, optionally “fully-qualified” …\nA <code>return</code>, with an optional value to be returned.\nEverything else.\nBounds for <code>feature(return_type_notation)</code>, like …\nAn expression with a trailing semi-colon (may have any …\nThe <code>&lt;&lt;</code> operator (shift left)\nThe <code>&gt;&gt;</code> operator (shift right)\nOne import, e.g., <code>use foo::bar</code> or <code>use foo::bar as baz</code>. …\nA slice pattern, …\nA variable length slice (i.e., <code>[T]</code>).\nMay contain self-references, <code>!Unpin</code>.\nUser wrote <code>&#39;static</code>.\nInitializer of a <code>static</code> item.\nA <code>static</code> or <code>static mut</code>.\nA <code>static</code> item.\nA foreign static item (<code>static ext: u8</code>).\nA statement.\nThe contents of a statement.\nA struct or struct variant pattern (e.g., …\nA struct or struct-like variant literal expression.\nA struct variant.\nA struct definition, e.g., <code>struct Foo&lt;A&gt; {x: A}</code>.\nThe <code>-</code> operator (subtraction)\nA trait definition.\nA trait alias.\nA modifier on a trait bound.\nRepresents a trait method’s body (or just argument …\nRepresents an item declaration within a trait declaration, …\nRepresents a trait method or associated constant or type\nA reference from an trait to one of its associated items. …\nA trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …\nReferences to traits in impls.\nA desugared <code>?</code> operator.\nA tuple (e.g., <code>(a, b, c, d)</code>).\nA tuple (<code>(A, B, C, D, ...)</code>).\nA tuple pattern (e.g., <code>(a, b)</code>). If the <code>..</code> pattern fragment …\nA tuple variant.\nA tuple struct/variant pattern <code>Variant(x, y, .., z)</code>. If …\ntype aliases: <code>type Foo = impl Trait;</code>\nA type alias, e.g., <code>type Foo = Bar&lt;u8&gt;</code>.\nThe various kinds of types recognized by the compiler.\nA type ascription (e.g., <code>x: Foo</code>). See RFC 3307.\nAn associated type with (possibly empty) bounds and …\nAn associated type.\nA foreign type.\nType-related paths (e.g., <code>&lt;T&gt;::default</code> or <code>&lt;T&gt;::Output</code>). …\nUnused for now.\nUnary operator.\nA unary operation (e.g., <code>!x</code>, <code>*x</code>).\nAn explicit <code>&#39;_</code>.\nA union definition, e.g., <code>union Foo&lt;A, B&gt; {x: A, y: B}</code>.\nA unit variant.\nA variable captured by a closure.\n<code>use foo::bar::*;</code> or <code>use foo::bar::baz as quux;</code>\nUp to three resolutions for type, value and macro …\n<code>move |x| y + x</code>.\nFields and constructor IDs of enum variants and structs.\nA type bound (e.g., <code>for&lt;&#39;c&gt; Foo: Send + Clone + &#39;c</code>).\nAn equality predicate (e.g., <code>T = int</code>); currently …\nA single predicate in a where-clause.\nA lifetime predicate (e.g., <code>&#39;a: &#39;b + &#39;c</code>).\nA <code>while _ { .. }</code> loop.\nRepresents a wildcard pattern (i.e., <code>_</code>).\nA suspension point for coroutines (i.e., <code>yield &lt;expr&gt;</code>).\nA plain <code>yield</code>.\nThe yield kind that caused an <code>ExprKind::Yield</code>.\nType/lifetime parameters attached to this path. They come …\nThe generic arguments for this path segment.\nReturns <code>true</code> if <code>param_def_id</code> matches the <code>bounded_ty</code> of …\nCollected attributes of the HIR nodes.\nContent of local bodies.\nThe expression the arm evaluates to if this arm matches.\nAny generics from a <code>for</code> binding.\nThe <code>&#39;a</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>.\nThe type being bounded.\nTrait and lifetime bounds (e.g., <code>Clone + Send + &#39;static</code>).\nReturns a suggestable empty span right after the “final…\nThe associated item constraints for this path segment.\nChecks if the pattern contains any <code>ref</code> or <code>ref mut</code> …\nObtain the const on the RHS of an assoc const equality …\nReturn the <code>LocalDefId</code> of this variant’s constructor, if …\nReturn the <code>HirId</code> of this variant’s constructor, if it …\nFields and constructor id of the variant.\nWhether to use default binding modes. At present, this is …\nExplicit discriminant (e.g., <code>Foo = 1</code>).\nCall <code>f</code> on every “binding” in a pattern, e.g., on <code>a</code> in …\nCall <code>f</code> on every “binding” in a pattern, e.g., on <code>a</code> in …\nElse block for a <code>let...else</code> binding.\nWhether this and the <code>other</code> expression are the same for …\nAn expression at the end of the block without a semicolon, …\nReturn the fields of this variant.\nThe span of the argument block <code>|...|</code>\nThe span of the declaration block: ‘move |…| -&gt; …’\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the matching <code>PrimTy</code> for a <code>Symbol</code> such as “str” …\nOptional guard clause.\nDoes this represent an implicit self?\nId of the variant (not the constructor, see …\nGet the identifier of this <code>Node</code>, if applicable.\nEither “<code>&#39;a</code>”, referring to a named lifetime definition, …\nThe identifier portion of this path segment.\nThe identifier for the field.\nName of the variant.\nGet a <code>hir::Impl</code> if the node is an impl block for the given …\nDoes the function have an implicit self?\nWhether the opaque is a return-position impl trait (or …\nWhether to infer remaining type parameters, if any. This …\nInitializer expression to set the value, if any.\nA span from the first token past <code>{</code> to the last token until …\nThe types of the function’s parameters.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is an <code>ItemKind::Enum</code>, <code>ItemKind::Struct</code> or …\nTo a first-order approximation, is this a pattern?\nIndicates whether this comes from a <code>~const</code> desugaring.\nThis can happen for <code>async fn</code>, e.g. <code>async fn f&lt;&#39;_&gt;(&amp;&#39;_ self)</code>…\nSynthetic type-parameters are inserted after normal ones. …\nWhether this a never pattern.\nReturns <code>true</code> if <code>param_def_id</code> matches the <code>bounded_ty</code> of …\nReturns <code>true</code> if <code>param_def_id</code> matches the <code>lifetime</code> of this …\nWhether this is a place expression.\nChecks if the specified expression is a built-in range …\nCheck if this is an <code>ItemKind::Struct</code> or <code>ItemKind::Union</code>.\nWhether <code>ty</code> is a type with <code>_</code> placeholders that can be …\nWhether this looks like a place expr, without checking for …\nA description of this const context that can appear …\nThis is <code>Some(_)</code> iff there is an explicit user-specified ’…\nIs lifetime elision allowed.\nReturn-position impl traits (and async futures) must “…\nLike <code>PrimTy::name</code>, but returns a &amp;str instead of a symbol.\nReturns variants that are necessary to exist for the …\nConverts an identifier to the corresponding segment.\nPanics if n &gt;= u32::MAX.\nFull HIR for the current owner.\nContents of the HIR.\nThis function returns the number of type and const generic …\nThe trait being implemented, if any.\nPre-computed hash of the full HIR. Used in the crate hash. …\nOrigin of the predicate.\nObtain the list of input types and the output type if the …\nObtain the output type if the generic arguments are …\nWhether the arguments were written in parenthesized form …\nMap from each nested owner to its parent’s local id.\nThe pattern the field is destructured to.\nIf this pattern and the optional guard matches, then <code>body</code> …\nIf <code>Self.kind</code> is <code>ExprKind::DropTemps(expr)</code>, drill down …\nReturns the span of the qself of this <code>QPath</code>. For example, …\n<code>Recovered::Yes</code> when this let expressions is not in a …\nThe resolution for the path.\nSemantics of this lifetime.\nThe resolution for the path.\nDistinguishes between <code>unsafe { ... }</code> and <code>{ ... }</code>.\nThe segments in the path: the things separated by <code>::</code>.\nThe segments in the path: the things separated by <code>::</code>.\nCan be <code>ForLoopDesugar</code> if the <code>let</code> statement is part of a <code>for</code>…\nThe span encompassing the arguments and constraints inside …\nReturns the span of this <code>QPath</code>.\nThe span includes the curly braces <code>{</code> and <code>}</code> around the …\nSpan\nFirst span where it is accessed (there can be multiple).\nReturns span encompassing arguments and their surrounding …\nThe span encompassing the arguments, constraints and the …\nIf there are generic parameters, return where to introduce …\nIf there are generic parameters, return where to introduce …\nStatements in a block.\n<code>Span</code> where further predicates would be suggested, …\nThese errors are caught and then reported during the …\nIf true, then there may exist <code>break &#39;a</code> values that aim to …\nGets the <code>DefId</code> of the referenced trait. It <em>must</em> actually …\nWhen we are in a trait impl, link to the trait-item’s id.\nMap indicating what traits are in scope for places where …\nThe <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>.\nObtain the type on the RHS of an assoc ty equality …\nGet the type for constants, assoc types, type aliases and …\nType annotation, if any (otherwise the type will be …\nWalk the pattern in left-to-right order.\nWalk the pattern in left-to-right order.\nWalk the pattern in left-to-right order, short circuiting …\nThe span of the <code>move</code> keyword.\nOptional default value for the const generic param\nassociated types in impl blocks for traits.\nThe type alias or associated type parent of the TAIT/ATPIT\nThe <code>HirId</code> corresponding to <code>CRATE_NODE_ID</code> and <code>CRATE_DEF_ID</code>.\nUniquely identifies a node in the HIR of the current …\nSignal local id which should never be used.\nSignal local id which should never be used.\nAn <code>ItemLocalId</code> uniquely identifies something within a …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nExisting slot with equivalent key.\nAn occupied entry.\nVacant slot (no equivalent key in the map).\nA vacant entry.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>|x, y| {}</code>\n<code>#[xxx] pub async/const/extern &quot;Abi&quot; fn foo()</code>\nAn abstract representation of the HIR …\n<code>fn foo(&amp;self)</code>\nOverride this type to control which nested HIR are …\nThe result type of the <code>visit_*</code> methods. Can be either <code>()</code>, …\nEach method of the Visitor trait is a hook to be …\nReturns the argument unchanged.\nRetrieves the <code>Node</code> corresponding to <code>id</code>.\nCalls <code>U::from(self)</code>.\nIf <code>type NestedFilter</code> is set to visit nested items, this …\nVisits the top-level item and (optionally) nested items / …\nInvoked to visit the body of a function, method or …\nLike <code>visit_nested_item()</code>, but for foreign items. See …\nLike <code>visit_nested_item()</code>, but for impl items. See …\nInvoked when a nested item is encountered. By default, when\nLike <code>visit_nested_item()</code>, but for trait items. See …\nWhether the visitor visits nested “item-like” things. …\nWhether the visitor visits “intra item-like” things. …\nSpecifies what nested things a visitor wants to visit. By …\nDo not visit any nested things. When you add a new “…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>add</code> lang item.\nThe <code>add_assign</code> lang item.\nThe <code>align_offset</code> lang item. Align offset for stride != 1; …\nThe <code>alloc_layout</code> lang item.\nThe <code>async_destruct</code> lang item.\nThe <code>async_drop</code> lang item.\nThe <code>async_drop_chain</code> lang item.\nThe <code>async_drop_defer</code> lang item.\nThe <code>async_drop_deferred_drop_in_place</code> lang item.\nThe <code>async_drop_either</code> lang item.\nThe <code>async_drop_fuse</code> lang item.\nThe <code>async_drop_in_place</code> lang item.\nThe <code>async_drop_noop</code> lang item.\nThe <code>async_drop_slice</code> lang item.\nThe <code>async_drop_surface_drop_in_place</code> lang item.\nThe <code>async_fn</code> lang item.\nThe <code>async_fn_kind_helper</code> lang item.\nThe <code>async_fn_kind_upvars</code> lang item.\nThe <code>async_fn_mut</code> lang item.\nThe <code>async_fn_once</code> lang item.\nThe <code>async_fn_once_output</code> lang item.\nThe <code>AsyncGenFinished</code> lang item.\nThe <code>AsyncGenPending</code> lang item.\nThe <code>AsyncGenReady</code> lang item.\nThe <code>async_iterator</code> lang item.\nThe <code>async_iterator_poll_next</code> lang item.\nThe <code>begin_panic</code> lang item. libstd panic entry point. …\nThe <code>bitand</code> lang item.\nThe <code>bitand_assign</code> lang item.\nThe <code>bitor</code> lang item.\nThe <code>bitor_assign</code> lang item.\nThe <code>bitxor</code> lang item.\nThe <code>bitxor_assign</code> lang item.\nThe <code>CStr</code> lang item.\nThe <code>c_void</code> lang item.\nThe <code>call_once_future</code> lang item.\nThe <code>call_ref_future</code> lang item.\nThe <code>clone</code> lang item.\nThe <code>coerce_unsized</code> lang item.\nThe <code>const_panic_fmt</code> lang item.\nThe <code>const_param_ty</code> lang item.\nThe <code>Context</code> lang item.\nThe <code>Break</code> lang item.\nThe <code>Continue</code> lang item.\nThe <code>copy</code> lang item.\nThe <code>coroutine</code> lang item.\nThe <code>coroutine_resume</code> lang item.\nThe <code>coroutine_return</code> lang item.\nThe <code>coroutine_state</code> lang item.\nThe <code>coroutine_yield</code> lang item.\nThe <code>deref</code> lang item.\nThe <code>deref_mut</code> lang item.\nThe <code>deref_pure</code> lang item.\nThe <code>deref_target</code> lang item.\nThe <code>destruct</code> lang item.\nThe <code>discriminant_type</code> lang item. The associated item of …\nThe <code>discriminant_kind</code> lang item.\nThe <code>dispatch_from_dyn</code> lang item.\nThe <code>div</code> lang item.\nThe <code>div_assign</code> lang item.\nThe <code>drop</code> lang item.\nThe <code>drop_in_place</code> lang item.\nThe <code>dyn_metadata</code> lang item.\nThe <code>EffectsCompat</code> lang item.\nThe <code>EffectsIntersection</code> lang item.\nThe <code>EffectsIntersectionOutput</code> lang item.\nThe <code>EffectsMaybe</code> lang item.\nThe <code>EffectsNoRuntime</code> lang item.\nThe <code>EffectsRuntime</code> lang item.\nThe <code>EffectsTyCompat</code> lang item.\nThe <code>eh_catch_typeinfo</code> lang item.\nThe <code>eh_personality</code> lang item.\nThe <code>exchange_malloc</code> lang item.\nThe <code>fallback_surface_drop</code> lang item.\nThe <code>Fn</code> lang item.\nThe <code>fn_mut</code> lang item.\nThe <code>fn_once</code> lang item.\nThe <code>fn_once_output</code> lang item.\nThe <code>fn_ptr_addr</code> lang item.\nThe <code>fn_ptr_trait</code> lang item.\nThe <code>format_alignment</code> lang item.\nThe <code>format_argument</code> lang item.\nThe <code>format_arguments</code> lang item.\nThe <code>format_count</code> lang item.\nThe <code>format_placeholder</code> lang item.\nThe <code>format_unsafe_arg</code> lang item.\nThe <code>freeze</code> lang item.\nThe <code>fused_iterator</code> lang item.\nThe <code>future_trait</code> lang item.\nThe <code>future_output</code> lang item.\nThe <code>poll</code> lang item.\nThe <code>get_context</code> lang item.\nThe <code>global_alloc_ty</code> lang item.\nThe <code>index</code> lang item.\nThe <code>index_mut</code> lang item.\nThe <code>into_async_iter_into_iter</code> lang item.\nThe <code>into_future</code> lang item.\nThe <code>into_iter</code> lang item.\nThe <code>iterator</code> lang item.\nThe <code>next</code> lang item.\nA representation of all the valid lang items in Rust.\nAll of the lang items, defined or not. Defined lang items …\nThe <code>manually_drop</code> lang item.\nThe <code>maybe_uninit</code> lang item.\nThe <code>metadata_type</code> lang item.\nThe <code>mul</code> lang item.\nThe <code>mul_assign</code> lang item.\nThe <code>neg</code> lang item.\nThe <code>not</code> lang item.\nThe <code>Option</code> lang item.\nThe <code>None</code> lang item.\nThe <code>Some</code> lang item.\nThe <code>Ordering</code> lang item.\nThe <code>owned_box</code> lang item.\nThe <code>panic</code> lang item.\nThe <code>panic_const_add_overflow</code> lang item. Constant panic …\nThe <code>panic_const_async_fn_resumed</code> lang item.\nThe <code>panic_const_async_fn_resumed_panic</code> lang item.\nThe <code>panic_const_async_gen_fn_resumed</code> lang item.\nThe <code>panic_const_async_gen_fn_resumed_panic</code> lang item.\nThe <code>panic_bounds_check</code> lang item.\nThe <code>panic_cannot_unwind</code> lang item.\nThe <code>panic_const_coroutine_resumed</code> lang item.\nThe <code>panic_const_coroutine_resumed_panic</code> lang item.\nThe <code>panic_const_div_overflow</code> lang item.\nThe <code>panic_const_div_by_zero</code> lang item.\nThe <code>panic_fmt</code> lang item.\nThe <code>panic_const_gen_fn_none</code> lang item.\nThe <code>panic_const_gen_fn_none_panic</code> lang item.\nThe <code>panic_impl</code> lang item.\nThe <code>panic_in_cleanup</code> lang item.\nThe <code>panic_info</code> lang item.\nThe <code>panic_location</code> lang item.\nThe <code>panic_misaligned_pointer_dereference</code> lang item.\nThe <code>panic_const_mul_overflow</code> lang item.\nThe <code>panic_const_neg_overflow</code> lang item.\nThe <code>panic_nounwind</code> lang item.\nThe <code>panic_const_rem_overflow</code> lang item.\nThe <code>panic_const_rem_by_zero</code> lang item.\nThe <code>panic_const_shl_overflow</code> lang item.\nThe <code>panic_const_shr_overflow</code> lang item.\nThe <code>panic_const_sub_overflow</code> lang item.\nThe <code>eq</code> lang item.\nThe <code>partial_ord</code> lang item.\nThe <code>phantom_data</code> lang item.\nThe <code>pin</code> lang item.\nThe <code>new_unchecked</code> lang item.\nThe <code>pointee_trait</code> lang item.\nThe <code>pointer_like</code> lang item.\nThe <code>Poll</code> lang item.\nThe <code>Pending</code> lang item.\nThe <code>Ready</code> lang item.\nThe <code>ptr_unique</code> lang item.\nThe <code>Range</code> lang item.\nThe <code>RangeFrom</code> lang item.\nThe <code>RangeFull</code> lang item.\nThe <code>range_inclusive_new</code> lang item.\nThe <code>RangeInclusive</code> lang item.\nThe <code>RangeTo</code> lang item.\nThe <code>RangeToInclusive</code> lang item.\nThe <code>receiver</code> lang item.\nThe <code>rem</code> lang item.\nThe <code>rem_assign</code> lang item.\nThe <code>Err</code> lang item.\nThe <code>Ok</code> lang item.\nThe <code>ResumeTy</code> lang item.\nThe <code>shl</code> lang item.\nThe <code>shl_assign</code> lang item.\nThe <code>shr</code> lang item.\nThe <code>shr_assign</code> lang item.\nThe <code>sized</code> lang item.\nThe <code>slice_len_fn</code> lang item.\nThe <code>start</code> lang item.\nThe <code>String</code> lang item.\nThe <code>structural_peq</code> lang item. Trait injected by …\nThe <code>sub</code> lang item.\nThe <code>sub_assign</code> lang item.\nThe <code>surface_async_drop_in_place</code> lang item.\nThe <code>sync</code> lang item.\nThe <code>termination</code> lang item.\nThe <code>transmute_opts</code> lang item.\nThe <code>transmute_trait</code> lang item.\nThe <code>Try</code> lang item.\nThe <code>branch</code> lang item.\nThe <code>from_output</code> lang item.\nThe <code>from_residual</code> lang item.\nThe <code>from_yeet</code> lang item.\nThe <code>tuple_trait</code> lang item.\nThe <code>unpin</code> lang item.\nThe <code>unsafe_cell</code> lang item.\nThe <code>unsize</code> lang item.\nThe <code>unsized_const_param_ty</code> lang item.\nThe <code>va_list</code> lang item.\nReturns the <code>DefId</code> of the <code>add_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>add</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>align_offset</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>alloc_layout</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>async_destruct</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>async_drop_chain</code> lang item if it …\nReturns the <code>DefId</code> of the <code>async_drop_defer</code> lang item if it …\nReturns the <code>DefId</code> of the <code>async_drop_deferred_drop_in_place</code> …\nReturns the <code>DefId</code> of the <code>async_drop_either</code> lang item if it …\nReturns the <code>DefId</code> of the <code>async_drop_fuse</code> lang item if it …\nReturns the <code>DefId</code> of the <code>async_drop_in_place</code> lang item if …\nReturns the <code>DefId</code> of the <code>async_drop_noop</code> lang item if it …\nReturns the <code>DefId</code> of the <code>async_drop_slice</code> lang item if it …\nReturns the <code>DefId</code> of the <code>async_drop_surface_drop_in_place</code> …\nReturns the <code>DefId</code> of the <code>async_drop</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>async_fn_kind_helper</code> lang item if …\nReturns the <code>DefId</code> of the <code>async_fn_kind_upvars</code> lang item if …\nReturns the <code>DefId</code> of the <code>async_fn_mut</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>async_fn_once_output</code> lang item if …\nReturns the <code>DefId</code> of the <code>async_fn_once</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>async_fn</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>AsyncGenFinished</code> lang item if it …\nReturns the <code>DefId</code> of the <code>AsyncGenPending</code> lang item if it …\nReturns the <code>DefId</code> of the <code>AsyncGenReady</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>async_iterator_poll_next</code> lang …\nReturns the <code>DefId</code> of the <code>async_iterator</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>begin_panic</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>bitand_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>bitand</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>bitor_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>bitor</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>bitxor_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>bitxor</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>branch</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>CStr</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>c_void</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>call_once_future</code> lang item if it …\nReturns the <code>DefId</code> of the <code>call_ref_future</code> lang item if it …\nReturns the <code>DefId</code> of the <code>Break</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Continue</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>clone</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>coerce_unsized</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>const_panic_fmt</code> lang item if it …\nReturns the <code>DefId</code> of the <code>const_param_ty</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>Context</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>copy</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>coroutine_resume</code> lang item if it …\nReturns the <code>DefId</code> of the <code>coroutine_return</code> lang item if it …\nReturns the <code>DefId</code> of the <code>coroutine_state</code> lang item if it …\nReturns the <code>DefId</code> of the <code>coroutine</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>coroutine_yield</code> lang item if it …\nReturns the <code>DefId</code> of the <code>deref_mut</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>deref_pure</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>deref_target</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>deref</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>destruct</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>discriminant_kind</code> lang item if it …\nReturns the <code>DefId</code> of the <code>discriminant_type</code> lang item if it …\nReturns the <code>DefId</code> of the <code>dispatch_from_dyn</code> lang item if it …\nReturns the <code>DefId</code> of the <code>div_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>div</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>drop_in_place</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>drop</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>dyn_metadata</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>EffectsCompat</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>EffectsIntersection</code> lang item if …\nReturns the <code>DefId</code> of the <code>EffectsIntersectionOutput</code> lang …\nReturns the <code>DefId</code> of the <code>EffectsMaybe</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>EffectsNoRuntime</code> lang item if it …\nReturns the <code>DefId</code> of the <code>EffectsRuntime</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>EffectsTyCompat</code> lang item if it …\nReturns the <code>DefId</code> of the <code>eh_catch_typeinfo</code> lang item if it …\nReturns the <code>DefId</code> of the <code>eh_personality</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>eq</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>exchange_malloc</code> lang item if it …\nExtracts the first <code>lang = &quot;$name&quot;</code> out of a list of …\nReturns the <code>DefId</code> of the <code>fallback_surface_drop</code> lang item …\nReturns the <code>DefId</code> of the <code>fn_mut</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>fn_once_output</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>fn_once</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>fn_ptr_addr</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>fn_ptr_trait</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>Fn</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>format_alignment</code> lang item if it …\nReturns the <code>DefId</code> of the <code>format_argument</code> lang item if it …\nReturns the <code>DefId</code> of the <code>format_arguments</code> lang item if it …\nReturns the <code>DefId</code> of the <code>format_count</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>format_placeholder</code> lang item if …\nReturns the <code>DefId</code> of the <code>format_unsafe_arg</code> lang item if it …\nReturns the <code>DefId</code> of the <code>freeze</code> lang item if it is defined.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOpposite of <code>LangItem::name</code>\nReturns the <code>DefId</code> of the <code>from_output</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>from_residual</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>from_yeet</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>fused_iterator</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>future_output</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>poll</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>future_trait</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>get_context</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>global_alloc_ty</code> lang item if it …\nReturns the <code>DefId</code> of the <code>index_mut</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>index</code> lang item if it is defined.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>DefId</code> of the <code>into_async_iter_into_iter</code> lang …\nReturns the <code>DefId</code> of the <code>into_future</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>into_iter</code> lang item if it is …\nMappings from lang items to their possibly found <code>DefId</code>s. …\nReturns the <code>DefId</code> of the <code>iterator</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>manually_drop</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>maybe_uninit</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>metadata_type</code> lang item if it is …\nLang items that were not found during collection.\nReturns the <code>DefId</code> of the <code>mul_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>mul</code> lang item if it is defined.\nReturns the <code>name</code> symbol in <code>#[lang = &quot;$name&quot;]</code>. For example, …\nReturns the <code>DefId</code> of the <code>neg</code> lang item if it is defined.\nConstruct an empty collection of lang items and no missing …\nReturns the <code>DefId</code> of the <code>new_unchecked</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>next</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>not</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>None</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Some</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Option</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Ordering</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>owned_box</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>panic_bounds_check</code> lang item if …\nReturns the <code>DefId</code> of the <code>panic_cannot_unwind</code> lang item if …\nReturns the <code>DefId</code> of the <code>panic_const_add_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_async_fn_resumed</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_async_fn_resumed_panic</code>…\nReturns the <code>DefId</code> of the <code>panic_const_async_gen_fn_resumed</code> …\nReturns the <code>DefId</code> of the …\nReturns the <code>DefId</code> of the <code>panic_const_coroutine_resumed</code> …\nReturns the <code>DefId</code> of the …\nReturns the <code>DefId</code> of the <code>panic_const_div_by_zero</code> lang item …\nReturns the <code>DefId</code> of the <code>panic_const_div_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_gen_fn_none</code> lang item …\nReturns the <code>DefId</code> of the <code>panic_const_gen_fn_none_panic</code> …\nReturns the <code>DefId</code> of the <code>panic_const_mul_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_neg_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_rem_by_zero</code> lang item …\nReturns the <code>DefId</code> of the <code>panic_const_rem_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_shl_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_shr_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_const_sub_overflow</code> lang …\nReturns the <code>DefId</code> of the <code>panic_fmt</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>panic</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>panic_impl</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>panic_in_cleanup</code> lang item if it …\nReturns the <code>DefId</code> of the <code>panic_info</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>panic_location</code> lang item if it is …\nReturns the <code>DefId</code> of the …\nReturns the <code>DefId</code> of the <code>panic_nounwind</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>partial_ord</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>phantom_data</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>pin</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>pointee_trait</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>pointer_like</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>Poll</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Pending</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>Ready</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>ptr_unique</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>RangeFrom</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>RangeFull</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>range_inclusive_new</code> lang item if …\nReturns the <code>DefId</code> of the <code>RangeInclusive</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>Range</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>RangeToInclusive</code> lang item if it …\nReturns the <code>DefId</code> of the <code>RangeTo</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>receiver</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>rem_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>rem</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Err</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>Ok</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>ResumeTy</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>shl_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>shl</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>shr_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>shr</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>sized</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>slice_len_fn</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>start</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>String</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>structural_peq</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>sub_assign</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>sub</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>surface_async_drop_in_place</code> lang …\nReturns the <code>DefId</code> of the <code>sync</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>termination</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>transmute_opts</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>transmute_trait</code> lang item if it …\nReturns the <code>DefId</code> of the <code>Try</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>tuple_trait</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>unpin</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>unsafe_cell</code> lang item if it is …\nReturns the <code>DefId</code> of the <code>unsize</code> lang item if it is defined.\nReturns the <code>DefId</code> of the <code>unsized_const_param_ty</code> lang item …\nReturns the <code>DefId</code> of the <code>va_list</code> lang item if it is …\nReturns the name of the <code>LangItem</code> enum variant.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRequirements for a <code>StableHashingContext</code> to be used in this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")