searchState.loadedDescShard("rustc_monomorphize", 0, "Raw content of Fluent resource for this crate, generated …\nMono Item Collection\nPartitioning Codegen Units for Incremental Compilation\nPolymorphization Analysis\nSee module-level docs on some contect for “mentioned” …\nCollect items that are mentioned. The goal of this mode is …\nThe state that is shared across the concurrent threads …\nCollect items that are used, i.e., actually needed for …\nScans the CTFE alloc in order to find function pointers …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nScans the MIR in order to find function calls, closures, …\nCollect all monomorphized items reachable from …\nCreates a <code>MonoItem</code> for each method that is referenced by …\nEvaluates a <em>not yet monomorphized</em> constant.\nFor a given pair of source and target type that occur in …\nInternally iterate over all inlined items used by <code>item</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nItems that have been or are currently being recursively …\nAs a special case, when/if we encounter the <code>main()</code> …\nIf <code>def_id</code> represents a root, pushes it onto the list of …\nReturns <code>true</code> if we should codegen an instance in the local …\nWhich items are being used where, for better errors.\nSee the comment in <code>collect_items_of_instance</code> for the …\nThis does not walk the MIR of the constant as that is not …\nFor every call of this function in the visitor, make sure …\n<code>item</code> must be already monomorphized.\nItems that have been or are currently being recursively …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpans for move size lints already emitted. Helps avoid …\nSet of functions for which it is OK to move large data …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe codegen units, sorted by name to make things …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompute the combined size of all inlined items that appear …\nOutputs stats about instantiation counts and estimated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVisitor used to aggregate generic parameter uses.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEmit errors for the function annotated by …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSome parameters are considered used-by-default, such as …\nProvide implementations of queries relating to …\nReturns <code>true</code> if the instance should be polymorphized.\nDetermine which generic parameters are used by the …\nInvoke <code>unused_generic_params</code> on a body contained within …\nFor a given closure, writes out the data for the profiling …")