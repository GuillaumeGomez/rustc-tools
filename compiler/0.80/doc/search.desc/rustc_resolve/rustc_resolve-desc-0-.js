searchState.loadedDescShard("rustc_resolve", 0, "This crate is responsible for the part of name resolution …\nCrate root, then extern prelude (used for mixed 2015-2018 …\nAll scopes with the given namespace.\nMiscellaneous bits of metadata for better ambiguity error …\nError E0435: attempt to use a non-constant value in a …\nA never pattern has a binding.\nA key that identifies a binding in a given <code>Module</code>.\nError E0530: <code>X</code> bindings cannot shadow <code>Y</code>s.\nAn anonymous module; e.g., just a block.\nUsed for better errors for E0773\nError E0434: can’t capture dynamic environment in a fn …\nError E0438: const is not a member of trait.\nVirtual module that denotes resolution in crate root with …\nVirtual module that denotes resolution in current scope. …\nRaw content of Fluent resource for this crate, generated …\nDefinition having a unique ID (<code>DefId</code>), corresponds to …\nAny module with a name.\nName resolution failed. We use a dummy <code>Res</code> variant so …\nVirtual module that denotes resolution in extern prelude. …\nError E0433: failed to resolve.\nError E0128: generic parameters with a default cannot use …\nError E0401: can’t use type or const parameters from …\nError E0415: identifier is bound more than once in this …\nError E0416: identifier is bound more than once in the …\nInline asm <code>sym</code> operand must refer to a <code>fn</code> or <code>static</code>.\nAll scopes with the given namespace, used for partially …\nAn intermediate resolution result.\nA local variable or function parameter.\n<code>self</code> used instead of <code>Self</code> in a generic parameter\nAll scopes with macro namespace and the given macro kind …\nError E0407: method is not a member of trait.\nAll modules are unique and allocated on a same arena, so …\nRegular module.\nOne node in the tree of modules.\nError E0403: the name is already used for a type or const …\nAll name bindings are unique and allocated on a same arena,\nRecords a possibly-private value, type, or module …\nAn attribute that is <em>not</em> implemented via macro. E.g., …\ngeneric parameters must not be used inside enum …\ngeneric parameters must not be used inside const …\nERROR E0770: the type of const parameters must not depend …\nEverything you need to know about a name’s location to …\nA primitive type such as <code>i32</code> or <code>str</code>.\nThe main resolver class.\nNothing really interesting here; it just provides memory …\nA specific scope in which a name can be looked up. This …\nNames from different contexts may want to visit different …\nA minimal representation of a path segment. We use this in …\nThe <code>Self</code> constructor, along with the [<code>DefId</code>] of the impl …\nError E0430: <code>self</code> import can only appear once in the list.\nError E0431: <code>self</code> import can only appear in an import list …\nError E0429: <code>self</code> imports are only allowed within a <code>{ }</code> …\nError E0735: generic parameters with a default cannot use …\nThe <code>Self</code> type, as used somewhere other than within a trait.\nThe <code>Self</code> type, as used within a trait.\nA tool attribute module; e.g., the <code>rustfmt</code> in …\nError E0201: multiple impl items for the same trait item.\nError E0323, E0324, E0325: mismatch between trait item and …\nError E0437: type is not a member of trait.\nError E0426: use of undeclared label.\nError E0767: use of unreachable label\nUsed for tracking import use types which will be used for …\nError E0409: variable <code>{}</code> is bound in inconsistent ways …\nError E0408: variable <code>{}</code> is not bound in all patterns.\nThis function adds a suggestion to remove an unnecessary …\nThis function adds a suggestion to change the binding name …\nAmbiguity errors are delayed for deduplication.\nA map from nodes to anonymous modules. Anonymous modules …\nAfter we obtain a fresh AST fragment from a macro, code in …\nCandidates which user could <code>use</code> to access the missing type.\nSuggests importing a macro from the root of the crate …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompile the macro into a <code>SyntaxExtension</code> and its rule …\n<code>derive(Copy)</code> marks items they are applied to so they are …\nAdds a definition with a parent definition.\nIf the binding refers to a tuple struct constructor with …\nFeatures declared for this crate.\nThe <code>DefId</code> of the module to place the use-statements in.\nRetrieves definition span of the given <code>DefId</code>.\nDefines <code>name</code> in namespace <code>ns</code> of module <code>parent</code> to be <code>def</code> if …\nReady or in-progress results of resolving paths inside the …\nAll imports known to succeed or fail.\n0 if ident is not <code>_</code>, otherwise a value that’s unique to …\nLookup typo candidate in scope for a macro or import.\nResolve an identifier in lexical scope. This is a …\nDisambiguator for anonymous adts.\nA fake module that contains no definition and no prelude. …\nThis modifies <code>self</code> in place. The traits will be stored in …\nItem with a given <code>LocalDefId</code> was defined during macro …\n<code>CrateNum</code> resolutions of <code>extern crate</code> items.\nLifetime parameters that lowering will have to introduce.\nN.B., this is used only for better diagnostics, not name …\nSpan of the privacy modifier in fields of an item <code>DefId</code> …\nPerforms final import resolution, consistency checks and …\nFinds a cfg-ed out item inside <code>module</code> with the matching …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf <code>def_id</code> refers to a module (in resolver’s sense, i.e. …\nWalks up the tree of definitions starting at <code>def_id</code>, …\nInvocation ids of all glob delegations.\nMaps glob imports to the names of items actually imported.\nSignals whether this <code>PathSegment</code> has generic arguments. …\nSignals whether this <code>PathSegment</code> has lifetime arguments.\nHelper attributes that are in scope for the given …\nThe identifier for the binding, always the …\nSimplified analogue of module <code>resolutions</code> but in trait …\nAnalogue of module <code>unexpanded_invocations</code> but in trait …\nGiven a binding and an import that resolves to it, return …\nResolutions for import nodes, which have multiple …\nA bunch of methods and structures more or less related to …\nAll non-determined imports.\nWhether the diagnostic should say “instead” (as in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParent scopes in which the macros were invoked. FIXME: …\nWhen collecting definitions from an AST fragment produced …\nWhether the expected source is a call\nIs this a name binding of an import?\nThe binding introduced by <code>#[macro_export] macro_rules</code> is a …\nAmount of lifetime parameters for each item in the crate.\nWhat kind of module this is, because this may not be a <code>mod</code>.\nResolutions for labels (node IDs of their corresponding …\n“Late resolution” is the pass that resolves most of …\nMapping between names and their (possibly in-progress) …\nChecks if an expression refers to a function marked with …\nWhether lifetime elision was successful.\nResolutions for lifetimes.\nWhen name resolution fails, this method can be used to …\nCrate-local macro expanded <code>macro_export</code> referred to by a …\n<code>macro_rules</code> scopes produced by <code>macro_rules</code> item …\nA bunch of methods and structures more or less related to …\nSuggests a missing external crate name if that resolves to …\nSuggests a missing <code>crate::</code> if that resolves to an correct …\nSuggest a missing <code>self::</code> if that resolves to an correct …\nSuggests a missing <code>super::</code> if that resolves to an correct …\nAdds suggestions for a path that cannot be resolved.\nTest if AmbiguityError ambi is any identical to any one …\nCreates a parent scope with the passed argument used as …\nBinding for implicitly declared names that come with a …\nA somewhat inefficient routine to obtain the name of a …\nGet name of the module.\nAvoid duplicated errors for “name already defined”.\nThe <code>DefId</code> of the nearest <code>mod</code> item ancestor (which may be …\nWhether <code>#[no_implicit_prelude]</code> is active.\nNode ID for linting.\n<code>macro_rules</code> scopes <em>produced</em> by expanding the macro …\nThe direct parent module (it may not be a <code>mod</code>, however).\nResolutions for nodes that have a single resolution.\nPath <code>Segment</code>s at the place of use that failed. Used for …\nSpan of the whole path or some its characteristic fragment.\nRuns the function on each namespace.\nIndices of unnamed struct or variant fields with …\nTrue if this is a module from other crate that needs to be …\nPrivacy errors are delayed until the end in order to …\nA list of proc macro LocalDefIds, written out in the order …\nCombines an error with provided span and emits it.\nWhether to report privacy errors or silently return “no …\nEntry point to crate resolution.\nThis resolves the identifier <code>ident</code> in the namespace <code>ns</code> in …\nAttempts to resolve <code>ident</code> in namespaces <code>ns</code> of <code>module</code>. …\nAttempts to resolve the given import, returning:\nResolves all imports for the crate. This method performs …\nRustdoc uses this to resolve doc link paths in a …\nSpan of the path start, suitable for prepending something …\nIs the format <code>use a::{b,c}</code>?\nTraces collected during macro resolution and validated …\nResolve macro path with error reporting and recovery. Uses …\nSpan of the module itself. Used for error reporting.\nNames of items that were stripped out via cfg with their …\nTable for mapping struct IDs into struct constructor IDs, …\nExtra free-form suggestion.\nSome way to know that we are in a <em>trait</em> impl in …\nUsed to memoize the traits in this module for faster …\nDefine the name or return the existing binding if there is …\nMacro invocations that can expand into items in this …\n<code>use</code> injections are delayed for better placement and …\nTracks whether an item is used in scope or used relatively …\nValidate a local resolution (from ribs).\nA generic scope visitor. Visits scopes in order to resolve …\nProduce a warning instead of an error when reporting …\nThe final module being resolved, for instance:\nThe segment name of target\nThe item introducing the <code>Self</code> type alias. Can be used in …\nWhether the <code>Self</code> type is disallowed from mentioning …\nIs this within an <code>impl Foo for bar</code>?\nThe trait this <code>Self</code> is a generic parameter for.\nDefinition having a unique ID (<code>DefId</code>), corresponds to …\nName resolution failed. We use a dummy <code>Res</code> variant so …\nA local variable or function parameter.\nAn attribute that is <em>not</em> implemented via macro. E.g., …\nA primitive type such as <code>i32</code> or <code>str</code>.\nThe <code>Self</code> constructor, along with the [<code>DefId</code>] of the impl …\nThe <code>Self</code> type, as used somewhere other than within a trait.\nThe <code>Self</code> type, as used within a trait.\nA tool attribute module; e.g., the <code>rustfmt</code> in …\nBuilds the reduced graph for a single item in an external …\nConstructs the reduced graph for one foreign item.\nConstructs the reduced graph for one item.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>true</code> if this attribute list contains <code>macro_use</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if we should consider the underlying …\nVisit invocation in context in which it can emit a named …\nThe item introducing the <code>Self</code> type alias. Can be used in …\nWhether the <code>Self</code> type is disallowed from mentioning …\nIs this within an <code>impl Foo for bar</code>?\nThe trait this <code>Self</code> is a generic parameter for.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the item has attrs.\nName used to refer to the crate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the statement renames the crate …\nSpan from the item\nSpan to use to suggest complete removal.\nAll the (so far) unused imports, grouped path list\nSpan of the visibility, if any.\nCreates <code>DefId</code>s for nodes in the AST.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefinition having a unique ID (<code>DefId</code>), corresponds to …\nWhether a binding is part of a pattern or a use statement. …\nName resolution failed. We use a dummy <code>Res</code> variant so …\nWhether an existing place with an <code>use</code> item was found.\nThe binding is part of a use statement\nA free importable items suggested in case of resolution …\nA suggestion has already been emitted, change the wording …\nPotential candidate for an undeclared or out-of-scope …\nA local variable or function parameter.\nAn attribute that is <em>not</em> implemented via macro. E.g., …\nThe binding is part of a pattern\nA primitive type such as <code>i32</code> or <code>str</code>.\nThe <code>Self</code> constructor, along with the [<code>DefId</code>] of the impl …\nThe <code>Self</code> type, as used somewhere other than within a trait.\nThe <code>Self</code> type, as used within a trait.\nThe target has a similar name as the name used by the …\nThe target is the only valid item that can be used in the …\nA vector of spans and replacements, a message and …\nA tool attribute module; e.g., the <code>rustfmt</code> in …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nGiven a <code>binding_span</code>, return the span through to the comma …\nGiven a <code>use_span</code> of a binding within a use statement, …\nGiven a <code>binding_span</code> of a binding within a use statement:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn extra note that should be issued if this item is …\nAdjust the impl span so that just the <code>impl</code> keyword is …\nWhen an entity with a given name is not available in …\nThe source location where the name is defined; None if the …\n<code>true</code> mean add the tips afterward for case <code>use a::{b,c}</code>, …\nThe item introducing the <code>Self</code> type alias. Can be used in …\nWhether the <code>Self</code> type is disallowed from mentioning …\nIs this within an <code>impl Foo for bar</code>?\nThe trait this <code>Self</code> is a generic parameter for.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFills the <code>Resolver::effective_visibilities</code> table with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhile walking import chains we need to track effective …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll effective visibilities for a node are larger or equal …\nUpdate effective visibilities of bindings in the given …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVisible everywhere (including in other crates).\nVisible only in the given crate-local module.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefinition having a unique ID (<code>DefId</code>), corresponds to …\nName resolution failed. We use a dummy <code>Res</code> variant so …\nAll imports are unique and allocated on a same arena, so …\nOne import.\nContains data for specific kinds of imports.\nA local variable or function parameter.\nRecords information about the resolution of a name in a …\nAn attribute that is <em>not</em> implemented via macro. E.g., …\nA primitive type such as <code>i32</code> or <code>str</code>.\nThe <code>Self</code> constructor, along with the [<code>DefId</code>] of the impl …\nThe <code>Self</code> type, as used somewhere other than within a trait.\nThe <code>Self</code> type, as used within a trait.\nA tool attribute module; e.g., the <code>rustfmt</code> in …\nAn error that may be transformed into a diagnostic later. …\nReturns the binding for the name if it is known or None if …\nThe least shadowable known binding for this name, or None …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDid the use statement have any attributes?\nThe resolution of <code>module_path</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncomes from <code>PathRes::Failed { module }</code>\nNode ID of the “root” use item – this is always the …\nSpan of the <em>root</em> use tree (see <code>root_id</code>).\nSingle imports that may define the name in the namespace. …\nSpan of this use tree.\nSpan of the entire use statement.\nSpan of the entire use statement with attributes.\nThe ID of the <code>UseTree</code> that imported this <code>Import</code>.\nDid this import result from a nested import? ie. …\n<code>source</code> in <code>use prefix::source as target</code>.\nBindings to which <code>source</code> refers to.\n<code>target</code> in <code>use prefix::source as target</code>.\nBindings introduced by <code>target</code>.\n<code>true</code> for <code>...::{self [as target]}</code> imports, <code>false</code> otherwise.\nA field has been added indicating whether it should be …\nThe item introducing the <code>Self</code> type alias. Can be used in …\nWhether the <code>Self</code> type is disallowed from mentioning …\nIs this within an <code>impl Foo for bar</code>?\nThe trait this <code>Self</code> is a generic parameter for.\nDescribes whether an <code>AnonConst</code> is a type level const arg or\nCreate a new anonymous lifetime parameter and reference it.\nGive a hard error when either <code>&amp;</code> or <code>&#39;_</code> is written. Used to …\nWe passed through an impl or trait and are now in one of …\nUsage of generic parameters is forbidden in various …\nWe are inside of the type of a const parameter. Can’t …\nThis rib forbids usage of generic parameters inside of …\nMay this constant have generics?\nWe’re in a constant item. Can’t refer to dynamic stuff.\nDefinition having a unique ID (<code>DefId</code>), corresponds to …\nReplace all anonymous lifetimes by provided lifetime.\nSignal we cannot find which should be the anonymous …\nName resolution failed. We use a dummy <code>Res</code> variant so …\nWe passed through a function, closure or coroutine …\nAll bindings in this rib are generic parameters that can’…\nThis rib declares generic parameters. Only for this kind …\nDoes this the item (from the item rib scope) allow generic …\nWe are inside a <code>sym</code> inline assembly operand. Can only …\nEnum discriminants are not allowed to reference generic …\nWe passed through an item scope. Disallow upvars.\nThis rib acts as a barrier to forbid reference to …\nWalks the whole crate in DFS order, visiting each item, …\nA local variable or function parameter.\nWe passed through a <code>macro_rules!</code> statement\nAt this point for most items we can answer whether that …\nWe passed through a module.\nReason for why an anon const is not allowed to reference …\nAn attribute that is <em>not</em> implemented via macro. E.g., …\nConst arguments are only allowed to use generic parameters …\nNo restriction needs to be applied.\nAn or-pattern context, e.g., <code>p_0 | ... | p_n</code>.\nDenotes whether the context for the set of already bound …\nA primitive type such as <code>i32</code> or <code>str</code>.\nA product pattern context, e.g., <code>Variant(a, b)</code>.\nA single local scope.\nThe rib kind restricts certain accesses, e.g. to a …\nThe <code>Self</code> constructor, along with the [<code>DefId</code>] of the impl …\nThe <code>Self</code> type, as used somewhere other than within a trait.\nThe <code>Self</code> type, as used within a trait.\nResolves elided lifetimes to <code>&#39;static</code> if there are no other …\nA tool attribute module; e.g., the <code>rustfmt</code> in …\nUsed for recording UnnecessaryQualification.\nCheck if the source is call expression and the first …\nCheck the consistency of bindings wrt or-patterns and …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nBuild a map from pattern identifiers to binding-info’s, …\nCompute the binding map for an or-pattern. Checks that all …\nWhether this rib kind contains generic parameters, as …\nOnly used for better errors on <code>let x = { foo: bar };</code>. In …\nAccumulate the errors due to missed lifetime elision, and …\nThe current enclosing (non-closure) function (used for …\nThe current impl items (used to suggest).\nThe current trait (used to suggest).\nOnly used for better errors on <code>let &lt;pat&gt;: &lt;expr, not type&gt;;</code>…\nThe current self item if inside an ADT (used for better …\nThe current self type if inside an impl (used for better …\nThe current trait’s associated items’ ident, used for …\nIf we are currently in a trait object definition. Used to …\nThe trait that the current context can refer to.\nGiven <code>where &lt;T as Bar&gt;::Baz: String</code>, suggest …\nWhen processing generic arguments and encountering an …\nWhen processing impl trait\nCheck if definition matches a path\nFields used to add information to diagnostic errors.\nNon-static lifetimes are prohibited in anonymous constants …\nList all the lifetimes that appear in the provided type.\nGiven the target <code>ident</code> and <code>kind</code>, search for the similarly …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed to detect possible new binding written without <code>let</code> …\nState used to know whether to ignore resolution errors for …\nUsed to detect possible <code>if let</code> written without <code>let</code> and to …\nIf we are setting an associated type in trait impl, is it …\nUsed to detect possible <code>.</code> -&gt; <code>..</code> typo when calling methods.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis rib forbids referring to labels defined in upwards …\nDetermine whether or not a label from the <code>rib_index</code>th …\nThe current set of local scopes, for labels.\nPrevious popped <code>rib</code>, only used for diagnostic.\nWe are looking for lifetimes in an elision context. The …\nThe current set of local scopes for lifetimes.\nCount the number of places a lifetime is used.\nThe module that represents the current item scope.\nConstruct the list of in-scope lifetime parameters for …\nA wrapper around <code>Resolver::report_error</code>.\nThere are a few places that we need to resolve an anon …\nResolve inside function parameters and parameter types. …\nPerform resolution of a function signature, accounting for …\nSearches the current set of local scopes for labels. …\nResolve bindings in a pattern. This is a helper to …\nArising from <code>source</code>, resolve a top level pattern.\nHandles paths that may refer to associated items.\nWhen evaluating a <code>trait</code> use its associated types’ idents …\nGiven <code>where &lt;T as Bar&gt;::Baz: String</code>, suggest …\nThe current set of local scopes for types and values.\nIf we’re actually rustdoc then avoid giving a name …\nProvides context-dependent help for errors reported by the …\nTry to suggest for a module path that cannot be resolved. …\nHandles error reporting for <code>smart_resolve_path_fragment</code> …\nEmit special messages for unresolved <code>Self</code> and <code>self</code>.\nAdds a suggestion for using an enum’s variant when an …\nGiven the target <code>label</code>, search the <code>rib_index</code>th label rib …\nA list of labels as of yet unused. Labels will be removed …\nThis is called to resolve a trait reference from an <code>impl</code> …\nDo some <code>work</code> within a new innermost rib of the given <code>kind</code> …\nThe item introducing the <code>Self</code> type alias. Can be used in …\nWhether the <code>Self</code> type is disallowed from mentioning …\nIs this within an <code>impl Foo for bar</code>?\nThe trait this <code>Self</code> is a generic parameter for.\nA field or associated item from self type suggested in …\nOnly used for diagnostics.\nDefinition having a unique ID (<code>DefId</code>), corresponds to …\nDescription of the lifetimes appearing in a function …\nName resolution failed. We use a dummy <code>Res</code> variant so …\nThis is not a real lifetime.\nDescription of lifetimes that appear as candidates for …\nA local variable or function parameter.\nDescription of an elided lifetime.\nThere is a named lifetime, we won’t suggest anything.\nAn attribute that is <em>not</em> implemented via macro. E.g., …\nA primitive type such as <code>i32</code> or <code>str</code>.\nThe <code>Self</code> constructor, along with the [<code>DefId</code>] of the impl …\nThe <code>Self</code> type, as used somewhere other than within a trait.\nThe <code>Self</code> type, as used within a trait.\nA tool attribute module; e.g., the <code>rustfmt</code> in …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nNumber of elided lifetimes, used for elision in path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed to overwrite the resolution with the suggestion, to …\nThe name of the argument if it’s a simple ident.\nGets the stringified path for an enum from an …\nThe index of the argument in the original definition.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow the lifetime was introduced, to have the correct space …\nThe number of lifetimes in the parameter.\nShadowing involving a label is only a warning for …\nReport lifetime/lifetime shadowing as an error.\nWhere to suggest adding the lifetime.\nThe span of the parameter.\nThe item introducing the <code>Self</code> type alias. Can be used in …\nWhether the <code>Self</code> type is disallowed from mentioning …\nIs this within an <code>impl Foo for bar</code>?\nThe trait this <code>Self</code> is a generic parameter for.\nThe scope introduced by a <code>macro_rules!</code> macro definition.\nDefinition having a unique ID (<code>DefId</code>), corresponds to …\nEmpty “root” scope at the crate start containing no …\nName resolution failed. We use a dummy <code>Res</code> variant so …\nThe scope introduced by a macro invocation that can …\nA local variable or function parameter.\nBinding produced by a <code>macro_rules</code> item. Not modularized, …\nThe scope introduced by a <code>macro_rules!</code> macro. This starts …\n<code>macro_rules!</code> scopes are always kept by reference and …\nAn attribute that is <em>not</em> implemented via macro. E.g., …\nA primitive type such as <code>i32</code> or <code>str</code>.\nThe <code>Self</code> constructor, along with the [<code>DefId</code>] of the impl …\nThe <code>Self</code> type, as used somewhere other than within a trait.\nThe <code>Self</code> type, as used within a trait.\nA tool attribute module; e.g., the <code>rustfmt</code> in …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>macro_rules</code> scope into which the <code>macro_rules</code> item was …\nMacro namespace is separated into two sub-namespaces, one …\nThe item introducing the <code>Self</code> type alias. Can be used in …\nWhether the <code>Self</code> type is disallowed from mentioning …\nIs this within an <code>impl Foo for bar</code>?\nThe trait this <code>Self</code> is a generic parameter for.\nA portion of documentation, extracted from a <code>#[doc]</code> …\nThe link has empty angle brackets.\nThe link uses fully-qualified syntax, which is currently …\nThe link has an invalid path separator.\nThe generics are not attached to a type.\nA doc fragment created from a “raw” <code>#[doc=&quot;&quot;]</code> …\nA doc fragment created from a <code>///</code> or <code>//!</code> doc comment.\nThe link has too many angle brackets.\nThis link has unbalanced angle brackets.\nThe goal of this function is to apply the <code>DocFragment</code> …\nSimplified version of <code>preprocessed_markdown_links</code> from …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCollects additional data of link.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHas <code>#[rustc_doc_primitive]</code> or <code>#[doc(keyword)]</code>.\nReturns whether the first doc-comment is an inner …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe item this doc-comment came from. Used to determine the …\nOptions for rendering Markdown in the main body of …\nKeep inline and reference links <code>[]</code>, but skip autolinks <code>&lt;&gt;</code> …\nSimiliar version of <code>markdown_links</code> from rustdoc. This will …\nReturn the doc-comments on this item, grouped by the …\nSimplified version of the corresponding function in …\nAttempts to match a range of bytes from parsed markdown to …\nReturns a span encompassing all the document fragments.\nRemoves excess indentation on comments in order for the …")