searchState.loadedDescShard("rustc_ast_lowering", 0, "Lowers the AST to the HIR.\nRaw content of Fluent resource for this crate, generated …\n<code>impl Trait</code> is not accepted in this position.\nAny path in a type context.\nPath in a type definition, where the anonymous lifetime <code>&#39;_</code> …\n<code>impl Trait</code> is unstably accepted in this position.\nHelper struct for the delayed construction of …\nContext of <code>impl Trait</code> in code, which determines whether it …\nPosition in which <code>impl Trait</code> is disallowed.\nTreat <code>impl Trait</code> as shorthand for a new opaque type. …\nThe <code>module::Type</code> in <code>module::Type::method</code> in an expression.\nTreat <code>impl Trait</code> as shorthand for a new universal generic …\nUsed to allocate HIR nodes.\nAn associated type binding (i.e., associated type equality …\nAttributes inside the owner being lowered.\nEmit a friendly error for extra <code>..</code> patterns in a …\nUsed to ban the <code>..</code> pattern in places it shouldn’t be …\nBodies inside the owner being lowered.\nCollect items that were created by lowering the current …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompute the hash for the HIR of the full crate. This hash …\nWhy do we need this in addition to …\nUsed to get the current <code>fn</code>’s def span to point to when …\nThis module implements expansion of delegation items with …\nConvert the LHS of a destructuring assignment to a pattern.\nDestructure a sequence of expressions occurring on the LHS …\nInvoked to create the lifetime argument(s) for an elided …\nWrap the given <code>expr</code> in a terminating scope using …\nConstruct <code>ExprKind::Err</code> for the given <code>span</code>.\n<code>&lt;LangItem&gt;::name</code>\nIf the given expression is a path to a tuple struct, …\nIf the given expression is a path to a unit struct, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMapping from generics <code>def_id</code>s to TAIT generics <code>def_id</code>s. …\nObtains per-namespace resolutions for <code>use</code> statement with …\nObtains resolution for a label with the given <code>NodeId</code>.\nObtains resolution for a lifetime with the given <code>NodeId</code>.\nObtains resolution for a <code>NodeId</code> with a single resolution.\nGet the previously recorded <code>to</code> local def id given the <code>from</code> …\nInline literals into the format string.\nGet the maximum value of int_ty. It is platform-dependent …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a lifetime into a new generic parameter.\nSee <code>hir::ConstArg</code> for when to use this function vs …\nSee <code>hir::ConstArg</code> for when to use this function vs …\nLower an associated item constraint.\nLowers a block directly to an expression, presuming that it\nLowers a desugared coroutine body after moving all of the …\nTransforms <code>-&gt; T</code> into <code>Future&lt;Output = T&gt;</code>.\nDestructure the LHS of complex assignments. For instance, …\nDesugar <code>&lt;expr&gt;.await</code> into:\nDesugar <code>ExprForLoop</code> from: …\nDesugar <code>&lt;start&gt;..=&lt;end&gt;</code> into …\nDesugar <code>ExprKind::Try</code> from: <code>&lt;expr&gt;?</code> into:\nDesugar <code>try { &lt;stmts&gt;; &lt;expr&gt; }</code> into …\nMatches …\nDesugar <code>ExprKind::Yeet</code> from: <code>do yeet &lt;expr&gt;</code> into:\nLowers a function declaration.\nReturn the pair of the lowered <code>generics</code> as <code>hir::Generics</code> …\nLowers a lifetime binder that defines <code>generic_params</code>, …\nTakes what may be the body of an <code>async fn</code> or a <code>gen fn</code> and …\nThis method allocates a new <code>HirId</code> for the given <code>NodeId</code> and …\nLowers a <code>ReturnPositionOpaqueTy</code> (<code>-&gt; impl Trait</code>) or a …\nLower a slice pattern of form <code>[pat_0, ..., pat_n]</code> into …\nIntercept all spans entering HIR. Mark a span as relative …\nLower/desugar a coroutine construct.\nTakes an expr that has already been lowered and generates …\nWhen a bound is annotated with <code>async</code>, it signals to …\nReuses the span but adds information like the kind of the …\nForwards a possible <code>#[track_caller]</code> annotation from …\nGenerate a new <code>HirId</code> without a backing <code>NodeId</code>.\nNodeIds that are lowered inside the current HIR owner.\nGiven the id of some node in the AST, finds the <code>LocalDefId</code> …\nGiven the id of some node in the AST, finds the <code>LocalDefId</code> …\nConstruct a <code>Pat</code> with the <code>HirId</code> of <code>p.id</code> lowered.\nObtain the list of lifetimes parameters to add to an item.\nWhen inside an <code>async</code> context, this is the <code>HirId</code> of the …\nTry to convert a literal into an interned string\nGet the maximum value of uint_ty. It is platform-dependent …\nFreshen the <code>LoweringContext</code> and ready it to lower a nested …\nInstalls the remapping <code>remap</code> in scope while <code>f</code> is being …\nOnly used to change the lifetime capture rules, since …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe are awaiting something that’s known to be an …\nWe are awaiting a normal future\nUsed by <code>LoweringContext::make_lowered_await</code> to customize …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFlattens nested <code>format_args!()</code> into one.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerate a hir expression representing an argument to a …\nGenerate a hir expression for a format_args Count.\nGenerate a hir expression for a format_args placeholder …\nA visitor that walks over the HIR and collects <code>Node</code>s into …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutputs\nThe parent of this node\nBecause we want to track parent items and so forth, enable …\nWhen we have a ty alias we <em>may</em> have two where clauses. To …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis collect lifetimes that are elided, for nodes like …")