searchState.loadedDescShard("rustc_ty_utils", 0, "Various checks\nRaw content of Fluent resource for this crate, generated …\nQueries for checking whether a type implements one of a …\nErrors emitted by ty_utils\nCheck whether a type has (potentially) non-trivial drop …\nThis module contains helpers for walking all types of a …\nEnsure that the ABI makes basic sense.\nGiven an <code>def_id</code> of a trait or a trait impl:\nGiven an <code>trait_assoc_def_id</code> corresponding to an associated …\nGiven an <code>opaque_ty_def_id</code> corresponding to an <code>impl Trait</code> …\nGiven an <code>fn_def_id</code> of a trait or a trait implementation:\nWe do not allow all binary operations in abstract consts, …\nWhile we currently allow all unary operations, we still …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDestructures array, ADT or tuple constants into the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilds an abstract const, do not use this directly, but …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOverlap eligibility and variant assignment for each …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompute the full coroutine layout.\nCompute the eligibility and assignment of each local.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnforce some basic invariants on layouts.\nContains the error value\nType has a <code>Drop</code> but it is considered insignificant. Check …\nContains the success value\nType has a <code>Drop</code> implantation.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nHACK: in order to not mistakenly assume that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA stack of types left to process, and the recursion depth …\nFor impl trait in assoc types we only permit collecting …\nReturns <code>true</code> if <code>opaque_hir_id</code> is a sibling or a child of a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>DefId</code> of the item which we are collecting opaque types …\nAvoid infinite recursion due to recursive declarations.\nThis method returns true if and only if <code>adt_ty</code> itself has …\nWalk through a function type, gathering all RPITITs and …\nCalculates the <code>Sized</code> constraint.\nCheck if a function is async.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSee <code>ParamEnv</code> struct definition for details.\nIf the given trait impl enables exploiting the former …")