searchState.loadedDescShard("rustc_query_system", 0, "Raw content of Fluent resource for this crate, generated …\nCache for candidate selection.\nICH - Incremental Compilation Hash\nActually frees the underlying memory in contrast to what …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew dependencies can be added to the <code>TaskDeps</code>. This is …\nThis is the highest value a <code>DepKind</code> can have. It’s used …\nWe use this for most things when incr. comp. is turned off.\nWe use this to create a forever-red node.\nThe fingerprint is actually a DefPathHash.\nThis is used when executing an <code>eval_always</code> query. We don’…\nDescribes the contents of the fingerprint generated by a …\nAny attempt to add new dependencies will cause a panic. …\nThe fingerprint is actually a HirId.\nNew dependencies are ignored. This is also used for …\nSome opaque hash.\nData for use when recompiling the <strong>current crate</strong>.\nQuery key was <code>()</code> or equivalent, so fingerprint is just …\nA “work product” is an intermediate result that we …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCode for debugging the dep-graph.\nAccess the DepGraph.\nThis module defines the <code>DepNode</code> type which the compiler …\nA flattened list of all edge targets in the graph, stored …\nFor each DepNode, stores the list of edges originating …\nThe set of all Fingerprints in the graph. Each Fingerprint …\nReturns the argument unchanged.\nStores a map from fingerprints to nodes per dep node kind. …\nCalls <code>U::from(self)</code>.\nReturn whether this kind always require evaluation.\nThe set of all DepNodes in the graph\nAccess the profiler.\nAccess dependencies from current implicit context.\nSaved files associated with this CGU. In each key/value …\nThe data that we will serialize and deserialize.\nAccess the compiler session.\nTry to force a dep node to execute and see if it’s green.\nLoad data from the on-disk cache.\nThis field is used for assigning DepNodeIndices when …\nExecute the operation with provided dependencies.\nCreate a hashing context for hashing new results.\nA dep-node filter goes from a user-defined string to a …\nA filter like <code>F -&gt; G</code> where <code>F</code> and <code>G</code> are valid dep-node …\nReturns <code>true</code> if all nodes always pass the filter.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTests whether <code>node</code> meets the filter, returning true if so.\nThis serves as an index into arrays built by …\nThis struct stores metadata about each DepKind.\nA “work product” corresponds to a <code>.o</code> (or other) file …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nWhether the query key can be recovered from the hashed …\nThe red/green evaluation system will try to mark a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a DepNode from the given DepKind and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAnonymous queries cannot be replayed from one compiler …\nEval-always queries do not track their dependencies, and …\nThe name of this dep kind.\nCreates a new, parameterless DepNode. This method will …\nThis method tries to recover the query key from the given …\nThis method turns the parameters of a DepNodeConstructor …\nInvoke a query to put the on-disk cached value in memory.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNew dependencies can be added to the <code>TaskDeps</code>. This is …\n<code>CurrentDepGraph</code> stores the dependency graph for the …\nThis is used when executing an <code>eval_always</code> query. We don’…\nAny attempt to add new dependencies will cause a panic. …\nNew dependencies are ignored. This is also used for …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nA “work product” is an intermediate result that we …\nZero value of the index.\nZero value of the index.\nAnonymous <code>DepNode</code>s are nodes whose IDs we compute from the …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe new encoding of the dependency graph, optimized for …\nUsed by incremental compilation tests to assert that a …\nAtomically emits some loaded diagnostics. This may be …\nThis method loads all on-disk cacheable query results into …\nThis is used to verify that fingerprints do not change …\nUsed to trap when a specific edge is added to the graph. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nWrites the node to the current dep-graph and allocates a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if we are actually building the full …\nReturns true if the given node has been marked as green …\nReturns true if the given node has been marked as green …\nReturns true if the given node has been marked as red …\nThe dep-graph from the previous compilation session. It …\nChecks whether a previous work product exists for <code>v</code> and, if\nAccess the map of work-products created during the cached …\nWhen we load, there may be <code>.o</code> files, cached MIR, or other …\nSaved files associated with this CGU. In each key/value …\nThese are simple counters that are for profiling and …\nTry to mark a node index for the node dep_node.\nTry to mark a dep-node which existed in the previous …\nThis field is used for assigning DepNodeIndices when …\nExecutes something within an “anonymous” task, that …\nCreate a node when we force-feed a value into the query …\nUsed to wrap the deserialization of a query result from …\nStarts a new dep-graph task. Dep-graph tasks are specified …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll nodes that can reach <code>node</code>.\nAmount of padding we need to add to the edge list data so …\nNumber of bits we need to store the number of used bytes …\nA packed representation of an edge’s start index and …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nData for use when recompiling the <strong>current crate</strong>.\nA packed representation of all the fixed-size fields in a …\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nA flattened list of all edge targets in the graph, stored …\nFor each DepNode, stores the list of edges originating …\nEncodes a node to the current graph.\nEncode a node that was promoted from the previous graph. …\nEncodes a node that was promoted from the previous graph. …\nThe set of all Fingerprints in the graph. Each Fingerprint …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nStores a map from fingerprints to nodes per dep node kind. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStores the number of times we’ve encoded each dep kind.\nThe set of all DepNodes in the graph\nEncodes a node that was promoted from the previous graph. …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is the context state available during incr. comp. …\nThis module contains <code>HashStable</code> implementations for …\nThis is the context state available during incr. comp. …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNo value.\nRepresents a span and a query key.\nRepresents an active query job.\nA value uniquely identifying an active query job.\nTracks ‘side effects’ for a particular query. This …\nDescription of a frame in the query stack.\nSome value of type <code>T</code>.\nDetects query cycles by using depth first search over all …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nQuery configuration and description traits.\nGet the query information from the TLS context.\nStores any diagnostics emitted during query execution. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis hash is used to deterministically pick a query to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe latch that is used to wait on this job.\nLoad side effects associated to the node in the previous …\nStores the local DefIds in a dense map. Local queries are …\nChecks if the query is already computed and in the cache.\nReturns true if there might be side effects.\nThe parent query job which created this job and is …\nThe implementation of the query system itself. This …\nThe span corresponding to the reason for which this query …\nThe span corresponding to the reason for which this query …\nExecutes a job by changing the <code>ImplicitCtxt</code> to point to the\nRegister diagnostics for the given node, for use in next …\nRegister diagnostics for the given node, for use in next …\nChecks if the query is already computed and in the cache. …\nA def-id that is extracted from a <code>Ty</code> in a query key\nThe query and related span that uses the cycle.\nSynthesize an error value to let compilation continue …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStores the local DefIds in a dense map. Local queries are …\nChecks if the query is already computed and in the cache.\nNo value.\nSome value of type <code>T</code>.\nSynthesize an error value to let compilation continue …\nRepresents a span and a query key.\nRepresents an active query job.\nA value uniquely identifying an active query job.\nA resumable waiter of a query. The usize is the index into …\nDetects query cycles by using depth first search over all …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFinds out if there’s a path to the compiler root (aka. …\nLook for query cycles by doing a depth first search …\nRemoves a single waiter from the list of waiters. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe latch that is used to wait on this job.\nCreates a new query job.\nThe parent query job which created this job and is …\nLooks for query cycles starting from the last query in <code>jobs</code>…\nSets the latch and resumes all waiters on it\nSignals to waiters that the query is complete.\nThe span corresponding to the reason for which this query …\nThe span corresponding to the reason for which this query …\nVisits all the non-resumable and resumable waiters of a …\nAwaits for the query job to complete.\nAwaits the caller on this latch by blocking the current …\nA type representing the responsibility to execute the job …\nThe query panicked. Queries trying to wait on this will …\nIndicates the state of a query for a given key in a query …\nAn already executing query. The query job can be used to …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompletes the query by updating the query cache with the …\nEnsure that either this query has all green inputs or been …\nUnwraps the query job expecting that it has started.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the query is already computed and in the cache. …\nThe query and related span that uses the cycle.")