searchState.loadedDescShard("rustc_mir_dataflow", 0, "A dataflow problem with an arbitrarily complex transfer …\nDefines the domain of a dataflow problem.\nDataflow that runs from the exit of a block (the …\nRaw content of Fluent resource for this crate, generated …\nThe type that holds the dataflow state at any given point …\nA solver for dataflow problems.\nDataflow that runs from the entry of a block (the first …\nThe legal operations for a transfer function in a gen/kill …\nA gen/kill dataflow problem.\nA partially ordered set that has a least upper bound for …\nExtend a lattice with a bottom value to represent an …\nA descriptive name for this analysis. Used only for …\nA dataflow analysis that has converged to fixpoint.\nAllows random access inspection of the results of a …\nThings that can be visited by a <code>ResultsVisitor</code>.\nA visitor over the results of an <code>Analysis</code>. The type …\nA type that records the edge-specific effects for a …\nCalls <code>apply_edge_effect</code> for each outgoing edge from a …\nUpdates the current dataflow state with the effect of a …\nApplies all effects between the given <code>EffectIndex</code>s.\nUpdates the current dataflow state with the effect of …\nCached, cumulative transfer functions for each block.\nUpdates the current dataflow state with the effect of …\nReturns the initial value of the dataflow state upon entry …\nSee <code>Analysis::apply_call_return_effect</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCustom formatting traits used when outputting Graphviz …\nA framework that can express both gen-kill and generic …\nReturns the argument unchanged.\nInserts <code>elem</code> into the state vector.\nA helpful diagram for debugging dataflow problems.\nDataflow analyses are built upon some interpretation of the\nMutates the initial value of the dataflow state upon entry …\nCalls <code>U::from(self)</code>.\nComputes the least upper bound of two elements, storing …\nRemoves <code>elem</code> from the state vector.\nTraits used to represent lattices for use as the domain of …\nCreates an empty <code>FlowState</code> to hold the transient state for …\nIndicates that <code>state</code> has been modified with a custom …\nSee <code>Analysis::apply_statement_effect</code>. Note how the second …\nSee <code>Analysis::apply_terminator_effect</code>.\nThis module provides a framework on top of the normal MIR …\nCalls the corresponding method in <code>ResultsVisitor</code> for every …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturn the set of locals that appear in debuginfo.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>handle_inactive_variant</code> for each descendant move …\nThe tracked value is uninitialized or was moved out of and …\nWhether the value needs to be dropped depends on its drop …\nThe value is already dead at the drop location, no drop …\nAffect all nested drop flags in addition to the top-level …\nWhich drop flags to affect/check with an operation.\nThe value of an inserted drop flag.\nDescribes how/if a value should be dropped.\nAlready in an unwind path, any panic will cause an abort.\nAn “open” drop is one where only the fields of a value …\nThe type representing paths that can be moved out of.\nThe tracked value is initialized and needs to be dropped …\nOnly affect the top-level drop flag, not that of any …\nThe value is known to always be initialized at the drop …\nUnwind to this block.\nDescribes if unwinding is necessary and where to unwind to …\nReturns the subpath of indexing a fixed-size array <code>path</code>.\nModifies the MIR patch so that the drop flag of <code>path</code> (if …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the subpath of a dereference of <code>path</code> (or <code>None</code> if …\nReturns the subpath of downcasting <code>path</code> to one of its …\nCreates a block that resets the drop flag. If <code>mode</code> is …\nReturns the block to jump to in order to test the drop …\nCreates one-half of the drop ladder for a list of fields, …\nCreates a full drop ladder, consisting of 2 connected …\nCreate a loop that drops an array:\nCreates a pair of drop-loops of <code>place</code>, which drops its …\nReturns how <code>path</code> should be dropped, given <code>mode</code>.\n“Elaborates” a drop of <code>place</code>/<code>path</code> and patches <code>bb</code>’s …\nThis elaborates a single drop instruction, located at <code>bb</code>, …\nReturns the subpath of a field of <code>path</code> (or <code>None</code> if there …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the drop flag of <code>path</code> as a MIR <code>Operand</code> (or <code>None</code> if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the place and move path for each field of <code>variant</code>, …\nThe slow-path - create an “open”, elaborated drop for …\nDrops the T contained in a <code>Box&lt;T&gt;</code> if it has not been moved …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplements <code>fmt::Debug</code> by deferring to …\nImplements <code>fmt::Debug</code> by deferring to …\nAn extension to <code>fmt::Debug</code> for data that can be better …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPrint the difference between <code>self</code> and <code>old</code>.\nPrint the difference between <code>self</code> and <code>old</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA dataflow problem with an arbitrarily complex transfer …\nDefines the domain of a dataflow problem.\nThe “before” effect (e.g., …\nAnalysis domains are all bitsets of various kinds. This …\nThe direction of this analysis. Either <code>Forward</code> or <code>Backward</code>.\nThe direction of this analysis. Either <code>Forward</code> or <code>Backward</code>.\nThe type that holds the dataflow state at any given point …\nThe legal operations for a transfer function in a gen/kill …\nA gen/kill dataflow problem.\nStores a transfer function for a gen/kill problem.\nA descriptive name for this analysis. Used only for …\nThe “primary” effect (e.g., <code>apply_statement_effect</code>) …\nA type that records the edge-specific effects for a …\nCalls <code>apply_edge_effect</code> for each outgoing edge from a …\nUpdates the current dataflow state with an effect that …\nUpdates the current dataflow state with an effect that …\nUpdates the current dataflow state with an effect that …\nUpdates the current dataflow state with an effect that …\nUpdates the current dataflow state with the effect of a …\nUpdates the current dataflow state with the effect of …\nUpdates the current dataflow state with the effect of …\nUpdates the current dataflow state with the effect of …\nUpdates the current dataflow state with the effect of …\nSee <code>Analysis::apply_before_statement_effect</code>. Note how the …\nSee <code>Analysis::apply_before_statement_effect</code>. Note how the …\nSee <code>Analysis::apply_before_terminator_effect</code>.\nSee <code>Analysis::apply_before_terminator_effect</code>.\nReturns the initial value of the dataflow state upon entry …\nSee <code>Analysis::apply_call_return_effect</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nRandom access inspection of the results of a dataflow …\nA solver for dataflow problems.\nCustom formatting traits used when outputting Graphviz …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts <code>elem</code> into the state vector.\nCalls <code>gen</code> for each element in <code>elems</code>.\nCalls <code>gen</code> for each element in <code>elems</code>.\nA helpful diagram for debugging dataflow problems.\nCreates a new transfer function that will leave the …\nMutates the initial value of the dataflow state upon entry …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an <code>Engine</code> to find the fixpoint for this dataflow …\nCreates an <code>Engine</code> to find the fixpoint for this dataflow …\nRemoves <code>elem</code> from the state vector.\nCalls <code>kill</code> for each element in <code>elems</code>.\nCalls <code>kill</code> for each element in <code>elems</code>.\nTraits used to represent lattices for use as the domain of …\nReturns <code>true</code> if the effect at <code>self</code> should be applied …\nReturns <code>true</code> if the effect at <code>self</code> should be applied …\nSee <code>Analysis::apply_statement_effect</code>. Note how the second …\nSee <code>Analysis::apply_switch_int_edge_effects</code>.\nSee <code>Analysis::apply_switch_int_edge_effects</code>.\nSee <code>Analysis::apply_terminator_effect</code>.\nAllows random access inspection of the results of a …\nReturns the <code>Analysis</code> used to generate the underlying …\nApplies <code>f</code> to the cursor’s internal state.\nReturns the body this analysis was run on.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the dataflow state at the current location.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps this cursor, returning the underlying <code>Results</code>.\nReturns the <code>Analysis</code> used to generate the underlying …\nReturns the underlying <code>Results</code>.\nReturns a new cursor that can inspect <code>results</code>.\nReturns the underlying <code>Results</code>.\nAdvances the cursor to hold the dataflow state at <code>target</code> …\nAdvances the cursor to hold the dataflow state at <code>target</code> …\nResets the cursor to hold the state after the terminator …\nResets the cursor to hold the entry set for the given …\nResets the cursor to hold the state prior to the first …\nIndicates that <code>state</code> has been modified with a custom …\nDataflow that runs from the exit of a block (the …\nDataflow that runs from the entry of a block (the first …\nApplies all effects between the given <code>EffectIndex</code>s.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn analogue of <code>Option::get_or_insert_with</code> that stores a …\nA solver for dataflow problems.\nA dataflow analysis that has converged to fixpoint.\nCached, cumulative transfer functions for each block.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nGets the dataflow state for the given block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>ResultsCursor</code> that can inspect these <code>Results</code>.\nComputes the fixpoint for this dataflow problem and …\nCreates a new <code>Engine</code> to solve a gen-kill dataflow problem.\nCreates a new <code>Engine</code> to solve a dataflow problem with an …\nReturns the path where dataflow results should be written, …\nAdds an identifier to the graphviz output for this …\nWrites a DOT file containing the results of a dataflow …\nImplements <code>fmt::Debug</code> by deferring to …\nImplements <code>fmt::Debug</code> by deferring to …\nAn extension to <code>fmt::Debug</code> for data that can be better …\nThe background color used for zebra-striping the table.\nA pair of a basic block and an index into that basic …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrite a row with the given index and MIR, using the …\nThe counterpart of a given semilattice <code>T</code> using the inverse …\nExtends a type <code>T</code> with top and bottom elements to make it a …\nA set that has a “bottom” element, which is less than …\nA set that has a “top” element, which is greater than …\nA partially ordered set that has a least upper bound for …\nExtend a lattice with a bottom value to represent an …\nA partially ordered set that has a greatest lower bound …\nComputes the least upper bound of two elements, storing …\nComputes the greatest lower bound of two elements, storing …\nThings that can be visited by a <code>ResultsVisitor</code>.\nA visitor over the results of an <code>Analysis</code>. The type …\nCreates an empty <code>FlowState</code> to hold the transient state for …\nCalls the corresponding method in <code>ResultsVisitor</code> for every …\nCalled with both the <code>before_statement_effect</code> and the …\nCalled with both the <code>before_statement_effect</code> and the …\nCalled with the <code>before_statement_effect</code> of the given …\nCalled with the <code>before_statement_effect</code> of the given …\nCalled with both the <code>before_terminator_effect</code> and the …\nCalled with both the <code>before_terminator_effect</code> and the …\nCalled with the <code>before_terminator_effect</code> of the given …\nCalled with the <code>before_terminator_effect</code> of the given …\n<code>DefinitelyInitializedPlaces</code> tracks all places that are …\n<code>EverInitializedPlaces</code> tracks all places that might have …\nA dataflow analysis that tracks whether a pointer or …\n<code>MaybeInitializedPlaces</code> tracks all places that might be …\nA live-variable dataflow analysis.\nDataflow analysis that determines whether each local …\nLike <code>MaybeLiveLocals</code>, but does not mark locals as live if …\n<code>MaybeUninitializedPlaces</code> tracks all places that might be …\nThe set of locals that are borrowed at some point in the …\nA dataflow analysis that tracks whether a pointer or …\nA <code>Visitor</code> that defines the transfer function for …\nThe set of locals that are borrowed at some point in the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>DefinitelyInitializedPlaces</code> tracks all places that are …\n<code>EverInitializedPlaces</code> tracks all places that might have …\n<code>MaybeInitializedPlaces</code> tracks all places that might be …\n<code>MaybeUninitializedPlaces</code> tracks all places that might be …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCauses inactive enum variants to be marked as “maybe …\nInspect a <code>SwitchInt</code>-terminated basic block to see if the …\nA live-variable dataflow analysis.\nLike <code>MaybeLiveLocals</code>, but does not mark locals as live if …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>always_alive</code> set is the set of locals to which all …\nDataflow analysis that determines whether each local …\nKill locals that are fully moved and have not been …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates that <code>state</code> has been modified with a custom …\nThe counterpart of a given semilattice <code>T</code> using the inverse …\nExtends a type <code>T</code> with top and bottom elements to make it a …\nA set that has a “bottom” element, which is less than …\nA set that has a “top” element, which is greater than …\nA partially ordered set that has a least upper bound for …\nExtend a lattice with a bottom value to represent an …\nA partially ordered set that has a greatest lower bound …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturn whether the current state contains the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the least upper bound of two elements, storing …\nComputes the greatest lower bound of two elements, storing …\nDeep init, even on panic\n<code>Init</code> represents a point in a program that initializes some …\nAdditional information about the initialization.\nInitializations can be from an argument or from a …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\n<code>MoveOut</code> represents a point in a program that moves out of …\n<code>MovePath</code> is a canonicalized representation of a path that …\nTables mapping from a place to its MovePathIndex.\nThis doesn’t initialize the variable on panic (and a …\nOnly does a shallow init\nZero value of the index.\nZero value of the index.\nZero value of the index.\nThe move-analysis portion of borrowck needs to work in an …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nFor the move path <code>mpi</code>, returns the root local variable …\nReturns an iterator over the immediate children of <code>self</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFinds the closest descendant of <code>self</code> for which <code>f</code> returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nEach Location <code>l</code> is mapped to the Inits that are effects of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn enumerated iterator of <code>local</code>s and their associated …\nExtra information about this initialization\nEach Location <code>l</code> is mapped to the MoveOut’s that are …\nlocation of initialization\nLocation-indexed (BasicBlock for outer index, index within …\nReturns an iterator over the parents of <code>self</code>.\npath being moved\npath being initialized\nprojections are made from a base-place and a projection …\nlocation of move\nThese indices are generated by slice patterns. Easiest to …\n“Downcast” to a variant of an enum or a coroutine.\nA field (e.g., <code>f</code> in <code>_1.f</code>) is one variant of [<code>ProjectionElem</code>…\nIndex into a slice/array.\nLike an explicit cast from an opaque type to a concrete …\nThese indices are generated by slice patterns.\nA <code>Subtype(T)</code> projection is applied to any …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCounting backwards from end? This is always false when …\nWhether <code>to</code> counts from the start or end of the array/slice.\nThe thing being indexed must be at least this long. For …\nindex or -index (in Python terms), depending on from_end\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis creates a MovePath for a given place, returning an …\nMaps between a <code>Location</code> and a <code>PointIndex</code> (and vice versa).\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nA single integer representing a <code>Location</code> in the MIR …\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nMap backward from each point to the basic block that it …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the <code>PointIndex</code> for the first statement in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTotal number of point indices\nConverts a <code>Location</code> into a <code>PointIndex</code>. O(1).\nSometimes we get point-indices back from bitsets that may …\nAdd points depending on the result of the given dataflow …\nFor each basic block, how many points are contained within?\nReturn the PointIndex for the block start of this index.\nConverts a <code>PointIndex</code> back to a location. O(1).\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis function scans <code>mir</code> for all calls to the intrinsic …\nIf <code>stmt</code> is an assignment where the LHS is the given local …\nThe set of locals in a MIR body that do not have …\nThe iterator returned by <code>UnDerefer::iter_projections</code>.\nUsed for reverting changes made by <code>DerefSeparator</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the chain of places behind <code>DerefTemp</code> locals\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the projections of a place and its deref …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nPartial mapping from <code>Place</code> to <code>PlaceIndex</code>, where some …\nThis index uniquely identifies a place.\nThis is the information tracked for every <code>PlaceIndex</code> and …\nThe dataflow state for an instance of <code>ValueAnalysis</code>.\nSee <code>State</code>.\nThe set of projection elements that can be used by a …\nFor each place of interest, the analysis tracks a value of …\nThis index uniquely identifies a tracked place and …\nUsed as the result of an operand or r-value.\nZero value of the index.\nZero value of the index.\nApplies a single projection element, yielding the …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nHelper method to interpret <code>target = result</code>.\nHelper method for assignments to a discriminant.\nPrecompute the list of values inside <code>root</code> and store it …\nIterate over all direct children.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns all locals with projections that have their …\nLocates the given place, if it exists in the tree.\nLocates the given place and applies <code>Discriminant</code>, if it …\nLocates the given place, if it exists in the tree.\nLocates the given place and applies <code>DerefLen</code>, if it exists …\nThe left-most child.\nAssign <code>TOP</code> to all places that are contained in <code>place</code> or …\nAssign <code>TOP</code> to the discriminant of <code>place</code> and all places …\nAssign <code>value</code> to the discriminant of <code>place</code> and all places …\nAssign <code>value</code> to all places that are contained in <code>place</code> or …\nThis method is the most general version of the <code>flood_*</code> …\nInvoke a function on the given place and all places that …\nInvoke a function on each value in the given place and all …\nInvoke a function on each value in the given place and all …\nInvoke the given function on all the descendants of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nRetrieve the value stored for a place, or ⊤ if it is not …\nRetrieve the value stored for a place, or ⊤ if it is not …\nRetrieve the value stored for a place index, or ⊤ if it …\nRetrieve the value stored for a place, or ⊤ if it is not …\nThe effect of a successful function call return should not …\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nLow-level method that assigns to a place. This does …\nCopies <code>source</code> to <code>target</code>, including all tracked places …\nLow-level method that assigns a value to a place. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvokes <code>f</code> on all direct fields of <code>ty</code>.\nThis map only contains values that are not <code>⊥</code>.\nReturns a map that only tracks places whose type has …\nIndex of the sibling to the right of this node.\nThe projection used to go from parent to this node (only …\nRegister all non-excluded places that have scalar layout.\nRetrieve the value stored for a place, or <code>None</code> if it is …\nRetrieve the discriminant stored for a place, or <code>None</code> if …\nRetrieve the value stored for a place index, or <code>None</code> if it …\nRetrieve the slice length stored for a place, or <code>None</code> if …\nType of the referenced place.\nWe store a <code>ValueIndex</code> if and only if the placed is tracked …")