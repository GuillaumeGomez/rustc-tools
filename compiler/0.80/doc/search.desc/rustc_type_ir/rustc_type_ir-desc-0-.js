searchState.loadedDescShard("rustc_type_ir", 0, "Algebraic data types (ADT). For example: structures, …\nA projection, opaque type, weak type alias, or inherent …\nSeparate from <code>ClauseKind::Projection</code> which is used for …\nRepresents the unprojected term of a projection goal.\nRepresents the projection of an associated, opaque, or …\nA marker predicate that is always ambiguous. Used for …\nAn array with the given length. Written as <code>[T; N]</code>.\nE.g., <code>Send</code>.\nBinder is a binder for higher-ranked lifetimes or types. …\nThe primitive boolean type. Written as <code>bool</code>.\nBound const variable, used only when preparing a trait …\nBound type variable, used to represent the <code>&#39;a</code> in …\nA “canonicalized” type <code>V</code> is one where all free …\nRust actually has more than one category of type variables;\nInformation about a canonical variable that is included …\nDescribes the “kind” of the canonical variable. This …\nA set of values corresponding to the canonical variables …\nThe primitive character type; holds a Unicode scalar value …\nProve a clause\nA clause is something that can appear in where bounds or …\nThe anonymous type of a closure. Used to represent the …\nA closure can be modeled as a struct that looks like:\nStruct returned by <code>split()</code>.\nRepresents the various closure traits in the language. This\n<code>T1</code> coerced to <code>T2</code>\nEncodes that we have to coerce <em>from</em> the <code>a</code> type to the <code>b</code> …\nImagine you have a function <code>F: FnOnce(&amp;[T]) -&gt; R</code>, plus an …\nSome kind of const inference variable.\n<code>Type: const Trait</code>\nEnsures that a const generic argument to a parameter …\nConstants must be equal. The first component is the const …\nConstant initializer must evaluate successfully.\n<code>Type: ~const Trait</code>\nRepresents a constant in Rust.\nA <strong><code>const</code></strong> <strong>v</strong>ariable <strong>ID</strong>.\nThe anonymous type of a coroutine. Used to represent the …\nSimilar to <code>ClosureArgs</code>; see the above documentation for …\nThe anonymous type of a closure. Used to represent the …\nSee docs for explanation of how each argument is used.\nA type representing the types stored inside a coroutine. …\nA De Bruijn index is a standard means of representing …\nAn unsized <code>dyn Trait</code> object\nSpecifies how a trait object is represented.\nA sized <code>dyn* Trait</code> object\nA trait object. Written as …\nSimilar to <code>super::Binder</code> except that it tracks early bound …\nEffect variable <code>&#39;?E</code>.\nInfer the value of the effect.\nAn <strong>effect</strong> <strong>v</strong>ariable <strong>ID</strong>.\nA placeholder for a const which could not be computed; …\nA placeholder for a type which could not be computed; this …\nA <code>ProjectionPredicate</code> for an <code>ExistentialTraitRef</code>.\nAn existential reference to a trait, where <code>Self</code> is erased. …\nUnevaluated non-const-item, used by …\nFloating-point type variable <code>?F</code> (that can only be unified …\nA primitive floating-point type. For example, <code>f64</code>.\nA floating-point type variable (<code>{float}</code>).\nA <strong>float</strong>ing-point (<code>f32</code> or <code>f64</code>) type <strong>v</strong>ariable <strong>ID</strong>.\nThe anonymous type of a function declaration/definition. …\nA pointer to a function. Written as <code>fn() -&gt; i32</code>.\nAn unsized FFI type that is opaque to Rust. Written as …\nA fresh const variable. See <code>infer::freshen</code> for more …\nLike <code>FreshTy</code>, but as a replacement for <code>FloatVar</code>.\nLike <code>FreshTy</code>, but as a replacement for <code>IntVar</code>.\nA <code>FreshTy</code> is one that is generated as a replacement for an …\nGeneral type variable <code>?T</code> that can be unified with …\nInfer the value of the const.\nA type variable used during type checking.\nAn inference variable for a const, for use in const …\nA placeholder for a type that hasn’t been inferred yet.\nAn associated type in an inherent <code>impl</code>\nAn associated type in an inherent <code>impl</code>\nIntegral type variable <code>?I</code> (that can only be unified with …\nA primitive signed integer type. For example, <code>i32</code>.\nAn integral type variable (<code>{integer}</code>).\nAn <strong>int</strong>egral (<code>u32</code>, <code>i32</code>, <code>usize</code>, etc.) type <strong>v</strong>ariable <strong>ID</strong>.\nThis is the initial value used when doing upvar inference.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\n<code>impl !Trait for Type</code>\n<code>Type: !Trait</code>\nThe never type <code>!</code>.\nUsed by the new solver. Unlike a <code>ProjectionPredicate</code> this …\nThis should only be used inside of the new solver for …\n<code>Type: Trait</code>\nTrait must be object-safe.\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\n<code>A: &#39;region</code>\nA const generic parameter.\nA type parameter; for example, <code>T</code> in <code>fn f&lt;T&gt;(x: T) {}</code>.\nA pattern newtype. Takes any type and restricts its valid …\nA placeholder const - universally quantified higher-ranked …\nA placeholder type, used during higher ranked subtyping to …\nA “placeholder” that represents “any const”.\nA “placeholder” that represents “any region”. …\nA “placeholder” that represents “any type”.\n<code>impl Trait for Type</code>\n<code>Type: Trait</code>\nPolarity for a trait predicate. May either be negative or …\nE.g., <code>Iterator::Item = T</code>.\n<code>where &lt;T as TraitRef&gt;::Name == X</code>, approximately. See the …\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\nAn unevaluated const coming from an associated const.\nThis kind of predicate has no <em>direct</em> correspondent in the …\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\nA raw pointer. Written as <code>*mut T</code> or <code>*const T</code>\nA higher-ranked region. These represent either late-bound …\nA region parameter; for example <code>&#39;a</code> in …\nErased region, used by trait selection, in MIR and during …\nA region that resulted from some other error. Used …\nLate-bound function parameters are represented using a …\nA placeholder region – the higher-ranked version of …\nStatic data that has an “infinite” lifetime. Top in …\nA region variable. Should not exist outside of type …\nA reference; a pointer with an associated lifetime. …\nRegion variable <code>&#39;?R</code>.\nRepresentation of regions. Note that the NLL checker uses …\n<code>where &#39;a: &#39;r</code>\nA <strong>region</strong> <strong>v</strong>ariable <strong>ID</strong>.\n<code>#[rustc_reservation_impl] impl Trait for Type</code>\nThe pointee of an array slice. Written as <code>[T]</code>.\nThe pointee of a string slice. Written as <code>str</code>.\n<code>T1 &lt;: T2</code>\nEncodes that <code>a</code> must be a subtype of <code>b</code>. The <code>a_is_expected</code> …\nE.g., <code>Iterator</code>.\nCorresponds to <code>where Foo: Bar&lt;A, B, C&gt;</code>. <code>Foo</code> here would be …\nA complete reference to a trait. These take numerous …\nA tuple type. For example, <code>(i32, bool)</code>.\nSome kind of type inference variable.\nDefines the kinds of types used by the type system.\nA type variable.\nA <strong>ty</strong>pe <strong>v</strong>ariable <strong>ID</strong>.\nFlags that we track on types. These flags are propagated …\n<code>where T: &#39;r</code>\nA primitive unsigned integer type. For example, <code>u32</code>.\nAn unnormalized const item such as an anon const or assoc …\nAn unevaluated (potentially generic) constant used in the …\nAn unevaluated const coming from a generic const …\n“Universes” are used during type- and trait-checking …\nAn <code>Into</code>-like trait that takes <code>TyCtxt</code> to perform …\nA <code>From</code>-like trait that takes <code>TyCtxt</code> to perform …\nUsed to hold computed value.\nInfer the value of the const.\nA type alias that actually checks its trait bounds. …\nA type alias that actually checks its trait bounds. …\nNo syntax: <code>T</code> well-formed.\nA helper type that you can wrap round your own type in …\nZero value of the index.\nZero value of the index.\nZero value of the index.\nThis field exists to prevent the creation of <code>AliasTerm</code> …\nThis field exists to prevent the creation of <code>AliasTy</code> …\nThis field exists to prevent the creation of <code>TraitRef</code> …\nAlways <code>RustCall</code>\nThe parameters of the associated or opaque item.\nLifetime and type parameters from the enclosing function, …\nThe parameters of the associated or opaque type.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nAlways false\nReturns <code>true</code> if <code>self</code> can name a name from <code>other</code> – in …\nReturns <code>true</code> if <code>self</code> cannot name some names from <code>other</code> – …\nRepresents the maximum calling capability of the closure.\nRepresents the maximum calling capability of the closure.\nCaptures the closure’s signature. This closure signature …\nProduce a result of type <code>Self::Output</code> from <code>iter</code>. The …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\na function pointer that has the shape …\nWitness type returned by the generator produced by this …\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nReturns <code>true</code> if a type that impls this closure kind must …\nThis field provides fast access to information that is …\nA folding traversal mechanism for complex data structures …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nSet of traits which are used to emulate the inherent impls …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> is the root universe, otherwise false.\nThe coroutines returned by a coroutine-closure’s …\nReturns the “next” universe index in order – this …\nThis field provides fast access to information that is …\nThe outlives relation <code>T: &#39;a</code> or <code>&#39;a: &#39;b</code>. This code frequently\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nIf polarity is Positive: we are proving that the trait is …\nAlways <code>Normal</code> (safe)\nUpdate this index in place by shifting it “in” through …\nUpdate in place by shifting out from <code>amount</code> binders.\nReturns the resulting index when this value is moved into …\nReturns the resulting index when this value is moved out …\nAdjusts any De Bruijn indices so as to make <code>to_binder</code> the …\nRepresents all of the relevant parts of the coroutine …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nA visiting traversal mechanism for complex data structures …\nThe interior type of the coroutine. Represents all types …\n<code>a.xform(b)</code> combines the variance of a context with the …\nBinder is a binder for higher-ranked lifetimes or types. …\nSimilar to <code>super::Binder</code> except that it tracks early bound …\nNumber of region binders we have passed through while …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nWraps <code>value</code> in a binder, asserting that <code>value</code> does not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMakes the identity replacement <code>T0 =&gt; T0, ..., TN =&gt; TN</code>. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimilar to <code>instantiate_identity</code>, but on an iterator of …\nSimilar to <code>instantiate_identity</code>, but on an iterator of …\nUnwraps and returns the value within, but only if it …\nReturns the inner value, but only if it contains no bound …\nThe <code>DefId</code> of the <code>TraitItem</code> for the associated type.\nWraps a <code>value</code> in a binder, using the same bound variables …\nGet the trait ref required for this projection to be well …\nIt is sometimes necessary to adjust the De Bruijn indices …\nSkips the binder and returns the “bound” value. This …\nSkips the binder and returns the “bound” value. This …\nSplits the contents into two things that share the same …\nReturns the <code>DefId</code> of the trait of the associated item …\nObject types don’t have a self type specified. …\nGiven an existential predicate like <code>?Self: PartialEq&lt;u32&gt;</code> …\nA “canonicalized” type <code>V</code> is one where all free …\nRust actually has more than one category of type variables;\nInformation about a canonical variable that is included …\nDescribes the “kind” of the canonical variable. This …\nA set of values corresponding to the canonical variables …\nSome kind of const inference variable.\nEffect variable <code>&#39;?E</code>.\nFloating-point type variable <code>?F</code> (that can only be unified …\nGeneral type variable <code>?T</code> that can be unified with …\nIntegral type variable <code>?I</code> (that can only be unified with …\nA “placeholder” that represents “any const”.\nA “placeholder” that represents “any region”. …\nA “placeholder” that represents “any type”.\nRegion variable <code>&#39;?R</code>.\nSome kind of type inference variable.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCreates dummy var values which should not be used in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllows you to map the <code>value</code> of a canonical while keeping …\nAllows you to map the <code>value</code> of a canonical while keeping …\nReplaces the universe of this canonical variable with <code>ui</code>.\nTrait for decoding to a reference.\nThe shorthand encoding uses an enum’s variant index <code>usize</code>\nBound const variable, used only when preparing a trait …\nRepresents a constant in Rust.\nA <strong><code>const</code></strong> <strong>v</strong>ariable <strong>ID</strong>.\nInfer the value of the effect.\nAn <strong>effect</strong> <strong>v</strong>ariable <strong>ID</strong>.\nA placeholder for a const which could not be computed; …\nUnevaluated non-const-item, used by …\nA fresh const variable. See <code>infer::freshen</code> for more …\nInfer the value of the const.\nAn inference variable for a const, for use in const …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nA const generic parameter.\nA placeholder const - universally quantified higher-ranked …\nAn unnormalized const item such as an anon const or assoc …\nAn unevaluated (potentially generic) constant used in the …\nUsed to hold computed value.\nInfer the value of the const.\nZero value of the index.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nSmall-storage-optimized implementation of a map.\nSmall-storage-optimized implementation of a set.\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nConverts to <code>Arc&lt;T&gt;</code>.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nMakes a clone of the <code>Arc</code> pointer.\nComparison for two <code>Arc</code>s.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCreates an empty <code>[T]</code> inside an Arc\nCreates an empty CStr inside an Arc\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty str inside an Arc\nAttempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements in an iterator.\nDrops the <code>Arc</code>.\nGrows the stack on demand to prevent stack overflow. Call …\nGets the given key’s corresponding entry in the map for …\nEquality for two <code>Arc</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nMove a boxed object to a new, reference-counted allocation.\nAllocate a reference-counted slice and move <code>v</code>’s items …\nCreate an atomically reference-counted pointer from a …\nReturns the argument unchanged.\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nAllocate a reference-counted slice and fill it by cloning <code>v</code>…\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nConverts an atomically reference-counted string slice into …\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGreater-than comparison for two <code>Arc</code>s.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nInserts a key-value pair into the map.\nAdds a value to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nLess-than comparison for two <code>Arc</code>s.\nMakes a mutable reference into the given <code>Arc</code>.\nInequality for two <code>Arc</code>s.\nCreates an empty <code>SsoHashMap</code>.\nCreates an empty <code>SsoHashSet</code>.\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nPartial comparison for two <code>Arc</code>s.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nGets the number of strong (<code>Arc</code>) pointers to this …\nRemoves and returns the value in the set, if any, that is …\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nIf we have the only reference to <code>T</code> then unwrap it. …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nGets the number of <code>Weak</code> pointers to this allocation.\nCreates an empty <code>SsoHashMap</code> with the specified capacity.\nCreates an empty <code>SsoHashSet</code> with the specified capacity.\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nSmall-storage-optimized implementation of a map.\nSmall-storage-optimized implementation of a set.\nGrows the stack on demand to prevent stack overflow. Call …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns an intersection between two effect kinds. If one …\nCalls <code>U::from(self)</code>.\nDescribes how to elaborate an obligation into a …\n“Elaboration” is the process of identifying all the …\nA filter around an iterator of predicates that makes it …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFilter to only the supertraits of trait predicates, i.e. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the def-ids of the transitive supertraits of …\nInstantiating a type variable with the given type would …\nSafe <code>#[target_feature]</code> functions are not assignable to …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTreat parameters as infer vars. This is the correct mode …\nGiven generic arguments from an obligation and an impl, …\nTreat parameters as placeholders in the given environment. …\nA trait object, all of whose components are markers (e.g., …\nSee <code>simplify_type</code>.\nGeneric parameters are pretty much just bound variables, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to simplify a type by only returning the outermost …\nDoes this have <code>Alias</code> or <code>ConstKind::Unevaluated</code>?\nDoes this have any binders with bound vars (e.g. that need …\nDoes this have any bound variables? Used to check if a …\nDoes this have any <code>ConstKind::Bound</code> consts?\nDoes this value have <code>InferConst::Fresh</code>?\nDoes this have <code>ConstKind::Infer</code>?\nDoes this have <code>ConstKind::Param</code>?\nDoes this have <code>ConstKind::Placeholder</code>?\nDoes this have <code>ConstKind::Unevaluated</code>?\nIs an error type/lifetime/const reachable?\n<code>true</code> if there are “names” of types and regions and so …\n<code>true</code> if there are “names” of regions and so forth that …\nDoes this have any region that “appears free” in the …\nDoes this have inference variables? Used to determine …\nDoes this have placeholders?\nDoes this have any <code>ReBound</code> regions?\nDoes this have any <code>ReErased</code> regions?\nDoes this have <code>ReVar</code>?\nDoes this have <code>ReEarlyParam</code>?\nDoes this have <code>RePlaceholder</code>?\nDoes this have any <code>Bound</code> types?\nDoes this have <code>Coroutine</code> or <code>CoroutineWitness</code>?\nDoes this value have …\nDoes this have <code>Infer</code>?\nDoes this have <code>Inherent</code>?\nDoes this have <code>Opaque</code>?\nDoes this have <code>Param</code>?\nDoes this have <code>Placeholder</code>?\nDoes this have <code>Projection</code>?\nDoes this have <code>Weak</code>?\nDoes this value have parameters/placeholders/inference …\nFlags that we track on types. These flags are propagated …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThis trait is implemented for every folding traversal. …\nThis trait is implemented for every type that can be …\nThis trait is implemented for every infallible folding …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nA convenient alternative to <code>try_fold_with</code> for use with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA convenient alternative to <code>try_super_fold_with</code> for use …\nThe entry point for folding. To fold a value <code>t</code> with a …\nProvides a default fold for a recursive type of interest. …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon capabilities of placeholder kinds\nPerforms a instantiation suitable for going from a …\nReturns <code>true</code> when the outermost type cannot be further …\nWhether this ABI is <code>extern &quot;Rust&quot;</code>.\nReturns the type of the struct tail.\nImagine you have a function <code>F: FnOnce(&amp;[T]) -&gt; R</code>, plus an …\nProduce a result of type <code>Self::Output</code> from <code>iter</code>. The …\nLang items used by the new trait solver. This can be …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA trait implemented for all <code>X&lt;&#39;a&gt;</code> types that can be safely …\nUsed for types that are <code>Copy</code> and which <strong>do not care arena </strong>…\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCollect Components for <em>all</em> the args of <code>parent</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPush onto <code>out</code> all the things that must outlive <code>&#39;a</code> for the …\nRepresents the unprojected term of a projection goal.\nE.g., <code>Send</code>.\nEncodes that we have to coerce <em>from</em> the <code>a</code> type to the <code>b</code> …\n<code>Type: const Trait</code>\n<code>Type: ~const Trait</code>\nA <code>ProjectionPredicate</code> for an <code>ExistentialTraitRef</code>.\nAn existential reference to a trait, where <code>Self</code> is erased. …\nAn associated type in an inherent <code>impl</code>\n<code>impl !Trait for Type</code>\n<code>Type: !Trait</code>\nUsed by the new solver. Unlike a <code>ProjectionPredicate</code> this …\n<code>Type: Trait</code>\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\n<code>A: &#39;region</code>\n<code>impl Trait for Type</code>\n<code>Type: Trait</code>\nPolarity for a trait predicate. May either be negative or …\nE.g., <code>Iterator::Item = T</code>.\nAn unevaluated const coming from an associated const.\nThis kind of predicate has no <em>direct</em> correspondent in the …\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\n<code>#[rustc_reservation_impl] impl Trait for Type</code>\nEncodes that <code>a</code> must be a subtype of <code>b</code>. The <code>a_is_expected</code> …\nE.g., <code>Iterator</code>.\nA complete reference to a trait. These take numerous …\nAn unevaluated const coming from a generic const …\nA type alias that actually checks its trait bounds. …\nThis field exists to prevent the creation of <code>AliasTerm</code> …\nThis field exists to prevent the creation of <code>TraitRef</code> …\nThe parameters of the associated or opaque item.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nFlips polarity by turning <code>Positive</code> into <code>Negative</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>TraitRef</code> of the form <code>P0: Foo&lt;P1..Pn&gt;</code> where <code>Pi</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf polarity is Positive: we are proving that the trait is …\nExtracts the underlying existential trait reference from …\nExtracts the underlying trait reference from this …\nExtracts the underlying trait reference and own args from …\nObject types don’t have a self type specified. …\nSeparate from <code>ClauseKind::Projection</code> which is used for …\nA marker predicate that is always ambiguous. Used for …\nProve a clause\nA clause is something that can appear in where bounds or …\n<code>T1</code> coerced to <code>T2</code>\nEnsures that a const generic argument to a parameter …\nConstants must be equal. The first component is the const …\nConstant initializer must evaluate successfully.\nThis should only be used inside of the new solver for …\nTrait must be object-safe.\n<code>where &lt;T as TraitRef&gt;::Name == X</code>, approximately. See the …\n<code>where &#39;a: &#39;r</code>\n<code>T1 &lt;: T2</code>\nCorresponds to <code>where Foo: Bar&lt;A, B, C&gt;</code>. <code>Foo</code> here would be …\n<code>where T: &#39;r</code>\nNo syntax: <code>T</code> well-formed.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nA higher-ranked region. These represent either late-bound …\nA region parameter; for example <code>&#39;a</code> in …\nErased region, used by trait selection, in MIR and during …\nA region that resulted from some other error. Used …\nLate-bound function parameters are represented using a …\nA placeholder region – the higher-ranked version of …\nStatic data that has an “infinite” lifetime. Top in …\nA region variable. Should not exist outside of type …\nRepresentation of regions. Note that the NLL checker uses …\nA <strong>region</strong> <strong>v</strong>ariable <strong>ID</strong>.\nZero value of the index.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nWe switched our variance because a generic argument occurs …\nNo additional information - this is the default. We will …\nContains the success value\nExtra information about why we ended up with a particular …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneric relation routine suitable for most anything.\nRelate the two args for the given item. The default is to …\nSwitch variance for the purpose of relating <code>a</code> and <code>b</code>.\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nMirrors <code>Variance::xform</code> - used to ‘combine’ the …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\nThe search graph does not simply use <code>Interner</code> directly to …\nIn the initial iteration of a cycle, we do not yet have a …\nThe provisional result for a goal which is not on the …\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nStores the stack depth of a currently evaluated goal <em>and</em> …\nZero value of the index.\nReturns the remaining depth allowed for nested goals.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nWhether we’re allowed to use a global cache entry which …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nWhen we encounter a coinductive cycle, we have to fetch the\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nThe head of the smallest non-trivial cycle involving this …\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to fetch a previously computed result from the global …\nWe put only the root goal of a coinductive cycle into the …\nWhether this entry is a non-root cycle participant.\nStarts out as <code>None</code> and gets set when rerunning this goal …\nThe maximum depth reached by this stack entry, only up-to …\nThe stack of goals currently being computed.\nProbably the most involved method of the whole solver.\nThe cache entry for a given input.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to fetch a cached result, checking the recursion limit …\nInsert a final result into the global cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe have to be careful when caching roots of cycles.\nIf the self type is an alias type, e.g. an opaque type or …\nAt codegen time, all monomorphic projections will succeed. …\nWe failed due to ambiguity. This ambiguity can either be a …\nA builtin impl generated by the compiler. When adding a …\nPossible ways the given goal can be proven.\nTrait solving during coherence. There are a few notable …\nA candidate that is registered only during coherence to …\nContains the error value\nAdditional constraints returned on success.\nA goal is a statement, i.e. <code>predicate</code>, we want to prove …\nWhy a specific goal has to be proven.\nA user written impl.\nWe’re proving a where-bound of an impl.\nInstantiating a higher-ranked goal and re-proving it.\nWhy we failed to evaluate a goal.\nSome built-in impl we don’t need to differentiate. This …\nOrdinary trait solving, using everywhere except for …\nA built-in impl for trait objects. The index is only used …\nContains the success value\nWe gave up due to an overflow, most often by hitting the …\nAn assumption from the environment.\nOpaques that are defined in the inference context before a …\nThe result of evaluating a canonical query.\nDepending on the stage of compilation, we want projection …\nA built-in implementation of <code>Upcast</code> for trait objects to …\nUnsizing a tuple like <code>(A, B, ..., X)</code> to <code>(A, B, ..., Y)</code> if <code>X</code>…\nAt type-checking time, we refuse to project any associated …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAdditional constraints returned by this query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nData structure used to inspect trait solver behavior.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse this function to merge the certainty of multiple …\nUpdates the goal to one with a different <code>predicate</code> but the …\nWe added a goal to the <code>EvalCtxt</code> which will get proven the …\nWhen evaluating a goal we also store the original values …\nA call to …\nA call to <code>probe</code> while proving the current goal. This is …\nProbe entered when normalizing the self ty during …\nTry to unify an opaque type with an existing key in the …\nA self-contained computation during trait solving. This …\nWhat kind of probe we’re in. In case the probe …\nA trait goal was satisfied by an impl candidate.\nThe root inference context while proving a goal.\nLooking for param-env candidates that satisfy the trait …\nSome <code>data</code> together with information about how they relate …\nA candidate for proving a trait or alias-relate goal.\nTrying to normalize an alias by at least one step in …\nUsed in the probe that wraps normalizing the non-self type …\nDuring upcasting from some source object to target object …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe actual evaluation of the goal, always <code>ProbeKind::Root</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat happened inside of this probe in chronological order.\nA helper type that you can wrap round your own type in …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThis field provides fast access to information that is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis field provides fast access to information that is …\nAlgebraic data types (ADT). For example: structures, …\nA projection, opaque type, weak type alias, or inherent …\nRepresents the projection of an associated, opaque, or …\nAn array with the given length. Written as <code>[T; N]</code>.\nThe primitive boolean type. Written as <code>bool</code>.\nBound type variable, used to represent the <code>&#39;a</code> in …\nThe primitive character type; holds a Unicode scalar value …\nThe anonymous type of a closure. Used to represent the …\nThe anonymous type of a coroutine. Used to represent the …\nThe anonymous type of a closure. Used to represent the …\nA type representing the types stored inside a coroutine. …\nAn unsized <code>dyn Trait</code> object\nSpecifies how a trait object is represented.\nA sized <code>dyn* Trait</code> object\nA trait object. Written as …\nA placeholder for a type which could not be computed; this …\nA primitive floating-point type. For example, <code>f64</code>.\nA floating-point type variable (<code>{float}</code>).\nA <strong>float</strong>ing-point (<code>f32</code> or <code>f64</code>) type <strong>v</strong>ariable <strong>ID</strong>.\nThe anonymous type of a function declaration/definition. …\nA pointer to a function. Written as <code>fn() -&gt; i32</code>.\nAn unsized FFI type that is opaque to Rust. Written as …\nLike <code>FreshTy</code>, but as a replacement for <code>FloatVar</code>.\nLike <code>FreshTy</code>, but as a replacement for <code>IntVar</code>.\nA <code>FreshTy</code> is one that is generated as a replacement for an …\nA type variable used during type checking.\nA placeholder for a type that hasn’t been inferred yet.\nAn associated type in an inherent <code>impl</code>\nA primitive signed integer type. For example, <code>i32</code>.\nAn integral type variable (<code>{integer}</code>).\nAn <strong>int</strong>egral (<code>u32</code>, <code>i32</code>, <code>usize</code>, etc.) type <strong>v</strong>ariable <strong>ID</strong>.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nThe never type <code>!</code>.\nAn opaque type (usually from <code>impl Trait</code> in type aliases or …\nA type parameter; for example, <code>T</code> in <code>fn f&lt;T&gt;(x: T) {}</code>.\nA pattern newtype. Takes any type and restricts its valid …\nA placeholder type, used during higher ranked subtyping to …\nA projection <code>&lt;Type as Trait&gt;::AssocType</code>. Can get …\nA raw pointer. Written as <code>*mut T</code> or <code>*const T</code>\nA reference; a pointer with an associated lifetime. …\nThe pointee of an array slice. Written as <code>[T]</code>.\nThe pointee of a string slice. Written as <code>str</code>.\nA tuple type. For example, <code>(i32, bool)</code>.\nDefines the kinds of types used by the type system.\nA type variable.\nA <strong>ty</strong>pe <strong>v</strong>ariable <strong>ID</strong>.\nA primitive unsigned integer type. For example, <code>u32</code>.\nA type alias that actually checks its trait bounds. …\nZero value of the index.\nZero value of the index.\nZero value of the index.\nThis field exists to prevent the creation of <code>AliasTy</code> …\nThe parameters of the associated or opaque type.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this alias type is an opaque.\nTransform the generic parameters to have the given <code>impl</code> …\nExtracts the underlying trait reference from this …\nExtracts the underlying trait reference and own args from …\nA closure can be modeled as a struct that looks like:\nStruct returned by <code>split()</code>.\nSimilar to <code>ClosureArgs</code>; see the above documentation for …\nSee docs for explanation of how each argument is used.\nInstantiates a <code>for&lt;&#39;env&gt; ...</code> binder with a specific region.\nUnlike <code>has_escaping_bound_vars</code> or …\nAlways <code>RustCall</code>\nLifetime and type parameters from the enclosing function, …\nAlways false\nRepresents the maximum calling capability of the closure.\nRepresents the maximum calling capability of the closure.\nCaptures the closure’s signature. This closure signature …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\na function pointer that has the shape …\nWitness type returned by the generator produced by this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the closure kind for this closure; only usable …\nReturns the closure kind for this closure; may return a …\nThe coroutines returned by a coroutine-closure’s …\nConstruct <code>ClosureArgs</code> from <code>ClosureArgsParts</code>, containing …\nConstruct <code>CoroutineArgs</code> from <code>CoroutineArgsParts</code>, …\nReturns the generic parameters of the closure’s parent.\nReturns the generic parameters of the coroutine’s parent.\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nThis is the args of the typeck root.\nReturns the type representing the resume type of the …\nReturns the type representing the return type of the …\nAlways <code>Normal</code> (safe)\nExtracts the signature from the closure.\nReturns the “coroutine signature”, which consists of …\nReturns the <code>fn</code> pointer type representing the closure …\nRepresents all of the relevant parts of the coroutine …\nDivides the closure args into their respective components. …\nDivides the coroutine args into their respective …\nConstruct a coroutine from the closure signature. Since a …\nGiven known upvars and a <code>ClosureKind</code>, compute the coroutine\nCompute the tupled upvars that a coroutine-closure’s …\nReturns the tuple type representing the upvars for this …\nReturns the tuple type representing the upvars for this …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nThe upvars captured by the closure. Remains an inference …\nReturns an iterator over the list of types of captured …\nReturns an iterator over the list of types of captured …\nThis describes the types that can be contained in a …\nThe interior type of the coroutine. Represents all types …\nReturns the type representing the yield type of the …\nAn <code>Into</code>-like trait that takes <code>TyCtxt</code> to perform …\nA <code>From</code>-like trait that takes <code>TyCtxt</code> to perform …\nAn “escaping var” is a bound var whose binder is not …\nThis trait is implemented for every type that can be …\nThis trait is implemented for every visiting traversal. …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrue if there are any late-bound regions\nTrue if there are any bound variables\nTrue if there are any un-erased free regions.\nReturn <code>true</code> if this type has regions that are not a part …\n“Free” regions in this context means that it has any …\nTrue if there are any late-bound non-region variables\nReturns <code>true</code> if this type has any regions that escape …\nReturns <code>true</code> if <code>self</code> has any late-bound regions that are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether this value references only ‘global’ …\nAnything bound by <code>outer_index</code> or “above” is escaping.\nIndicates whether this value still has …\nProvides a default visit for a recursive type of interest. …\nThe entry point for visiting. To visit a value <code>t</code> with a …")