(function() {var type_impls = {
"rustc_next_trait_solver":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SearchGraph%3CD%3E\" class=\"impl\"><a href=\"#impl-SearchGraph%3CD%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;D, X&gt; SearchGraph&lt;D, X&gt;<div class=\"where\">where\n    D: Delegate&lt;Cx = X&gt;,\n    X: Cx,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(mode: <a class=\"enum\" href=\"rustc_next_trait_solver/solve/enum.SolverMode.html\" title=\"enum rustc_next_trait_solver::solve::SolverMode\">SolverMode</a>) -&gt; SearchGraph&lt;D, X&gt;</h4></section><section id=\"method.solver_mode\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">solver_mode</a>(&amp;self) -&gt; <a class=\"enum\" href=\"rustc_next_trait_solver/solve/enum.SolverMode.html\" title=\"enum rustc_next_trait_solver::solve::SolverMode\">SolverMode</a></h4></section><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_new_goal\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_new_goal</a>(\n    &amp;mut self,\n    cx: X,\n    input: &lt;X as Cx&gt;::Input,\n    inspect: &amp;mut &lt;D as Delegate&gt;::ProofTreeBuilder,\n    prove_goal: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut SearchGraph&lt;D, X&gt;, &amp;mut &lt;D as Delegate&gt;::ProofTreeBuilder) -&gt; &lt;X as Cx&gt;::Result,\n) -&gt; &lt;X as Cx&gt;::Result</h4></section></summary><div class=\"docblock\"><p>Probably the most involved method of the whole solver.</p>\n<p>Given some goal which is proven via the <code>prove_goal</code> closure, this\nhandles caching, overflow, and coinductive cycles.</p>\n</div></details></div></details>",0,"rustc_next_trait_solver::solve::search_graph::SearchGraph"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()