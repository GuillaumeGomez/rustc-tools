(function() {var type_impls = {
"rustc_ast":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1724\">source</a><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1725\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1712\">source</a><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1713\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[T]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1718\">source</a><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1719\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[T]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1929-1931\">source</a><a href=\"#impl-Clone-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1934\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1747\">source</a><a href=\"#impl-Debug-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1748\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable%3CD%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_serialize/serialize.rs.html#519\">source</a><a href=\"#impl-Decodable%3CD%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_serialize/serialize/trait.Decodable.html\" title=\"trait rustc_serialize::serialize::Decodable\">Decodable</a>&lt;D&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_serialize/serialize/trait.Decoder.html\" title=\"trait rustc_serialize::serialize::Decoder\">Decoder</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_serialize/serialize/trait.Decodable.html\" title=\"trait rustc_serialize::serialize::Decodable\">Decodable</a>&lt;D&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_serialize/serialize.rs.html#520\">source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_serialize/serialize/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(d: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut D</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h4></section></div></details>","Decodable<D>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1963\">source</a><a href=\"#impl-Default-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1964\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1698\">source</a><a href=\"#impl-Deref-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1701\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1706\">source</a><a href=\"#impl-DerefMut-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1707\">source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1674\">source</a><a href=\"#impl-Drop-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1676\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encodable%3CS%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_serialize/serialize.rs.html#513\">source</a><a href=\"#impl-Encodable%3CS%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_serialize/serialize/trait.Encodable.html\" title=\"trait rustc_serialize::serialize::Encodable\">Encodable</a>&lt;S&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_serialize/serialize/trait.Encoder.html\" title=\"trait rustc_serialize::serialize::Encoder\">Encoder</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_serialize/serialize/trait.Encodable.html\" title=\"trait rustc_serialize::serialize::Encodable\">Encodable</a>&lt;S&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_serialize/serialize.rs.html#514\">source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_serialize/serialize/trait.Encodable.html#tymethod.encode\" class=\"fn\">encode</a>(&amp;self, s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>)</h4></section></div></details>","Encodable<S>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1730\">source</a><a href=\"#impl-Extend%3CT%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1732-1734\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#454\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#462\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FlatMapInPlace%3CT%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_data_structures/flat_map_in_place.rs.html#70\">source</a><a href=\"#impl-FlatMapInPlace%3CT%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/flat_map_in_place/trait.FlatMapInPlace.html\" title=\"trait rustc_data_structures::flat_map_in_place::FlatMapInPlace\">FlatMapInPlace</a>&lt;T&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.flat_map_in_place\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_data_structures/flat_map_in_place.rs.html#71\">source</a><a href=\"#method.flat_map_in_place\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/flat_map_in_place/trait.FlatMapInPlace.html#tymethod.flat_map_in_place\" class=\"fn\">flat_map_in_place</a>&lt;F, I&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(T) -&gt; I,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></div></details>","FlatMapInPlace<T>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1978\">source</a><a href=\"#impl-From%3C%26%5BT%5D%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1988\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a <code>ThinVec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::{ThinVec, thin_vec};\n\n<span class=\"macro\">assert_eq!</span>(ThinVec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>","From<&[T]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT%5D%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1994\">source</a><a href=\"#impl-From%3C%26mut+%5BT%5D%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#2004\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a <code>ThinVec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::{ThinVec, thin_vec};\n\n<span class=\"macro\">assert_eq!</span>(ThinVec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>","From<&mut [T]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#2009\">source</a><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#2019\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a <code>ThinVec&lt;T&gt;</code> and move <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::{ThinVec, thin_vec};\n\n<span class=\"macro\">assert_eq!</span>(ThinVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>","From<[T; N]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3C%5BT%5D%3E%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#2024\">source</a><a href=\"#impl-From%3CBox%3C%5BT%5D%3E%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#2038\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.</p>\n<p><strong>NOTE:</strong> unlike <code>std</code>, this must reallocate to change the layout!</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::{ThinVec, thin_vec};\n\n<span class=\"kw\">let </span>b: Box&lt;[i32]&gt; = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(ThinVec::from(b), <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>","From<Box<[T]>>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CT%3E%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#2044\">source</a><a href=\"#impl-From%3CVec%3CT%3E%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#2057\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a <code>std::Vec</code> into a <code>ThinVec</code>.</p>\n<p><strong>NOTE:</strong> this must reallocate to change the layout!</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::{ThinVec, thin_vec};\n\n<span class=\"kw\">let </span>b: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(ThinVec::from(b), <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>","From<Vec<T>>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1969\">source</a><a href=\"#impl-FromIterator%3CT%3E-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1971\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1753-1755\">source</a><a href=\"#impl-Hash-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1757-1759\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1899\">source</a><a href=\"#impl-IntoIterator-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.IntoIter.html\" title=\"struct thin_vec::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1903\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.IntoIter.html\" title=\"struct thin_vec::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1775-1777\">source</a><a href=\"#impl-Ord-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1780\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#855-857\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#876-878\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#902-905\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1815-1817\">source</a><a href=\"#impl-PartialEq%3C%26%5BB%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[B]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1820\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[B]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+0%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+0%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 0]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 0]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 0]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+1%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+1%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 1]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 1]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 1]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+10%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+10%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 10]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 10]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 10]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+11%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+11%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 11]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 11]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 11]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+12%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+12%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 12]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 12]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 12]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+13%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+13%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 13]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 13]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 13]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+14%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+14%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 14]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 14]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 14]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+15%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+15%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 15]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 15]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 15]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+16%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+16%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 16]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 16]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 16]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+17%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+17%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 17]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 17]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 17]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+18%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+18%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 18]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 18]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 18]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+19%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+19%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 19]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 19]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 19]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+2%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+2%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 2]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 2]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 2]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+20%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+20%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 20]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 20]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 20]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+21%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+21%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 21]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 21]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 21]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+22%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+22%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 22]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 22]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 22]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+23%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+23%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 23]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 23]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 23]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+24%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+24%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 24]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 24]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 24]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+25%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+25%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 25]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 25]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 25]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+26%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+26%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 26]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 26]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 26]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+27%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+27%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 27]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 27]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 27]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+28%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+28%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 28]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 28]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 28]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+29%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+29%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 29]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 29]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 29]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+3%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+3%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 3]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 3]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 3]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+30%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+30%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 30]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 30]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 30]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+31%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+31%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 31]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 31]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 31]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+32%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+32%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 32]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 32]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 32]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+4%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+4%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 4]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 4]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 4]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+5%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+5%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 5]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 5]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 5]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+6%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+6%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 6]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 6]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 6]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+7%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+7%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 7]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 7]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 7]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+8%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+8%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 8]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 8]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 8]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB;+9%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%26%5BB;+9%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 9]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 9]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a [B; 9]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1805-1807\">source</a><a href=\"#impl-PartialEq%3C%5BB%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[B]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1810\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[B]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+0%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+0%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 0]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 0]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 0]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+1%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+1%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 1]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 1]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 1]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+10%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+10%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 10]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 10]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 10]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+11%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+11%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 11]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 11]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 11]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+12%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+12%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 12]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 12]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 12]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+13%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+13%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 13]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 13]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 13]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+14%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+14%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 14]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 14]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 14]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+15%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+15%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 15]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 15]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 15]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+16%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+16%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 16]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 16]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 16]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+17%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+17%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 17]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 17]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 17]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+18%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+18%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 18]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 18]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 18]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+19%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+19%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 19]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 19]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 19]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+2%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+2%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 2]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 2]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 2]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+20%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+20%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 20]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 20]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 20]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+21%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+21%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 21]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 21]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 21]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+22%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+22%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 22]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 22]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 22]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+23%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+23%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 23]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 23]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 23]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+24%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+24%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 24]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 24]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 24]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+25%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+25%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 25]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 25]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 25]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+26%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+26%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 26]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 26]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 26]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+27%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+27%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 27]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 27]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 27]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+28%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+28%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 28]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 28]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 28]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+29%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+29%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 29]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 29]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 29]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+3%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+3%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 3]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 3]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 3]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+30%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+30%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 30]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 30]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 30]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+31%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+31%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 31]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 31]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 31]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+32%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+32%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 32]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 32]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 32]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+4%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+4%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 4]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 4]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 4]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+5%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+5%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 5]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 5]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 5]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+6%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+6%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 6]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 6]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 6]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+7%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+7%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 7]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 7]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 7]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+8%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+8%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 8]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 8]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 8]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+9%5D%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#impl-PartialEq%3C%5BB;+9%5D%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 9]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1890-1895\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[B; 9]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; 9]>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CThinVec%3CB%3E%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1785-1787\">source</a><a href=\"#impl-PartialEq%3CThinVec%3CB%3E%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;B&gt;&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1790\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;B&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<ThinVec<B>>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CB%3E%3E-for-ThinVec%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1795-1797\">source</a><a href=\"#impl-PartialEq%3CVec%3CB%3E%3E-for-ThinVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;B&gt;&gt; for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1800\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;B&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<B>>","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1765-1767\">source</a><a href=\"#impl-PartialOrd-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1770\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1179\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1197\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1214\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1232\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1583\">source</a><a href=\"#impl-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1606\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.resize\" class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: T)</h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len()</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len()</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with <code>value</code>.\nIf <code>new_len</code> is less than <code>len()</code>, the <code>Vec</code> is simply truncated.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"string\">\"hello\"</span>];\nvec.resize(<span class=\"number\">3</span>, <span class=\"string\">\"world\"</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"world\"</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.resize(<span class=\"number\">2</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1645\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.extend_from_slice\" class=\"fn\">extend_from_slice</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Clones and appends all elements in a slice to the <code>ThinVec</code>.</p>\n<p>Iterates over the slice <code>other</code>, clones each element, and then appends\nit to this <code>ThinVec</code>. The <code>other</code> slice is traversed in-order.</p>\n<p>Note that this function is same as <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#method.extend\" title=\"method thin_vec::ThinVec::extend\"><code>extend</code></a> except that it is\nspecialized to work with slices instead. If and when Rust gets\nspecialization this function will likely be deprecated (but still\navailable).</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>];\nvec.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div>\n</div></details></div></details>",0,"rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1650\">source</a><a href=\"#impl-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1669\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.dedup\" class=\"fn\">dedup</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes consecutive repeated elements in the vector.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nvec.dedup();\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details></div></details>",0,"rustc_ast::ast::AttrVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#482\">source</a><a href=\"#impl-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#486\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new empty ThinVec.</p>\n<p>This will not allocate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#544\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(cap: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>ThinVec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>ThinVec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p><strong>NOTE</strong>: unlike <code>Vec</code>, <code>ThinVec</code> <strong>MUST</strong> allocate once to keep track of non-zero\nlengths. As such, we cannot provide the same guarantees about ThinVecs\nof ZSTs not allocating. However the allocation never needs to be resized\nto add more ZSTs, since the underlying array is still length 0.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> bytes.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::ThinVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = ThinVec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// space is needed to store the actual elements.\n</span><span class=\"kw\">let </span>vec_units = ThinVec::&lt;()&gt;::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// Only true **without** the gecko-ffi feature!\n// assert_eq!(vec_units.capacity(), usize::MAX);</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#637\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the vector, also referred to\nas its ‘length’.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span>a = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#654\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the vector contains no elements.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::ThinVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = ThinVec::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\n\nv.push(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#669\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements the vector can hold without\nreallocating.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::ThinVec;\n\n<span class=\"kw\">let </span>vec: ThinVec&lt;i32&gt; = ThinVec::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#674\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.has_capacity\" class=\"fn\">has_capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the vector has the capacity to hold any element.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#759\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Forces the length of the vector to <code>new_len</code>.</p>\n<p>This is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n<a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#method.truncate\" title=\"method thin_vec::ThinVec::truncate\"><code>truncate</code></a>, <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#method.resize\" title=\"method thin_vec::ThinVec::resize\"><code>resize</code></a>, <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#method.extend\" title=\"method thin_vec::ThinVec::extend\"><code>extend</code></a>, or <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#method.clear\" title=\"method thin_vec::ThinVec::clear\"><code>clear</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<ul>\n<li><code>new_len</code> must be less than or equal to <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#method.capacity\" title=\"method thin_vec::ThinVec::capacity\"><code>capacity()</code></a>.</li>\n<li>The elements at <code>old_len..new_len</code> must be initialized.</li>\n</ul>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>This method can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::ThinVec;\n\n<span class=\"kw\">pub fn </span>get_dictionary(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;ThinVec&lt;u8&gt;&gt; {\n    <span class=\"comment\">// Per the FFI method's docs, \"32768 bytes is always enough\".\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict = ThinVec::with_capacity(<span class=\"number\">32_768</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict_length = <span class=\"number\">0</span>;\n    <span class=\"comment\">// SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` &lt;= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Make the FFI call...\n        </span><span class=\"kw\">let </span>r = deflateGetDictionary(<span class=\"self\">self</span>.strm, dict.as_mut_ptr(), <span class=\"kw-2\">&amp;mut </span>dict_length);\n        <span class=\"kw\">if </span>r == Z_OK {\n            <span class=\"comment\">// ...and update the length to what was initialized.\n            </span>dict.set_len(dict_length);\n            <span class=\"prelude-val\">Some</span>(dict)\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}</code></pre></div>\n<p>While the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the <code>set_len</code> call:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">thin_vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">thin_vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]];\n<span class=\"comment\">// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 &lt;= capacity` always holds whatever `capacity` is.\n</span><span class=\"kw\">unsafe </span>{\n    vec.set_len(<span class=\"number\">0</span>);\n}</code></pre></div>\n<p>Normally, here, one would use <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#method.clear\" title=\"method thin_vec::ThinVec::clear\"><code>clear</code></a> instead to correctly drop\nthe contents and thus not leak memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#789\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, val: T)</h4></section></summary><div class=\"docblock\"><p>Appends an element to the back of a collection.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> bytes.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\nvec.push(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#812\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a vector and returns it, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it\nis empty.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(vec.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#842\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, elem: T)</h4></section></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.insert(<span class=\"number\">1</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nvec.insert(<span class=\"number\">4</span>, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#880\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes and returns the element at position <code>index</code> within the vector,\nshifting all elements after it to the left.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you don’t need the order of elements\nto be preserved, use <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#method.swap_remove\" title=\"method thin_vec::ThinVec::swap_remove\"><code>swap_remove</code></a> instead. If you’d like to remove\nelements from the beginning of the <code>ThinVec</code>, consider using <code>std::collections::VecDeque</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(v.remove(<span class=\"number\">1</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#920\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes an element from the vector and returns it.</p>\n<p>The removed element is replaced by the last element of the vector.</p>\n<p>This does not preserve ordering, but is <em>O</em>(1).\nIf you need to preserve the element order, use <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#method.remove\" title=\"method thin_vec::ThinVec::remove\"><code>remove</code></a> instead.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">thin_vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>];\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"qux\"</span>, <span class=\"string\">\"baz\"</span>]);\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#981\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater than the vector’s current length, this has no\neffect.</p>\n<p>The <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#method.drain\" title=\"method thin_vec::ThinVec::drain\"><code>drain</code></a> method can emulate <code>truncate</code>, but causes the excess\nelements to be returned instead of dropped.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Truncating a five element vector to two elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\nvec.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n<p>No truncation occurs when <code>len</code> is greater than the vector’s current\nlength:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Truncating when <code>len == 0</code> is equivalent to calling the <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#method.clear\" title=\"method thin_vec::ThinVec::clear\"><code>clear</code></a>\nmethod.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, []);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1008\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the vector, removing all values.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nv.clear();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1027\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<p>Equivalent to <code>&amp;s[..]</code>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n<span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n<span class=\"kw\">let </span>buffer = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\nio::sink().write(buffer.as_slice()).unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1043\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a mutable slice of the entire vector.</p>\n<p>Equivalent to <code>&amp;mut s[..]</code>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n<span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Read};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">3</span>];\nio::repeat(<span class=\"number\">0b101</span>).read_exact(buffer.as_mut_slice()).unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1055\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserve capacity for at least <code>additional</code> more elements to be inserted.</p>\n<p>May reserve more space than requested, to avoid frequent reallocations.</p>\n<p>Panics if the new capacity overflows <code>usize</code>.</p>\n<p>Re-allocates only if <code>self.capacity() &lt; self.len() + additional</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1142\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for <code>additional</code> more elements to be inserted.</p>\n<p>Panics if the new capacity overflows <code>usize</code>.</p>\n<p>Re-allocates only if <code>self.capacity() &lt; self.len() + additional</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1171\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector as much as possible.</p>\n<p>It will drop down as close as possible to the length but the allocator\nmay still inform the vector that there is space for a few more elements.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::ThinVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = ThinVec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">10</span>);\nvec.shrink_to_fit();\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1203-1205\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;e)</code> returns <code>false</code>.\nThis method operates in place and preserves the order of the retained\nelements.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain(|<span class=\"kw-2\">&amp;</span>x| x%<span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1231-1233\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate, passing a mutable reference to it.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns <code>false</code>.\nThis method operates in place and preserves the order of the retained\nelements.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\nvec.retain_mut(|x| {\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    (<span class=\"kw-2\">*</span>x)%<span class=\"number\">2 </span>== <span class=\"number\">0\n</span>});\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by_key\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1271-1274\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.dedup_by_key\" class=\"fn\">dedup_by_key</a>&lt;F, K&gt;(&amp;mut self, key: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes consecutive elements in the vector that resolve to the same key.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>];\n\nvec.dedup_by_key(|i| <span class=\"kw-2\">*</span>i / <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1302-1304\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.dedup_by\" class=\"fn\">dedup_by</a>&lt;F&gt;(&amp;mut self, same_bucket: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes consecutive elements in the vector according to a predicate.</p>\n<p>The <code>same_bucket</code> function is passed references to two elements from the vector, and\nreturns <code>true</code> if the elements compare equal, or <code>false</code> if they do not. Only the first\nof adjacent equal items is kept.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"Bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1355\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the given index.</p>\n<p>Returns a newly allocated vector containing the elements in the range\n<code>[at, len)</code>. After the call, the original vector will be left containing\nthe elements <code>[0, at)</code> with its previous capacity unchanged.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if <code>at &gt; len</code>.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>vec2 = vec.split_off(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1390\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> bytes.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::thin_vec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec2 = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\nvec.append(<span class=\"kw-2\">&amp;mut </span>vec2);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, []);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1426-1428\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.Drain.html\" title=\"struct thin_vec::Drain\">Drain</a>&lt;'_, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the specified range from the vector in bulk, returning all\nremoved elements as an iterator. If the iterator is dropped before\nbeing fully consumed, it drops the remaining removed elements.</p>\n<p>The returned iterator keeps a mutable borrow on the vector to optimize\nits implementation.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">§</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>mem::forget</code></a>, for example), the vector may have lost and leaked\nelements arbitrarily, including elements outside the range.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::{ThinVec, thin_vec};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>u: ThinVec&lt;<span class=\"kw\">_</span>&gt; = v.drain(<span class=\"number\">1</span>..).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"comment\">// A full range clears the vector, like `clear()` does\n</span>v.drain(..);\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1497-1500\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html#tymethod.splice\" class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I,\n) -&gt; <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.Splice.html\" title=\"struct thin_vec::Splice\">Splice</a>&lt;'_, &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a splicing iterator that replaces the specified range in the vector\nwith the given <code>replace_with</code> iterator and yields the removed items.\n<code>replace_with</code> does not need to be the same length as <code>range</code>.</p>\n<p><code>range</code> is removed even if the iterator is not consumed until the end.</p>\n<p>It is unspecified how many elements are removed from the vector\nif the <code>Splice</code> value is leaked.</p>\n<p>The input iterator <code>replace_with</code> is only consumed when the <code>Splice</code> value is dropped.</p>\n<p>This is optimal if:</p>\n<ul>\n<li>The tail (elements in the vector after <code>range</code>) is empty,</li>\n<li>or <code>replace_with</code> yields fewer or equal elements than <code>range</code>’s length</li>\n<li>or the lower bound of its <code>size_hint()</code> is exact.</li>\n</ul>\n<p>Otherwise, a temporary vector is allocated and the tail is moved twice.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>thin_vec::{ThinVec, thin_vec};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">thin_vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>u: ThinVec&lt;<span class=\"kw\">_</span>&gt; = v.splice(<span class=\"number\">1</span>..<span class=\"number\">3</span>, new).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>",0,"rustc_ast::ast::AttrVec"],["<section id=\"impl-DynSend-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_data_structures/marker.rs.html#82-100\">source</a><a href=\"#impl-DynSend-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/marker/trait.DynSend.html\" title=\"trait rustc_data_structures::marker::DynSend\">DynSend</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/marker/trait.DynSend.html\" title=\"trait rustc_data_structures::marker::DynSend\">DynSend</a>,</div></h3></section>","DynSend","rustc_ast::ast::AttrVec"],["<section id=\"impl-DynSync-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_data_structures/marker.rs.html#167-188\">source</a><a href=\"#impl-DynSync-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/marker/trait.DynSync.html\" title=\"trait rustc_data_structures::marker::DynSync\">DynSync</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/marker/trait.DynSync.html\" title=\"trait rustc_data_structures::marker::DynSync\">DynSync</a>,</div></h3></section>","DynSync","rustc_ast::ast::AttrVec"],["<section id=\"impl-Eq-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#1897\">source</a><a href=\"#impl-Eq-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","rustc_ast::ast::AttrVec"],["<section id=\"impl-Send-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#443\">source</a><a href=\"#impl-Send-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Send","rustc_ast::ast::AttrVec"],["<section id=\"impl-Sync-for-ThinVec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/thin-vec/0.2.13/src/thin_vec/lib.rs.html#442\">source</a><a href=\"#impl-Sync-for-ThinVec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://docs.rs/thin-vec/0.2.13/thin_vec/struct.ThinVec.html\" title=\"struct thin_vec::ThinVec\">ThinVec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3></section>","Sync","rustc_ast::ast::AttrVec"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()